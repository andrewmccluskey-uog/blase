[{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/DE_with_blase.html","id":"fetch-the-data","dir":"Articles","previous_headings":"","what":"Fetch the data","title":"DE With BLASE","text":"","code":"root_dir = tools::R_user_dir(\"BLASE\", \"data\") article_dir = path(root_dir, \"DE_with_blase\")  if (!dir.exists(article_dir)) {   dir.create(article_dir, recursive = TRUE) }  bulk_path = path(article_dir, \"heat_shock_bulks\", ext=\"xlsx\") if (!file.exists(bulk_path)) {   download.file('https://static-content.springer.com/esm/art%3A10.1038%2Fs41467-021-24814-1/MediaObjects/41467_2021_24814_MOESM5_ESM.xlsx', bulk_path) }else {   print(\"Using cached\") }  bulk = as.data.frame(read_excel(bulk_path, range = 'S3A_RNAseq!A4:P2571')) rownames(bulk) = bulk$`Transcript_ID` rownames(bulk) = gsub(x=rownames(bulk), pattern=\"_\", replacement=\"-\", fixed=TRUE)  bulk = subset(bulk, , -c(`GeneID`, `Transcript_ID`, `Gene.NameSymbol`, `TranscriptProductDescription`))  genes_to_fix_bulk = rownames(bulk)[!(rownames(bulk) %in% sub(x=rownames(bulk), pattern=\"\\\\.[0-9]\", replacement=\"\"))] genes_to_fix_bulk = unique(sub(x=genes_to_fix_bulk, pattern=\"\\\\.[0-9]\", replacement=\"\")) new_rows = data.frame() rownames_to_remove = c()  # Do some pre-work to get colSums quickly bulk_matrix = data.matrix(bulk) bulk_n = ncol(bulk_matrix)  for (gene in genes_to_fix_bulk) {   targetRowNames = rownames(bulk)[grep(x=rownames(bulk), pattern=gene)]   rownames_to_remove = c(rownames_to_remove, targetRowNames)   # N = col index, M = row index   counts = .colSums(bulk_matrix[targetRowNames,], m=length(targetRowNames), n=bulk_n)   counts = t(data.frame(counts=counts))   rownames(counts) = c(gene)   colnames(counts) = colnames(bulk)   new_rows = rbind(new_rows, counts) }  bulk = bulk[ !(rownames(bulk) %in% rownames_to_remove), ] bulk = rbind(bulk, new_rows)  genes_to_fix_bulk = rownames(bulk)[!(rownames(bulk) %in% sub(x=rownames(bulk), pattern=\"\\\\.[0-9]\", replacement=\"\"))] genes_to_fix_bulk = unique(sub(x=genes_to_fix_bulk, pattern=\"\\\\.[0-9]\", replacement=\"\")) print(paste(\"Remaining genes with dups:\", genes_to_fix_bulk)) #> [1] \"Remaining genes with dups: \"  rm (new_rows, rownames_to_remove, bulk_matrix, bulk_n, genes_to_fix_bulk, counts) gc() #>            used  (Mb) gc trigger  (Mb) max used  (Mb) #> Ncells  8049360 429.9   11784392 629.4 11348818 606.1 #> Vcells 14137943 107.9   22041501 168.2 18301251 139.7"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/DE_with_blase.html","id":"prepare-sc","dir":"Articles","previous_headings":"","what":"Prepare SC","title":"DE With BLASE","text":"using Malaria Cell Atlas data pre-processed ()[articles/generate-MCA-pf-object.html]. data available experiment part package.","code":"data(processed_MCA_PF_SCE, package=\"blase\") gridExtra::grid.arrange(   plotPCA(processed_MCA_PF_SCE, colour_by=\"STAGE_LR\"),   plotUMAP(processed_MCA_PF_SCE, colour_by=\"STAGE_LR\"),   plotPCA(processed_MCA_PF_SCE, colour_by=\"DAY\"),   plotUMAP(processed_MCA_PF_SCE, colour_by=\"DAY\"),   plotPCA(processed_MCA_PF_SCE, colour_by=\"STRAIN\"),   plotUMAP(processed_MCA_PF_SCE, colour_by=\"STRAIN\"),   plotPCA(processed_MCA_PF_SCE, colour_by=\"slingPseudotime_1\"),   plotUMAP(processed_MCA_PF_SCE, colour_by=\"slingPseudotime_1\"),   ncol=2 ) associationTestResult <- associationTest(processed_MCA_PF_SCE, lineages=T, global=F, contrastType=\"consecutive\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/DE_with_blase.html","id":"prepare-blase","dir":"Articles","previous_headings":"","what":"Prepare BLASE","title":"DE With BLASE","text":"prepare BLASE checking good number genes bins.    ## Map Bulk data onto Single Cell Now can map bulk data onto single cell.  can see wild type develops normally 2 knockouts, show delayed growth generally, less response heat shock (41 degrees).","code":"genelist = blase::get_top_n_genes(associationTestResult, n_genes = 500, lineage = 1)  res = find_best_params(processed_MCA_PF_SCE,                        genelist,                        split_by=\"pseudotime_range\",                        pseudotime_slot=\"slingPseudotime_1\",                        bins_count_range = c(6, 8, 10),                        gene_count_range = seq.int(250, 340, 3)) plot_find_best_params_results(res) genes = 300 bins = 8 blaseData = as.BlaseData(processed_MCA_PF_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=bins, split_by=\"pseudotime_range\") blaseData@genes = genelist[1:genes] evaluate_parameters(blaseData, make_plot = TRUE) #> [1] 0.219500 0.274575 processed_MCA_PF_SCE = assign_pseudotime_bins(processed_MCA_PF_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=bins, split_by=\"pseudotime_range\") plotUMAP(processed_MCA_PF_SCE, color=\"pseudotime_bin\") gridExtra::grid.arrange(   plotUMAP(processed_MCA_PF_SCE, color=\"STAGE_LR\"),   plotUMAP(processed_MCA_PF_SCE, color=\"pseudotime_bin\"),   ncol=2 ) mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(blaseData, bulkname, bulk)   mapping_results = c(mapping_results, res) }  blase::plot_mapping_result_heatmap(rev(mapping_results), annotate = TRUE) # Wildtype gridExtra::grid.arrange(   blase::plot_mapping_result_heatmap(rev(mapping_results[1:2]), annotate = TRUE), # 1   blase::plot_mapping_result_heatmap(rev(mapping_results[3:4]), annotate = TRUE), # 2   blase::plot_bin_population(processed_MCA_PF_SCE, 2, group_by_slot=\"STAGE_LR\"), # 1   blase::plot_bin_population(processed_MCA_PF_SCE, 4, group_by_slot=\"STAGE_LR\"), # 2   blase::plot_bin_population(processed_MCA_PF_SCE, 3, group_by_slot=\"STAGE_LR\"), # 1   blase::plot_bin_population(processed_MCA_PF_SCE, 4, group_by_slot=\"STAGE_LR\"), # 2   ncol=2 ) # pb4 knockout gridExtra::grid.arrange(   blase::plot_mapping_result_heatmap(rev(mapping_results[5:6]), annotate = TRUE), # 1   blase::plot_mapping_result_heatmap(rev(mapping_results[7:8]), annotate = TRUE), # 2   blase::plot_bin_population(processed_MCA_PF_SCE, 2, group_by_slot=\"STAGE_LR\"), # 1   blase::plot_bin_population(processed_MCA_PF_SCE, 3, group_by_slot=\"STAGE_LR\"), # 2   ggplot() + theme_void(), # 1   ggplot() + theme_void(), # 2   ncol=2 ) # pb31 knockout gridExtra::grid.arrange(   blase::plot_mapping_result_heatmap(rev(mapping_results[9:10]), annotate = TRUE), # 1   blase::plot_mapping_result_heatmap(rev(mapping_results[11:12]), annotate = TRUE), # 2   blase::plot_bin_population(processed_MCA_PF_SCE, 1, group_by_slot=\"STAGE_LR\"), # 1   blase::plot_bin_population(processed_MCA_PF_SCE, 3, group_by_slot=\"STAGE_LR\"), # 2   blase::plot_bin_population(processed_MCA_PF_SCE, 2, group_by_slot=\"STAGE_LR\"), # 1   ggplot() + theme_void(), #2   ncol=2 )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/DE_with_blase.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"DE With BLASE","text":"","code":"sessionInfo() #> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> Random number generation: #>  RNG:     Mersenne-Twister  #>  Normal:  Inversion  #>  Sample:  Rounding  #>   #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ami_0.1.0                   blase_0.0.0.9000            #>  [3] scater_1.30.1               ggplot2_3.5.0               #>  [5] gridExtra_2.3               fs_1.6.3                    #>  [7] BiocParallel_1.36.0         tradeSeq_1.16.0             #>  [9] slingshot_2.10.0            TrajectoryUtils_1.10.1      #> [11] princurve_2.1.6             scran_1.30.2                #> [13] scuttle_1.12.0              SingleCellExperiment_1.24.0 #> [15] SummarizedExperiment_1.32.0 Biobase_2.62.0              #> [17] GenomicRanges_1.54.1        GenomeInfoDb_1.38.6         #> [19] IRanges_2.36.0              S4Vectors_0.40.2            #> [21] BiocGenerics_0.48.1         MatrixGenerics_1.14.0       #> [23] matrixStats_1.2.0           readxl_1.4.3                #>  #> loaded via a namespace (and not attached): #>  [1] bitops_1.0-7              pbapply_1.7-2             #>  [3] rlang_1.1.3               magrittr_2.0.3            #>  [5] compiler_4.3.3            mgcv_1.9-1                #>  [7] DelayedMatrixStats_1.24.0 systemfonts_1.0.5         #>  [9] vctrs_0.6.5               stringr_1.5.1             #> [11] pkgconfig_2.0.3           crayon_1.5.2              #> [13] fastmap_1.1.1             backports_1.4.1           #> [15] XVector_0.42.0            labeling_0.4.3            #> [17] utf8_1.2.4                rmarkdown_2.25            #> [19] ggbeeswarm_0.7.2          ragg_1.2.7                #> [21] purrr_1.0.2               xfun_0.42                 #> [23] bluster_1.12.0            zlibbioc_1.48.0           #> [25] cachem_1.0.8              beachmat_2.18.1           #> [27] jsonlite_1.8.8            highr_0.10                #> [29] DelayedArray_0.28.0       irlba_2.3.5.1             #> [31] parallel_4.3.3            cluster_2.1.6             #> [33] R6_2.5.1                  bslib_0.6.1               #> [35] stringi_1.8.3             RColorBrewer_1.1-3        #> [37] limma_3.58.1              jquerylib_0.1.4           #> [39] cellranger_1.1.0          Rcpp_1.0.12               #> [41] knitr_1.45                Matrix_1.6-5              #> [43] splines_4.3.3             igraph_2.0.2              #> [45] tidyselect_1.2.0          abind_1.4-5               #> [47] yaml_2.3.8                viridis_0.6.5             #> [49] codetools_0.2-19          lattice_0.22-5            #> [51] tibble_3.2.1              withr_3.0.0               #> [53] evaluate_0.23             desc_1.4.3                #> [55] pillar_1.9.0              checkmate_2.3.1           #> [57] generics_0.1.3            RCurl_1.98-1.14           #> [59] metR_0.15.0               sparseMatrixStats_1.14.0  #> [61] munsell_0.5.0             scales_1.3.0              #> [63] glue_1.7.0                metapod_1.10.1            #> [65] tools_4.3.3               data.table_1.15.2         #> [67] BiocNeighbors_1.20.2      ScaledMatrix_1.10.0       #> [69] locfit_1.5-9.8            cowplot_1.1.3             #> [71] grid_4.3.3                edgeR_4.0.16              #> [73] colorspace_2.1-0          nlme_3.1-164              #> [75] GenomeInfoDbData_1.2.11   beeswarm_0.4.0            #> [77] BiocSingular_1.18.0       vipor_0.4.7               #> [79] cli_3.6.2                 rsvd_1.0.5                #> [81] textshaping_0.3.7         fansi_1.0.6               #> [83] S4Arrays_1.2.0            viridisLite_0.4.2         #> [85] rematch_2.0.0             dplyr_1.1.4               #> [87] gtable_0.3.4              sass_0.4.8                #> [89] digest_0.6.34             ggrepel_0.9.5             #> [91] SparseArray_1.2.4         dqrng_0.3.2               #> [93] farver_2.1.1              memoise_2.0.1             #> [95] htmltools_0.5.7           pkgdown_2.0.7             #> [97] lifecycle_1.0.4           statmod_1.5.0"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/assign-bulk-to-pseudotime.html","id":"setting-up-the-single-cell-experiment","dir":"Articles","previous_headings":"","what":"Setting up the Single Cell Experiment","title":"Assigning bulk RNA-seq to pseudotime","text":"First, let’s generate Single Cell Experiment use tool , based tradeSeq vignette.","code":"data(countMatrix, package = \"tradeSeq\") counts <- as.matrix(countMatrix) rm(countMatrix) data(crv, package = \"tradeSeq\") data(celltype, package = \"tradeSeq\")  pseudotime <- slingPseudotime(crv, na = FALSE) cellWeights <- slingCurveWeights(crv) sce <- fitGAM(counts = counts, pseudotime = pseudotime, cellWeights = cellWeights,                  nknots = 6, verbose = FALSE, BPPARAM=MulticoreParam(N_CORES)) sce$pseudotime = pseudotime[,\"curve1\"] sce$celltype = celltype  sce = subset(sce, , celltype != 'Erythrocyte')  #sce <- computeSumFactors(sce, clusters=quickCluster(sce)) sce <- computeSumFactors(sce) sce <- logNormCounts(sce) normcounts(sce) <- exp(logcounts(sce)) sce = runUMAP(sce)  gridExtra::grid.arrange(       plotUMAP(sce, text_by=\"celltype\", colour_by=\"celltype\"),       plotUMAP(sce, colour_by=\"pseudotime\"),       ncol=1     )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/assign-bulk-to-pseudotime.html","id":"finding-the-most-descriptive-genes-with-tradeseq","dir":"Articles","previous_headings":"","what":"Finding the most descriptive genes with tradeSeq","title":"Assigning bulk RNA-seq to pseudotime","text":"Now ’ll find genes want use. select top 200 can parameter tuning .","code":"# Use consecutive for genes that change over time assoRes = associationTest(sce, lineages=T, global=F, contrastType=\"consecutive\") genelist = blase::get_top_n_genes(assoRes, n_genes = 200, lineage = 1)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/assign-bulk-to-pseudotime.html","id":"parameter-tuning-for-blase","dir":"Articles","previous_headings":"","what":"Parameter Tuning for BLASE","title":"Assigning bulk RNA-seq to pseudotime","text":"using BLASE, can good idea tune number genes bins used. genes can lead poor fitting many genes can lead slower execution, without benefit, less informative genes still need checked. bins can oversimplify trajectory many bins can lead cells available reliable values. can using following commands, provided BLASE:  looks like 80 genes 10 bins give us good specificity, let’s double check. non trivial dataset, may take repetition. ignore 5 bin result might enough resolution - depends dataset. general, bins reduce specificity bin similar cell composition. general, aim many bins clusters.","code":"res = blase::find_best_params(sce, genelist, split_by=\"pseudotime_range\", pseudotime_slot=\"pseudotime\") blase::plot_find_best_params_results(res)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/assign-bulk-to-pseudotime.html","id":"inspect-bin-choice","dir":"Articles","previous_headings":"Parameter Tuning for BLASE","what":"Inspect Bin Choice","title":"Assigning bulk RNA-seq to pseudotime","text":"Now can check good fit showing bins SC dataset map using genes. Ideally, bin specific, high “worst specificity”.","code":"blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=10) blase_data@genes = genelist[1:80] evaluate_parameters(blase_data, make_plot = TRUE) #> [1] 0.04720 0.09215"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/assign-bulk-to-pseudotime.html","id":"inspect-genes-choice","dir":"Articles","previous_headings":"Parameter Tuning for BLASE","what":"Inspect Genes Choice","title":"Assigning bulk RNA-seq to pseudotime","text":"can also see genes change pseudotime, : 1. Using fourier transformation find phase peak gene’s expression (see Bozdech) 2. Plotting expression cells pseudotime, genes ordered phase pseudotime. can see genes appear especially differentially expressed pseudotime, just heuristic, move see perform.   can also inspect top genes change pseudotime bin:","code":"waves = get_waves(sce, pseudotime_slot=\"pseudotime\") gene_selection_matrix(sce, waves, pseudotime_slot=\"pseudotime\", target_matrix_size=length(blase_data@genes)) gene_selection_matrix(sce, waves, pseudotime_slot=\"pseudotime\", genes=blase_data@genes, target_matrix_size=length(blase_data@genes)) evaluate_top_n_genes(blase_data)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/assign-bulk-to-pseudotime.html","id":"mapping-bulk-samples-to-sc-with-blase","dir":"Articles","previous_headings":"","what":"Mapping Bulk Samples to SC with BLASE","title":"Assigning bulk RNA-seq to pseudotime","text":"’re happy, now can try map bulk sample onto single cell. ’ll pseudobulking cell types SingleCellExperiment reality use real bulk dataset. See articles examples.","code":"bulks_df = DataFrame(row.names = rownames(counts(sce))) for (type in unique(sce$celltype)) {   bulks_df = cbind(bulks_df, rowSums(normcounts(subset(sce, , celltype==type)))) } colnames(bulks_df) = unique(sce$celltype)  multipotent_progenitors_result = map_best_bin(blase_data, \"Multipotent progenitors\", bulks_df) multipotent_progenitors_result #> MappingResult for 'Multipotent progenitors': best_bin=1 correlation=0.993366150961088 top_2_distance=0.1635 #>   Confident Result: TRUE (next max upper  0.849835911861228 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations basophils_result = map_best_bin(blase_data, \"Basophils\", bulks_df) basophils_result #> MappingResult for 'Basophils': best_bin=4 correlation=0.933778715424285 top_2_distance=0.0024 #>   Confident Result: FALSE (next max upper  0.936427566807314 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations neutrophils_result = map_best_bin(blase_data, \"Neutrophils\", bulks_df) neutrophils_result #> MappingResult for 'Neutrophils': best_bin=6 correlation=0.982325363338021 top_2_distance=0.0778 #>   Confident Result: TRUE (next max upper  0.922269104547586 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/assign-bulk-to-pseudotime.html","id":"plotting-heatmap-of-mappings","dir":"Articles","previous_headings":"Mapping Bulk Samples to SC with BLASE","what":"Plotting Heatmap of Mappings","title":"Assigning bulk RNA-seq to pseudotime","text":"see well plotted differences cell types, can plot heatmap results. neutrophils Erythrocytes confidently mapped, GMP population doesn’t map well.","code":"plot_mapping_result_heatmap(list(   multipotent_progenitors_result,    basophils_result,    neutrophils_result))"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/assign-bulk-to-pseudotime.html","id":"plotting-detailed-correlation-maps","dir":"Articles","previous_headings":"Mapping Bulk Samples to SC with BLASE","what":"Plotting Detailed Correlation Maps","title":"Assigning bulk RNA-seq to pseudotime","text":"look GMP mapping, can plot correlation bin. lower boundary best selection (bin 3) higher higher bounds next-best bin (bin 4), BLASE makes confident call.","code":"plot_mapping_result_corr(basophils_result)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/assign-bulk-to-pseudotime.html","id":"plotting-summary-plots-of-mappings","dir":"Articles","previous_headings":"Mapping Bulk Samples to SC with BLASE","what":"Plotting Summary Plots of Mappings","title":"Assigning bulk RNA-seq to pseudotime","text":"Now can detailed plotting bins mapped onto Single Cell data, cell type proportions expect , need add pseudotime bins metadata SCE. can see true proportions cell types mapped bin indeed map cell type expect.  view bin population chart full, use:  can see bins high proportions GMP cell type, Blase make convincing call either true “best” mapping. case, since Bin 3 larger proportion number GMP cells, likely best mapping, reflected Blase’s correlation score.","code":"binned_sce = assign_pseudotime_bins(sce, split_by=\"pseudotime_range\", n_bins=10, pseudotime_slot=\"pseudotime\") plot_mapping_result(binned_sce, multipotent_progenitors_result, group_by_slot=\"celltype\") plot_bin_population(binned_sce, 1, group_by_slot=\"celltype\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/assign-bulk-to-pseudotime.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Assigning bulk RNA-seq to pseudotime","text":"","code":"sessionInfo() #> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> Random number generation: #>  RNG:     Mersenne-Twister  #>  Normal:  Inversion  #>  Sample:  Rounding  #>   #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ami_0.1.0                   BiocParallel_1.36.0         #>  [3] scater_1.30.1               ggplot2_3.5.0               #>  [5] scran_1.30.2                scuttle_1.12.0              #>  [7] slingshot_2.10.0            TrajectoryUtils_1.10.1      #>  [9] princurve_2.1.6             tradeSeq_1.16.0             #> [11] SingleCellExperiment_1.24.0 SummarizedExperiment_1.32.0 #> [13] Biobase_2.62.0              GenomicRanges_1.54.1        #> [15] GenomeInfoDb_1.38.6         IRanges_2.36.0              #> [17] S4Vectors_0.40.2            BiocGenerics_0.48.1         #> [19] MatrixGenerics_1.14.0       matrixStats_1.2.0           #> [21] blase_0.0.0.9000            #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-7              pbapply_1.7-2             #>   [3] gridExtra_2.3             rlang_1.1.3               #>   [5] magrittr_2.0.3            compiler_4.3.3            #>   [7] mgcv_1.9-1                DelayedMatrixStats_1.24.0 #>   [9] reshape2_1.4.4            systemfonts_1.0.5         #>  [11] vctrs_0.6.5               stringr_1.5.1             #>  [13] pkgconfig_2.0.3           crayon_1.5.2              #>  [15] fastmap_1.1.1             backports_1.4.1           #>  [17] XVector_0.42.0            labeling_0.4.3            #>  [19] utf8_1.2.4                rmarkdown_2.25            #>  [21] ggbeeswarm_0.7.2          ragg_1.2.7                #>  [23] purrr_1.0.2               bluster_1.12.0            #>  [25] xfun_0.42                 zlibbioc_1.48.0           #>  [27] cachem_1.0.8              beachmat_2.18.1           #>  [29] jsonlite_1.8.8            highr_0.10                #>  [31] DelayedArray_0.28.0       cluster_2.1.6             #>  [33] irlba_2.3.5.1             parallel_4.3.3            #>  [35] R6_2.5.1                  bslib_0.6.1               #>  [37] stringi_1.8.3             RColorBrewer_1.1-3        #>  [39] limma_3.58.1              jquerylib_0.1.4           #>  [41] Rcpp_1.0.12               knitr_1.45                #>  [43] FNN_1.1.4                 Matrix_1.6-5              #>  [45] splines_4.3.3             igraph_2.0.2              #>  [47] tidyselect_1.2.0          abind_1.4-5               #>  [49] yaml_2.3.8                viridis_0.6.5             #>  [51] codetools_0.2-19          plyr_1.8.9                #>  [53] lattice_0.22-5            tibble_3.2.1              #>  [55] withr_3.0.0               evaluate_0.23             #>  [57] desc_1.4.3                pillar_1.9.0              #>  [59] checkmate_2.3.1           generics_0.1.3            #>  [61] RCurl_1.98-1.14           metR_0.15.0               #>  [63] sparseMatrixStats_1.14.0  munsell_0.5.0             #>  [65] scales_1.3.0              glue_1.7.0                #>  [67] metapod_1.10.1            tools_4.3.3               #>  [69] BiocNeighbors_1.20.2      data.table_1.15.2         #>  [71] ScaledMatrix_1.10.0       locfit_1.5-9.8            #>  [73] fs_1.6.3                  cowplot_1.1.3             #>  [75] grid_4.3.3                edgeR_4.0.16              #>  [77] colorspace_2.1-0          nlme_3.1-164              #>  [79] GenomeInfoDbData_1.2.11   beeswarm_0.4.0            #>  [81] BiocSingular_1.18.0       vipor_0.4.7               #>  [83] cli_3.6.2                 rsvd_1.0.5                #>  [85] textshaping_0.3.7         fansi_1.0.6               #>  [87] S4Arrays_1.2.0            viridisLite_0.4.2         #>  [89] dplyr_1.1.4               uwot_0.1.16               #>  [91] gtable_0.3.4              sass_0.4.8                #>  [93] digest_0.6.34             dqrng_0.3.2               #>  [95] SparseArray_1.2.4         ggrepel_0.9.5             #>  [97] farver_2.1.1              memoise_2.0.1             #>  [99] htmltools_0.5.7           pkgdown_2.0.7             #> [101] lifecycle_1.0.4           statmod_1.5.0"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/compare_simulated_data.html","id":"get-the-simulation-data","dir":"Articles","previous_headings":"","what":"Get the simulation data","title":"BLASE on Simulated Data","text":"Steps generate data available generate-simulated-data-object. ’ll set SCE preprocess data ready trajectory analysis. show sim_time mapped onto , shows true simulated trajectory.  start cluster labeled 4.","code":"data(processed_simulated_data_SCE, package=\"blase\") data(processed_simulated_data_SCE, package=\"blase\")  gridExtra::grid.arrange(   plotPCA(processed_simulated_data_SCE, colour_by=\"label\"),   plotUMAP(processed_simulated_data_SCE, colour_by=\"label\"),   plotPCA(processed_simulated_data_SCE, colour_by=\"sim_time\"),   plotUMAP(processed_simulated_data_SCE, colour_by=\"sim_time\"),   ncol=2 ) START_CLUSTER = 4"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/compare_simulated_data.html","id":"split-datasets","dir":"Articles","previous_headings":"","what":"Split Datasets","title":"BLASE on Simulated Data","text":"now split dataset test dataset unseen.","code":"processed_simulated_data_SCE$useAsBulk = round(runif(n=ncol(processed_simulated_data_SCE), min=0, max=1)) == 1 bulk_sce = subset(processed_simulated_data_SCE, , useAsBulk==TRUE) sc_sce = subset(processed_simulated_data_SCE, , useAsBulk==FALSE) rm(processed_simulated_data_SCE)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/compare_simulated_data.html","id":"sc-trajectory-analysis","dir":"Articles","previous_headings":"","what":"SC Trajectory Analysis","title":"BLASE on Simulated Data","text":"Now ’ll use slingshot infer trajectory, tradeseq identify highly variable genes. compare trajectory simulated time .","code":"sc_sce #> class: SingleCellExperiment  #> dim: 455 1030  #> metadata(3): traj_milestone_network traj_progressions #>   traj_dimred_segments #> assays(6): counts logcounts ... counts_protein normcounts #> rownames(455): M1_TF1 M2_TF1 ... HK49 HK50 #> rowData names(20): module_id basal ... mol_mrna mol_protein #> colnames(1030): cell2 cell3 ... cell1996 cell1997 #> colData names(6): step_ix simulation_i ... label useAsBulk #> reducedDimNames(3): MDS PCA UMAP #> mainExpName: NULL #> altExpNames(0): sc_sce <- slingshot(sc_sce, reducedDim = 'UMAP', clusterLabels='label', start.clus=START_CLUSTER) gridExtra::grid.arrange(   plotPCA(sc_sce, colour_by=\"sim_time\"),   plotPCA(sc_sce, colour_by=\"slingPseudotime_1\"),   plotUMAP(sc_sce, colour_by=\"sim_time\"),   plotUMAP(sc_sce, colour_by=\"slingPseudotime_1\"),   plotPCA(sc_sce, colour_by=\"label\"),   plotUMAP(sc_sce, colour_by=\"label\"),   ncol=2 ) sc_sce <- fitGAM(sc_sce, parallel=T, BPPARAM=MulticoreParam(N_CORES), nknots=4) associationTestResult <- associationTest(sc_sce, lineages=T, global=F, contrastType=\"consecutive\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/compare_simulated_data.html","id":"analyse-with-blase","dir":"Articles","previous_headings":"","what":"Analyse with BLASE","title":"BLASE on Simulated Data","text":"start tuning parameters BLASE. See vignette details.","code":"genelist = blase::get_top_n_genes(associationTestResult, n_genes = 200, lineage = 1) res = find_best_params(sc_sce,                        genelist,                        split_by=\"pseudotime_range\",                        pseudotime_slot=\"slingPseudotime_1\",                        bins_count_range = seq.int(3, 10, 1),                        gene_count_range = seq.int(3, 60, 3)) plot_find_best_params_results(res) genes = 30 bins = 5 blaseData = as.BlaseData(sc_sce, pseudotime_slot=\"slingPseudotime_1\", n_bins=bins, split_by=\"pseudotime_range\") blaseData@genes = genelist[1:genes] evaluate_parameters(blaseData, make_plot = TRUE) #> [1] 0.06590 0.14024"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/compare_simulated_data.html","id":"prepare-bulk","dir":"Articles","previous_headings":"","what":"Prepare Bulk","title":"BLASE on Simulated Data","text":"set trajectory bulk dataset, split separate “bulk” counts.","code":"bulk_sce #> class: SingleCellExperiment  #> dim: 455 970  #> metadata(3): traj_milestone_network traj_progressions #>   traj_dimred_segments #> assays(6): counts logcounts ... counts_protein normcounts #> rownames(455): M1_TF1 M2_TF1 ... HK49 HK50 #> rowData names(20): module_id basal ... mol_mrna mol_protein #> colnames(970): cell1 cell6 ... cell1999 cell2000 #> colData names(6): step_ix simulation_i ... label useAsBulk #> reducedDimNames(3): MDS PCA UMAP #> mainExpName: NULL #> altExpNames(0):  bulk_sce <- slingshot(bulk_sce, reducedDim = 'UMAP', clusterLabels='label', start.clus=START_CLUSTER)  gridExtra::grid.arrange(   plotPCA(bulk_sce, colour_by=\"sim_time\"),   plotPCA(bulk_sce, colour_by=\"slingPseudotime_1\"),   plotUMAP(bulk_sce, colour_by=\"sim_time\"),   plotUMAP(bulk_sce, colour_by=\"slingPseudotime_1\"),   ncol=2 ) bulk_sce = assign_pseudotime_bins(bulk_sce, split_by='pseudotime_range', n_bins = bins, pseudotime_slot=\"slingPseudotime_1\") bulk_sce$replicate = round(runif(n=ncol(bulk_sce), min=1, max=2)) bulkified_bins = blase::get_bins_as_bulk(bulk_sce, min_cells_for_bulk = 20)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/compare_simulated_data.html","id":"map-the-bulk-to-the-single-cell","dir":"Articles","previous_headings":"","what":"Map the bulk to the single cell","title":"BLASE on Simulated Data","text":"Now ’ll map bulk onto single cell data BLASE. can see bins mapping results . confidently mapped correctly, 4 confidently mapped, still correctly.   Now can look population proportions bins. row shows following four plots: 1. SC label proportions given bin 2. bulk label proportions given bin 3. Mapping correlations replicate 1 given bin 4. Mapping correlations replicate 2 given bin","code":"mapping_results = c() for (bulkname in colnames(bulkified_bins)) {   res = map_best_bin(blaseData, bulkname, bulkified_bins)   mapping_results = c(mapping_results, res)   print(res) } #> MappingResult for 'bin_1_rep_1': best_bin=1 correlation=0.946888823830309 top_2_distance=0.2476 #>   Confident Result: TRUE (next max upper  0.769997447991129 ) #>   with history for scores against 5  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'bin_1_rep_2': best_bin=1 correlation=0.950443436534111 top_2_distance=0.2694 #>   Confident Result: TRUE (next max upper  0.754488635370526 ) #>   with history for scores against 5  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'bin_2_rep_1': best_bin=2 correlation=0.957806989320484 top_2_distance=0.0691 #>   Confident Result: TRUE (next max upper  0.906870888511905 ) #>   with history for scores against 5  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'bin_2_rep_2': best_bin=2 correlation=0.975988675682019 top_2_distance=0.1295 #>   Confident Result: TRUE (next max upper  0.8652892971342 ) #>   with history for scores against 5  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'bin_3_rep_1': best_bin=3 correlation=0.987316446339184 top_2_distance=0.0556 #>   Confident Result: TRUE (next max upper  0.951713419200516 ) #>   with history for scores against 5  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'bin_3_rep_2': best_bin=3 correlation=0.985091257143017 top_2_distance=0.0554 #>   Confident Result: TRUE (next max upper  0.950155786763199 ) #>   with history for scores against 5  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'bin_4_rep_1': best_bin=4 correlation=0.989654027705869 top_2_distance=0.0652 #>   Confident Result: TRUE (next max upper  0.938139741878059 ) #>   with history for scores against 5  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'bin_4_rep_2': best_bin=4 correlation=0.98053176710876 top_2_distance=0.0685 #>   Confident Result: TRUE (next max upper  0.937145405732266 ) #>   with history for scores against 5  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'bin_5_rep_1': best_bin=5 correlation=0.955157502867431 top_2_distance=0.1235 #>   Confident Result: TRUE (next max upper  0.851897232287168 ) #>   with history for scores against 5  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'bin_5_rep_2': best_bin=5 correlation=0.945822678007565 top_2_distance=0.0772 #>   Confident Result: TRUE (next max upper  0.884636783758664 ) #>   with history for scores against 5  bins #>   Bootstrapped with 200 iterations  sc_sce = assign_pseudotime_bins(sc_sce, split_by = 'pseudotime_range', n_bins = bins, pseudotime_slot='slingPseudotime_1') gridExtra::grid.arrange(   plotUMAP(bulk_sce, colour_by=\"sim_time\"),   plotUMAP(bulk_sce, colour_by=\"slingPseudotime_1\"),   plotUMAP(sc_sce, colour=\"pseudotime_bin\"),   ncol=3 ) blase::plot_mapping_result_heatmap(rev(mapping_results)) gridExtra::grid.arrange(   blase::plot_bin_population(sc_sce, 1, group_by_slot=\"label\") + ggtitle(\"SC Labels in Bin 1\"),   blase::plot_bin_population(bulk_sce, 1, group_by_slot=\"label\") + ggtitle(\"Bulk Labels in Bin 1\"),   blase::plot_mapping_result_corr(mapping_results[[1]]) + ggtitle(\"Mapping correlations for bin 1 rep. 1\"),   blase::plot_mapping_result_corr(mapping_results[[2]]) + ggtitle(\"Mapping correlations for bin 1 rep. 2\"),   ncol=2 ) gridExtra::grid.arrange(   blase::plot_bin_population(sc_sce, 2, group_by_slot=\"label\") + ggtitle(\"SC Labels in Bin 2\"),   blase::plot_bin_population(bulk_sce, 2, group_by_slot=\"label\") + ggtitle(\"Bulk Labels in Bin 2\"),   blase::plot_mapping_result_corr(mapping_results[[3]]) + ggtitle(\"Mapping correlations for bin 2 rep. 1\"),   blase::plot_mapping_result_corr(mapping_results[[4]]) + ggtitle(\"Mapping correlations for bin 2 rep. 2\"),   ncol=2 ) gridExtra::grid.arrange(   blase::plot_bin_population(sc_sce, 3, group_by_slot=\"label\") + ggtitle(\"SC Labels in Bin 3\"),   blase::plot_bin_population(bulk_sce, 3, group_by_slot=\"label\") + ggtitle(\"Bulk Labels in Bin 3\"),   blase::plot_mapping_result_corr(mapping_results[[5]]) + ggtitle(\"Mapping correlations for bin 3 rep. 1\"),   blase::plot_mapping_result_corr(mapping_results[[6]]) + ggtitle(\"Mapping correlations for bin 3 rep. 2\"),   ncol=2 ) gridExtra::grid.arrange(   blase::plot_bin_population(sc_sce, 4, group_by_slot=\"label\") + ggtitle(\"SC Labels in Bin 4\"),   blase::plot_bin_population(bulk_sce, 4, group_by_slot=\"label\") + ggtitle(\"Bulk Labels in Bin 4\"),   blase::plot_mapping_result_corr(mapping_results[[7]]) + ggtitle(\"Mapping correlations for bin 4 rep. 1\"),   blase::plot_mapping_result_corr(mapping_results[[8]]) + ggtitle(\"Mapping correlations for bin 4 rep. 2\"),   ncol=2 ) gridExtra::grid.arrange(   blase::plot_bin_population(sc_sce, 5, group_by_slot=\"label\") + ggtitle(\"SC Labels in Bin 5\"),   blase::plot_bin_population(bulk_sce, 5, group_by_slot=\"label\") + ggtitle(\"Bulk Labels in Bin 5\"),   blase::plot_mapping_result_corr(mapping_results[[9]]) + ggtitle(\"Mapping correlations for bin 5 rep. 1\"),   blase::plot_mapping_result_corr(mapping_results[[10]]) + ggtitle(\"Mapping correlations for bin 5 rep. 2\"),   ncol=2 )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/compare_simulated_data.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"BLASE on Simulated Data","text":"","code":"sessionInfo() #> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> Random number generation: #>  RNG:     Mersenne-Twister  #>  Normal:  Inversion  #>  Sample:  Rounding  #>   #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] fs_1.6.3                    bluster_1.12.0              #>  [3] dyngen_1.0.5                BiocParallel_1.36.0         #>  [5] scater_1.30.1               ggplot2_3.5.0               #>  [7] scran_1.30.2                scuttle_1.12.0              #>  [9] slingshot_2.10.0            TrajectoryUtils_1.10.1      #> [11] princurve_2.1.6             tradeSeq_1.16.0             #> [13] SingleCellExperiment_1.24.0 SummarizedExperiment_1.32.0 #> [15] Biobase_2.62.0              GenomicRanges_1.54.1        #> [17] GenomeInfoDb_1.38.6         IRanges_2.36.0              #> [19] S4Vectors_0.40.2            BiocGenerics_0.48.1         #> [21] MatrixGenerics_1.14.0       matrixStats_1.2.0           #> [23] blase_0.0.0.9000            #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3        jsonlite_1.8.8            #>   [3] magrittr_2.0.3            ggbeeswarm_0.7.2          #>   [5] farver_2.1.1              rmarkdown_2.25            #>   [7] RcppXPtrUtils_0.1.2       zlibbioc_1.48.0           #>   [9] ragg_1.2.7                vctrs_0.6.5               #>  [11] memoise_2.0.1             DelayedMatrixStats_1.24.0 #>  [13] RCurl_1.98-1.14           htmltools_0.5.7           #>  [15] S4Arrays_1.2.0            BiocNeighbors_1.20.2      #>  [17] ami_0.1.0                 SparseArray_1.2.4         #>  [19] sass_0.4.8                bslib_0.6.1               #>  [21] desc_1.4.3                cachem_1.0.8              #>  [23] igraph_2.0.2              lifecycle_1.0.4           #>  [25] pkgconfig_2.0.3           rsvd_1.0.5                #>  [27] Matrix_1.6-5              R6_2.5.1                  #>  [29] fastmap_1.1.1             GenomeInfoDbData_1.2.11   #>  [31] digest_0.6.34             colorspace_2.1-0          #>  [33] patchwork_1.2.0           metR_0.15.0               #>  [35] dqrng_0.3.2               irlba_2.3.5.1             #>  [37] textshaping_0.3.7         beachmat_2.18.1           #>  [39] labeling_0.4.3            lmds_0.1.0                #>  [41] fansi_1.0.6               polyclip_1.10-6           #>  [43] abind_1.4-5               mgcv_1.9-1                #>  [45] compiler_4.3.3            remotes_2.4.2.1           #>  [47] GillespieSSA2_0.3.0       withr_3.0.0               #>  [49] backports_1.4.1           viridis_0.6.5             #>  [51] highr_0.10                ggforce_0.4.2             #>  [53] MASS_7.3-60.0.1           proxyC_0.3.4              #>  [55] DelayedArray_0.28.0       tools_4.3.3               #>  [57] vipor_0.4.7               beeswarm_0.4.0            #>  [59] dynutils_1.0.11           glue_1.7.0                #>  [61] nlme_3.1-164              grid_4.3.3                #>  [63] checkmate_2.3.1           cluster_2.1.6             #>  [65] generics_0.1.3            gtable_0.3.4              #>  [67] tzdb_0.4.0                tidyr_1.3.1               #>  [69] data.table_1.15.2         hms_1.1.3                 #>  [71] BiocSingular_1.18.0       tidygraph_1.3.1           #>  [73] ScaledMatrix_1.10.0       metapod_1.10.1            #>  [75] utf8_1.2.4                XVector_0.42.0            #>  [77] ggrepel_0.9.5             pillar_1.9.0              #>  [79] stringr_1.5.1             limma_3.58.1              #>  [81] splines_4.3.3             tweenr_2.0.3              #>  [83] dplyr_1.1.4               lattice_0.22-5            #>  [85] tidyselect_1.2.0          locfit_1.5-9.8            #>  [87] pbapply_1.7-2             knitr_1.45                #>  [89] gridExtra_2.3             edgeR_4.0.16              #>  [91] xfun_0.42                 graphlayouts_1.1.0        #>  [93] statmod_1.5.0             stringi_1.8.3             #>  [95] yaml_2.3.8                evaluate_0.23             #>  [97] codetools_0.2-19          ggraph_2.2.0              #>  [99] tibble_3.2.1              cli_3.6.2                 #> [101] RcppParallel_5.1.7        systemfonts_1.0.5         #> [103] munsell_0.5.0             jquerylib_0.1.4           #> [105] Rcpp_1.0.12               parallel_4.3.3            #> [107] pkgdown_2.0.7             readr_2.1.5               #> [109] assertthat_0.2.1          sparseMatrixStats_1.14.0  #> [111] bitops_1.0-7              viridisLite_0.4.2         #> [113] scales_1.3.0              purrr_1.0.2               #> [115] crayon_1.5.2              rlang_1.1.3               #> [117] cowplot_1.1.3"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"","code":"root_dir = tools::R_user_dir(\"BLASE\", \"data\")  article_dir = path(root_dir, \"3d7_lifecycle\") if (!dir.exists(article_dir)) {   dir.create(article_dir, recursive = TRUE) }  bulk_path = path(article_dir, \"3d7_bulk_timepoints\", ext=\"xlsx\") if (!file.exists(bulk_path)) {   download.file('https://static-content.springer.com/esm/art%3A10.1038%2Fs41467-018-04966-3/MediaObjects/41467_2018_4966_MOESM4_ESM.xlsx', bulk_path) }else {   print(\"Using cached\") }  bulk = as.data.frame(read_excel(bulk_path, sheet = \"Estimated Total Abundance\")) rownames(bulk) = bulk$`Gene ID` rownames(bulk) = gsub(x=rownames(bulk), pattern=\"_\", replacement=\"-\", fixed=TRUE) bulk = bulk[7:nrow(bulk),] bulk = subset(bulk, , -c(`Gene ID`, `Annotation`, `Peak Time (hpi)`, `p-value`))"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"prepare-sc","dir":"Articles","previous_headings":"","what":"Prepare SC","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"use Malaria Cell Atlas’s Plasmodium Falciparum 10x data (Howick et al. 2019, processing described generate-MCA-pf-object.","code":"data(processed_MCA_PF_SCE, package=\"blase\") gridExtra::grid.arrange(   plotPCA(processed_MCA_PF_SCE, colour_by=\"STAGE_LR\"),   plotUMAP(processed_MCA_PF_SCE, colour_by=\"STAGE_LR\"),   plotPCA(processed_MCA_PF_SCE, colour_by=\"DAY\"),   plotUMAP(processed_MCA_PF_SCE, colour_by=\"DAY\"),   plotPCA(processed_MCA_PF_SCE, colour_by=\"STRAIN\"),   plotUMAP(processed_MCA_PF_SCE, colour_by=\"STRAIN\"),   plotPCA(processed_MCA_PF_SCE, colour_by=\"slingPseudotime_1\"),   plotUMAP(processed_MCA_PF_SCE, colour_by=\"slingPseudotime_1\"),   ncol=2 )"},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"tradeseq","dir":"Articles","previous_headings":"Get Genes","what":"TradeSeq","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"","code":"associationTestResult <- associationTest(processed_MCA_PF_SCE, lineages=T, global=F, contrastType=\"consecutive\") genelist = blase::get_top_n_genes(associationTestResult, n_genes = 500, lineage = 1) res = find_best_params(processed_MCA_PF_SCE,                        genelist,                        split_by=\"pseudotime_range\",                        pseudotime_slot=\"slingPseudotime_1\",                        bins_count_range = seq.int(10, 14, 1),                        gene_count_range = seq.int(12, 192, 3)) plot_find_best_params_results(res) res2 = find_best_params(processed_MCA_PF_SCE,                        genelist,                        split_by=\"pseudotime_range\",                        pseudotime_slot=\"slingPseudotime_1\",                        bins_count_range = 12,                        gene_count_range = seq.int(12, 192, 3)) plot_find_best_params_results(res2)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"get-bozdech-genes","dir":"Articles","previous_headings":"Get Genes","what":"Get Bozdech Genes","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"Bozdech’s paper describes using fourier transform gene expression cells ordered time. gives amplitude phase peak waves. case assume many genes important lifecycle development turned temporarily lifecycle, turned , resulting clear peak. find top “power” genes analysing strong peaks versus average expression gene pseudotime. BLASE provides convenience function perform analysis, also allows select top genes amplitude explained variance preferred. See documentation select_genes_by_fourier_method() information. noteworthy BLASE force genes selected cover wide range pseudotime default, instead simply top power genes.","code":"waves = get_waves(processed_MCA_PF_SCE, \"slingPseudotime_1\", n_cores=N_CORES) fourier_power_genes = select_genes_by_fourier_method(processed_MCA_PF_SCE, waves, n_groups=100, top_n_per_group=2) #> Warning in .local(x, ...): Fewer genes identified as good matches than #> requested. requested=200 found=139 head(fourier_power_genes) #>               amplitude      phase k         r2          gene total_expression #> PF3D7-1035900 56.590720 0.06285167 1 0.06903311 PF3D7-1035900        180722.50 #> PF3D7-0203100 11.329514 0.03413750 1 0.09942970 PF3D7-0203100         42541.57 #> PF3D7-1035400 64.328026 0.19227314 1 0.06203592 PF3D7-1035400        208335.90 #> PF3D7-0613900 65.277368 0.19830967 1 0.06787626 PF3D7-0613900        204883.93 #> PF3D7-0507500  8.015728 0.25552105 1 0.03808634 PF3D7-0507500         30413.86 #> PF3D7-0210600 20.553304 0.24694346 1 0.06727891 PF3D7-0210600         69061.75 #>               peak_expression cellcount_in_peak       power #> PF3D7-1035900       6061.8055               287 0.009335621 #> PF3D7-0203100       1322.9882               274 0.008563579 #> PF3D7-1035400       4213.9056               306 0.015265654 #> PF3D7-0613900       4585.9112               307 0.014234329 #> PF3D7-0507500        500.1799               325 0.016025689 #> PF3D7-0210600       1572.0944               325 0.013073836"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"compare-gene-lists","dir":"Articles","previous_headings":"Get Genes","what":"Compare Gene Lists","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"generate heatmap log counts selected genes, ordered pseudotime. Genes ordered phase pseudotime.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"all-genes","dir":"Articles","previous_headings":"Get Genes > Compare Gene Lists","what":"All Genes","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"","code":"gene_selection_matrix(processed_MCA_PF_SCE, waves, n_cores=N_CORES, target_matrix_size=nrow(waves))"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"tradeseq-genes","dir":"Articles","previous_headings":"Get Genes > Compare Gene Lists","what":"TradeSeq Genes","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"","code":"gene_selection_matrix(processed_MCA_PF_SCE, waves, genes=genelist[0:300], n_cores=N_CORES, target_matrix_size=300)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"bozdech-genes","dir":"Articles","previous_headings":"Get Genes > Compare Gene Lists","what":"Bozdech Genes","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"","code":"gene_selection_matrix(processed_MCA_PF_SCE, waves, genes=rownames(fourier_power_genes), n_cores=N_CORES, target_matrix_size=length(unique(rownames(fourier_power_genes))))"},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"using-tradeseq-genes","dir":"Articles","previous_headings":"Use each gene list","what":"Using TradeSeq genes","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"Now use genes generated TradeSeq.","code":"genes = 300 bins = 12 processed_MCA_PF_SCE = assign_pseudotime_bins(processed_MCA_PF_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=bins, split_by=\"pseudotime_range\") plotUMAP(processed_MCA_PF_SCE, color=\"pseudotime_bin\") gridExtra::grid.arrange(   plotUMAP(processed_MCA_PF_SCE, color=\"STAGE_LR\"),   plotUMAP(processed_MCA_PF_SCE, color=\"pseudotime_bin\"),   ncol=2 ) blaseData = as.BlaseData(processed_MCA_PF_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=bins, split_by=\"pseudotime_range\") blaseData@genes = genelist[1:genes] evaluate_parameters(blaseData, make_plot = TRUE) #> [1] 0.1068000 0.1488833 ## Map Bulk data onto Single Cell mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(blaseData, bulkname, bulk)   mapping_results = c(mapping_results, res) }  blase::plot_mapping_result_heatmap(rev(mapping_results), annotate = TRUE)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"using-bozdech-genes","dir":"Articles","previous_headings":"Use each gene list","what":"Using Bozdech Genes","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"use genes generated Bozdech’s Fourier method.","code":"blaseData = as.BlaseData(processed_MCA_PF_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=bins, split_by=\"pseudotime_range\") blaseData@genes = rownames(fourier_power_genes) evaluate_parameters(blaseData, make_plot = TRUE) #> [1] 0.095400 0.141875 ## Map Bulk data onto Single Cell mapping_results_fourier = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(blaseData, bulkname, bulk)   mapping_results_fourier = c(mapping_results_fourier, res) }  blase::plot_mapping_result_heatmap(rev(mapping_results_fourier), annotate = TRUE)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"analysing-accuracy","dir":"Articles","previous_headings":"","what":"Analysing Accuracy","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"Bulk paper describes following timepoints HPI matching lifecycle stages, figure 1: * 5-15: Ring * 15-34: Troph * 34-40: Schizont * 40-45: Merozoites , can see bins aligned lifecycle stages Now can check accuracy techniques, according prior knowledge.","code":"expected_rings_hpi = 5:15 expected_trophs_hpi = 16:34 expected_schizont_hpi = 35:42 table(processed_MCA_PF_SCE@colData[c(\"STAGE_LR\", \"pseudotime_bin\")]) #>              pseudotime_bin #> STAGE_LR         1    2    3    4    5    6    7    8    9   10   11   12 #>   gametocyte     0    0    0    0    0    0    0    0    0    0    0    0 #>   ring         107   43   35  574  732    0    0    0    0    0    0    0 #>   schizont     240    0    0    0    0    0    0  258  482  326  273  137 #>   trophozoite    0    0    0    0  401 1670  512  210    0    0    0    0 results_tradeseq = analyse_mapping_results(mapping_results) results_fourier = analyse_mapping_results(mapping_results_fourier)  print(paste(\"Tradeseq:\", describe_results(results_tradeseq))) #> [1] \"Tradeseq: 7 wrong out of 38, 1 confident calls wrong out of 13\" print(paste(\"Fourier:\", describe_results(results_fourier))) #> [1] \"Fourier: 1 wrong out of 38, 0 confident calls wrong out of 16\""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"’ve shown using Bozdech’s method can give better mappings using tradeseq case P. Falciparum lifecycle. Selecting informative genes vital BLASE’s performance, however non-trivial problem now - reccomend select genes carefully apply prior knowledge genes change trajectory possible.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/falciparum_lifecycle.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"P. Falciparum Lifecycle - Comparing Bozdech and TradeSeq","text":"","code":"sessionInfo() #> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> Random number generation: #>  RNG:     Mersenne-Twister  #>  Normal:  Inversion  #>  Sample:  Rounding  #>   #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] fs_1.6.3                    ami_0.1.0                   #>  [3] scater_1.30.1               ggplot2_3.5.0               #>  [5] blase_0.0.0.9000            BiocParallel_1.36.0         #>  [7] tradeSeq_1.16.0             slingshot_2.10.0            #>  [9] TrajectoryUtils_1.10.1      princurve_2.1.6             #> [11] scran_1.30.2                scuttle_1.12.0              #> [13] SingleCellExperiment_1.24.0 SummarizedExperiment_1.32.0 #> [15] Biobase_2.62.0              GenomicRanges_1.54.1        #> [17] GenomeInfoDb_1.38.6         IRanges_2.36.0              #> [19] S4Vectors_0.40.2            BiocGenerics_0.48.1         #> [21] MatrixGenerics_1.14.0       matrixStats_1.2.0           #> [23] readxl_1.4.3                #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-7              pbapply_1.7-2             #>   [3] gridExtra_2.3             rlang_1.1.3               #>   [5] magrittr_2.0.3            compiler_4.3.3            #>   [7] mgcv_1.9-1                DelayedMatrixStats_1.24.0 #>   [9] reshape2_1.4.4            systemfonts_1.0.5         #>  [11] vctrs_0.6.5               stringr_1.5.1             #>  [13] pkgconfig_2.0.3           crayon_1.5.2              #>  [15] fastmap_1.1.1             backports_1.4.1           #>  [17] XVector_0.42.0            labeling_0.4.3            #>  [19] utf8_1.2.4                rmarkdown_2.25            #>  [21] ggbeeswarm_0.7.2          ragg_1.2.7                #>  [23] purrr_1.0.2               xfun_0.42                 #>  [25] bluster_1.12.0            zlibbioc_1.48.0           #>  [27] cachem_1.0.8              beachmat_2.18.1           #>  [29] jsonlite_1.8.8            highr_0.10                #>  [31] DelayedArray_0.28.0       irlba_2.3.5.1             #>  [33] parallel_4.3.3            cluster_2.1.6             #>  [35] R6_2.5.1                  bslib_0.6.1               #>  [37] stringi_1.8.3             RColorBrewer_1.1-3        #>  [39] limma_3.58.1              jquerylib_0.1.4           #>  [41] cellranger_1.1.0          Rcpp_1.0.12               #>  [43] knitr_1.45                Matrix_1.6-5              #>  [45] splines_4.3.3             igraph_2.0.2              #>  [47] tidyselect_1.2.0          abind_1.4-5               #>  [49] yaml_2.3.8                viridis_0.6.5             #>  [51] codetools_0.2-19          plyr_1.8.9                #>  [53] lattice_0.22-5            tibble_3.2.1              #>  [55] withr_3.0.0               evaluate_0.23             #>  [57] desc_1.4.3                pillar_1.9.0              #>  [59] checkmate_2.3.1           generics_0.1.3            #>  [61] RCurl_1.98-1.14           metR_0.15.0               #>  [63] sparseMatrixStats_1.14.0  munsell_0.5.0             #>  [65] scales_1.3.0              glue_1.7.0                #>  [67] metapod_1.10.1            tools_4.3.3               #>  [69] data.table_1.15.2         BiocNeighbors_1.20.2      #>  [71] ScaledMatrix_1.10.0       locfit_1.5-9.8            #>  [73] cowplot_1.1.3             grid_4.3.3                #>  [75] edgeR_4.0.16              colorspace_2.1-0          #>  [77] nlme_3.1-164              GenomeInfoDbData_1.2.11   #>  [79] beeswarm_0.4.0            BiocSingular_1.18.0       #>  [81] vipor_0.4.7               cli_3.6.2                 #>  [83] rsvd_1.0.5                textshaping_0.3.7         #>  [85] fansi_1.0.6               S4Arrays_1.2.0            #>  [87] viridisLite_0.4.2         dplyr_1.1.4               #>  [89] gtable_0.3.4              sass_0.4.8                #>  [91] digest_0.6.34             ggrepel_0.9.5             #>  [93] SparseArray_1.2.4         dqrng_0.3.2               #>  [95] farver_2.1.1              memoise_2.0.1             #>  [97] htmltools_0.5.7           pkgdown_2.0.7             #>  [99] lifecycle_1.0.4           statmod_1.5.0"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Comparing Gene Selection Methods","text":"","code":"root_dir = tools::R_user_dir(\"BLASE\", \"data\")  article_dir = path(root_dir, \"gene_selection_comparison\") if (!dir.exists(article_dir)) {   dir.create(article_dir, recursive = TRUE) }  bulk_path = path(article_dir, 'otto_pb_bulk_timepoints', ext=\"xlsx\") if (!file.exists(bulk_path)) {   download.file('https://static-content.springer.com/esm/art%3A10.1186%2Fs12915-014-0086-0/MediaObjects/12915_2014_86_MOESM9_ESM.xlsx', bulk_path) }else {   print(\"Using cached\") }  bulk = as.data.frame(read_excel(bulk_path, range = \"FPKM PbA !A4:L5024\")) rownames(bulk) = bulk$`Gene Models (IDs)` rownames(bulk) = gsub(x=rownames(bulk), pattern=\"_\", replacement=\"-\", fixed=TRUE) bulk = subset(bulk, , -c(`Gene Models (IDs)`)) rownames(bulk) = paste0(rownames(bulk), '0'); data(processed_MCA_PB_SCE, package=\"blase\")  # Remove unshared genes from bulk and sc bulk = bulk[rownames(bulk) %in% rownames(processed_MCA_PB_SCE),] processed_MCA_PB_SCE = processed_MCA_PB_SCE[rownames(processed_MCA_PB_SCE) %in% rownames(bulk),]  gridExtra::grid.arrange(   plotPCA(processed_MCA_PB_SCE, colour_by=\"STAGE_LR\"),   plotUMAP(processed_MCA_PB_SCE, colour_by=\"STAGE_LR\"),   plotPCA(processed_MCA_PB_SCE, colour_by=\"slingPseudotime_1\"),   plotUMAP(processed_MCA_PB_SCE, colour_by=\"slingPseudotime_1\"),   plotPCA(processed_MCA_PB_SCE, colour_by=\"pseudotime_bin\"),   plotUMAP(processed_MCA_PB_SCE, colour_by=\"pseudotime_bin\"),   ncol=2 )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"using-tradeseq","dir":"Articles","previous_headings":"","what":"Using TradeSeq","title":"Comparing Gene Selection Methods","text":"First, ’ll use tradeSeq find genes Tradeseq thinks variable pseudotime.","code":"associationTestResult <- associationTest(processed_MCA_PB_SCE, lineages=T, global=F, contrastType=\"consecutive\") table(processed_MCA_PB_SCE$pseudotime_bin) #>  #>    1    2    3    4    5    6    7    8    9   10   11   12  #>  273  295  162  882 1247  473  341  293    5  370  185  237 plotUMAP(processed_MCA_PB_SCE, colour_by=\"pseudotime_bin\") genelist = blase::get_top_n_genes(associationTestResult, n_genes = 200, lineage = 1)  res = find_best_params(processed_MCA_PB_SCE,                        genelist,                        split_by=\"pseudotime_range\",                        pseudotime_slot=\"slingPseudotime_1\",                        bins_count_range = seq.int(8, 16, 2),                        gene_count_range = seq.int(20, 180, 3))  x = as.BlaseData(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=14, split_by=\"pseudotime_range\")  tradeseq_tuning = plot_find_best_params_results(res) BUCKETS_COUNT = 12 GENES_TO_USE_COUNT = 120 x = as.BlaseData(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\") x@genes = genelist[1:GENES_TO_USE_COUNT]  genes_tradeseq = x@genes  processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\")  plotUMAP(processed_MCA_PB_SCE, colour=\"pseudotime_bin\") mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(x, bulkname, bulk)   mapping_results = c(mapping_results, res)   print(res) } #> MappingResult for 'Ring': best_bin=3 correlation=0.717320647267171 top_2_distance=0.0765 #>   Confident Result: TRUE (next max upper  0.655989999305507 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ring-R': best_bin=3 correlation=0.817570664629488 top_2_distance=0.0485 #>   Confident Result: FALSE (next max upper  0.789274088233135 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite': best_bin=5 correlation=0.899374956594208 top_2_distance=0.0266 #>   Confident Result: TRUE (next max upper  0.884075283005764 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite-R': best_bin=5 correlation=0.895339954163483 top_2_distance=0.0103 #>   Confident Result: FALSE (next max upper  0.89497881797347 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont': best_bin=10 correlation=0.616869227029655 top_2_distance=0.0233 #>   Confident Result: FALSE (next max upper  0.640802807139989 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont-R': best_bin=9 correlation=0.696268556050864 top_2_distance=0.0383 #>   Confident Result: FALSE (next max upper  0.679290228488089 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte': best_bin=4 correlation=0.350218765192027 top_2_distance=0.0121 #>   Confident Result: FALSE (next max upper  0.360286062029264 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte-R': best_bin=4 correlation=0.346135148274186 top_2_distance=0.0062 #>   Confident Result: FALSE (next max upper  0.360138621708954 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h': best_bin=4 correlation=0.295437183137718 top_2_distance=0.0081 #>   Confident Result: FALSE (next max upper  0.312736995624696 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h-R': best_bin=4 correlation=0.341294534342663 top_2_distance=0.02 #>   Confident Result: FALSE (next max upper  0.337155358010973 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-24h': best_bin=1 correlation=0.480825057295645 top_2_distance=0.0466 #>   Confident Result: FALSE (next max upper  0.459234308602947 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations  tradeseq_heat = blase::plot_mapping_result_heatmap(rev(mapping_results)) + ggplot2::ggtitle(paste0('TradeSeq (', GENES_TO_USE_COUNT,')')) tradeseq_heat"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"using-marker-genes","dir":"Articles","previous_headings":"","what":"Using marker genes","title":"Comparing Gene Selection Methods","text":"simply select top n marker genes lifecycle stage annotations.  ## Pseudotime bin marker genes select marker genes pseudotime bin.","code":"markers <- scoreMarkers(processed_MCA_PB_SCE, lfc=1, groups=processed_MCA_PB_SCE$STAGE_LR)  top_n_markers_per_group = 40 genes=DataFrame() for (group in names(markers)) {   group_markers=markers[[group]]   top_genes=group_markers[order(-group_markers$mean.logFC.cohen),][0:top_n_markers_per_group,]   top_genes=top_genes[0:top_n_markers_per_group,]   top_genes   top_genes$group = group   genes = rbind(genes,top_genes) }  genes = DataFrame(genes$mean.logFC.cohen, genes$group) genelist = rownames(genes) res = find_best_params(processed_MCA_PB_SCE,                        genelist,                        split_by=\"pseudotime_range\",                        pseudotime_slot=\"slingPseudotime_1\",                        bins_count_range = c(12),                        gene_count_range = c(120)) markergenes_tuning = plot_find_best_params_results(res) BUCKETS_COUNT = 12 GENES_TO_USE_COUNT = 120 x = as.BlaseData(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\") x@genes = genelist[1:GENES_TO_USE_COUNT] genes_markergenes = x@genes  processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\")  mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(x, bulkname, bulk)   mapping_results = c(mapping_results, res)   print(res) } #> MappingResult for 'Ring': best_bin=3 correlation=0.702951593860685 top_2_distance=0.055 #>   Confident Result: TRUE (next max upper  0.661881446383033 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ring-R': best_bin=3 correlation=0.806486561566775 top_2_distance=0.0049 #>   Confident Result: FALSE (next max upper  0.811763398612525 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite': best_bin=5 correlation=0.870997985971248 top_2_distance=0.0154 #>   Confident Result: TRUE (next max upper  0.862698798527675 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite-R': best_bin=4 correlation=0.852739773595388 top_2_distance=0.0024 #>   Confident Result: FALSE (next max upper  0.856462254323217 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont': best_bin=10 correlation=0.636759497187305 top_2_distance=0.0379 #>   Confident Result: FALSE (next max upper  0.640968585325089 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont-R': best_bin=9 correlation=0.61449671285455 top_2_distance=0.0243 #>   Confident Result: FALSE (next max upper  0.6103201611223 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte': best_bin=5 correlation=0.44324605875408 top_2_distance=0.0099 #>   Confident Result: FALSE (next max upper  0.449058962427946 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte-R': best_bin=5 correlation=0.442627960275019 top_2_distance=0.0103 #>   Confident Result: FALSE (next max upper  0.446892145287867 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h': best_bin=5 correlation=0.226154594069033 top_2_distance=3e-04 #>   Confident Result: FALSE (next max upper  0.262886311549413 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h-R': best_bin=5 correlation=0.260969511771651 top_2_distance=0.028 #>   Confident Result: TRUE (next max upper  0.248885771383408 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-24h': best_bin=1 correlation=0.442530731300785 top_2_distance=0.0099 #>   Confident Result: FALSE (next max upper  0.450312176635463 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations  markergenes_heat = blase::plot_mapping_result_heatmap(rev(mapping_results)) + ggplot2::ggtitle(paste0('Marker Genes (', GENES_TO_USE_COUNT,')')) markergenes_heat processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=12, split_by=\"pseudotime_range\")  markers <- scoreMarkers(processed_MCA_PB_SCE, lfc=1, groups=processed_MCA_PB_SCE$pseudotime_bin)  top_n_markers_per_group = 10 genes=DataFrame() for (group in names(markers)) {   group_markers=markers[[group]]   top_genes=group_markers[order(-group_markers$mean.logFC.cohen),][0:top_n_markers_per_group,]   top_genes=top_genes[0:top_n_markers_per_group,]   top_genes   top_genes$group = group   genes = rbind(genes,top_genes) }  genes = DataFrame(genes$mean.logFC.cohen, genes$group) genelist = rownames(genes)  res = find_best_params(processed_MCA_PB_SCE,                        genelist,                        split_by=\"pseudotime_range\",                        pseudotime_slot=\"slingPseudotime_1\",                        bins_count_range = c(12),                        gene_count_range = c(120)) markergenes_by_bin_tuning = plot_find_best_params_results(res) BUCKETS_COUNT = 12 GENES_TO_USE_COUNT = 120 x = as.BlaseData(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\") x@genes = genelist[1:GENES_TO_USE_COUNT]  genes_markergenes_by_bin = x@genes  processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\")  mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(x, bulkname, bulk)   mapping_results = c(mapping_results, res)   print(res) } #> MappingResult for 'Ring': best_bin=3 correlation=0.743497083478443 top_2_distance=0.0317 #>   Confident Result: FALSE (next max upper  0.738294776124255 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ring-R': best_bin=2 correlation=0.845505047261272 top_2_distance=0.012 #>   Confident Result: FALSE (next max upper  0.84407990716716 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite': best_bin=5 correlation=0.866147557210284 top_2_distance=0.0085 #>   Confident Result: FALSE (next max upper  0.87200316744753 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite-R': best_bin=4 correlation=0.849782411636202 top_2_distance=0.0043 #>   Confident Result: FALSE (next max upper  0.856186768265788 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont': best_bin=10 correlation=0.6548940884732 top_2_distance=0.0365 #>   Confident Result: FALSE (next max upper  0.647252954763495 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont-R': best_bin=8 correlation=0.642717475488749 top_2_distance=7e-04 #>   Confident Result: FALSE (next max upper  0.66717799220035 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte': best_bin=4 correlation=0.450503422718795 top_2_distance=0.0054 #>   Confident Result: FALSE (next max upper  0.45681053315227 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte-R': best_bin=4 correlation=0.450538153503121 top_2_distance=0.0036 #>   Confident Result: FALSE (next max upper  0.46247859715416 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h': best_bin=4 correlation=0.312504124280639 top_2_distance=0.0122 #>   Confident Result: FALSE (next max upper  0.329640750458596 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h-R': best_bin=4 correlation=0.339691382250485 top_2_distance=0.0129 #>   Confident Result: FALSE (next max upper  0.359091019607381 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-24h': best_bin=1 correlation=0.430884750902349 top_2_distance=0.0445 #>   Confident Result: FALSE (next max upper  0.401474697345267 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations  markergenes_by_bin_heat = blase::plot_mapping_result_heatmap(rev(mapping_results)) + ggplot2::ggtitle(paste0('Marker Genes by bin (', GENES_TO_USE_COUNT,')')) markergenes_by_bin_heat"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"using-bozdech-fourier-method","dir":"Articles","previous_headings":"","what":"Using Bozdech Fourier Method","title":"Comparing Gene Selection Methods","text":"","code":"processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=12, split_by=\"pseudotime_range\")  counts = normcounts(processed_MCA_PB_SCE)[,order(processed_MCA_PB_SCE$slingPseudotime_1)] waves = as.data.frame(FitWave(as.matrix(counts['PBANKA-0831000',]), 0:20)) waves$gene = rownames(waves)  ggplot2::ggplot(waves, ggplot2::aes(phase, r2, color=amplitude)) +     ggplot2::geom_point() ggplot2::ggplot(waves, ggplot2::aes(phase, amplitude, color=r2)) +     ggplot2::geom_point() ggplot2::ggplot(waves, ggplot2::aes(phase, amplitude, color=k)) +     ggplot2::geom_point() target_to_plot = 'PBANKA-0831000'  toplot = as.data.frame(counts[target_to_plot,order(processed_MCA_PB_SCE$slingPseudotime_1)]) toplot$pdt = processed_MCA_PB_SCE$slingPseudotime_1[order(processed_MCA_PB_SCE$slingPseudotime_1)] colnames(toplot)[1] = 'count'  # I'm pretty sure the x value for buildwave is wrong here toplot$wave1 = BuildWave(seq(from=0, to=max(processed_MCA_PB_SCE$slingPseudotime_1), length.out=nrow(toplot)), wave = FitWave(as.matrix(counts[target_to_plot,]), 1)) toplot$wave1and2 = BuildWave(seq(from=0, to=max(processed_MCA_PB_SCE$slingPseudotime_1), length.out=nrow(toplot)), wave = FitWave(as.matrix(counts[target_to_plot,]), 1)) toplot$wave1to3 = BuildWave(seq(from=0, to=max(processed_MCA_PB_SCE$slingPseudotime_1), length.out=nrow(toplot)), wave = FitWave(as.matrix(counts[target_to_plot,]), 1:3)) toplot$wave1toten = BuildWave(seq(from=0, to=max(processed_MCA_PB_SCE$slingPseudotime_1), length.out=nrow(toplot)), wave = FitWave(as.matrix(counts[target_to_plot,]), 1:10))  ggplot2::ggplot(toplot, ggplot2::aes(pdt, count)) +     ggplot2::geom_line() +     ggplot2::geom_line(ggplot2::aes(pdt, wave1, color='wave1')) +     ggplot2::geom_line(ggplot2::aes(pdt, wave1and2, color='wave1to2')) +     ggplot2::geom_line(ggplot2::aes(pdt, wave1to3, color='wave1to3')) +     ggplot2::geom_line(ggplot2::aes(pdt, wave1toten, color='wave1toten')) +     ggplot2::ggtitle(target_to_plot) ggplot2::ggplot(toplot, ggplot2::aes(pdt, wave1)) +     ggplot2::geom_line() +     ggplot2::ggtitle(target_to_plot) waves = get_waves(processed_MCA_PB_SCE, n_cores = N_CORES)  ggplot2::ggplot(waves, ggplot2::aes(phase, r2, color=amplitude)) +     ggplot2::geom_point() ggplot2::ggplot(waves, ggplot2::aes(phase, amplitude, color=r2)) +     ggplot2::geom_point() ggplot2::ggplot(waves, ggplot2::aes(phase, power, color=r2)) +     ggplot2::geom_point() ggplot2::ggplot(waves, ggplot2::aes(phase, power, color=amplitude)) +     ggplot2::geom_point()"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"phase-ordering-genes","dir":"Articles","previous_headings":"Using Bozdech Fourier Method","what":"Phase Ordering genes","title":"Comparing Gene Selection Methods","text":"’ve plotted genes cells ordered peak phase pseudotime respectively. functionality available part BLASE, please see gene_selection_matrix() function.  set number buckets genes use:","code":"gene_selection_matrix(processed_MCA_PB_SCE, waves, target_matrix_size=1000, n_cores=N_CORES) BUCKETS_COUNT = 12 GENES_TO_USE_COUNT = 120"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"top-r2-waves","dir":"Articles","previous_headings":"Using Bozdech Fourier Method","what":"Top r2 waves","title":"Comparing Gene Selection Methods","text":"","code":"top_r2_waves = select_genes_by_fourier_method(processed_MCA_PB_SCE, waves, n_genes=GENES_TO_USE_COUNT, method=\"r2\", force_spread_selection=FALSE) #> Warning in .local(x, ...): n_groups and top_n_per_group are not used when #> force_spread_selection==FALSE  ggplot2::ggplot(top_r2_waves, ggplot2::aes(phase, amplitude, color=r2)) +     ggplot2::geom_point() +     ggplot2::xlim(c(0, max(processed_MCA_PB_SCE$slingPseudotime_1))) +     ggplot2::ggtitle('top_r2_waves') top_genes_fourier_top_r2 = rownames(top_r2_waves)  x = as.BlaseData(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\") x@genes = top_genes_fourier_top_r2  processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\")  mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(x, bulkname, bulk)   mapping_results = c(mapping_results, res)   print(res) } #> MappingResult for 'Ring': best_bin=3 correlation=0.786846308771442 top_2_distance=0.0331 #>   Confident Result: FALSE (next max upper  0.771442461282033 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ring-R': best_bin=3 correlation=0.879318008195013 top_2_distance=0.0049 #>   Confident Result: FALSE (next max upper  0.892825890686853 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite': best_bin=5 correlation=0.868421418154038 top_2_distance=0.006 #>   Confident Result: FALSE (next max upper  0.867636641433433 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite-R': best_bin=4 correlation=0.876470588235294 top_2_distance=0.0087 #>   Confident Result: TRUE (next max upper  0.872838391554969 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont': best_bin=7 correlation=0.544975345510105 top_2_distance=0.0116 #>   Confident Result: FALSE (next max upper  0.558330439613862 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont-R': best_bin=7 correlation=0.590346551843878 top_2_distance=0.0121 #>   Confident Result: FALSE (next max upper  0.591284116952566 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte': best_bin=3 correlation=0.452920341690395 top_2_distance=0.0058 #>   Confident Result: FALSE (next max upper  0.480155053937113 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte-R': best_bin=3 correlation=0.454056625559101 top_2_distance=0.005 #>   Confident Result: FALSE (next max upper  0.464418670270553 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h': best_bin=1 correlation=0.399773593825835 top_2_distance=0.0285 #>   Confident Result: FALSE (next max upper  0.392686992152233 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h-R': best_bin=1 correlation=0.419330643323144 top_2_distance=0.0226 #>   Confident Result: FALSE (next max upper  0.415855267726925 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-24h': best_bin=1 correlation=0.683343866561841 top_2_distance=0.0117 #>   Confident Result: FALSE (next max upper  0.685186471282728 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations  fourier_top_r2_heat = blase::plot_mapping_result_heatmap(rev(mapping_results)) + ggplot2::ggtitle(paste0('fourier_top_r2 (', GENES_TO_USE_COUNT,')')) fourier_top_r2_heat"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"top-r2-waves-with-spread","dir":"Articles","previous_headings":"Using Bozdech Fourier Method","what":"Top r2 waves with spread","title":"Comparing Gene Selection Methods","text":"","code":"top_r2_waves_spread = select_genes_by_fourier_method(processed_MCA_PB_SCE, waves, n_groups=GENES_TO_USE_COUNT, method=\"r2\", force_spread_selection=TRUE)  ggplot2::ggplot(top_r2_waves_spread, ggplot2::aes(phase, amplitude, color=r2)) +     ggplot2::geom_point() +     ggplot2::xlim(c(0, max(processed_MCA_PB_SCE$slingPseudotime_1))) +     ggplot2::ggtitle('top_r2_waves_spread') top_genes_fourier_top_r2_spread = rownames(top_r2_waves_spread)  x = as.BlaseData(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\") x@genes = top_genes_fourier_top_r2_spread  processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\")  mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(x, bulkname, bulk)   mapping_results = c(mapping_results, res)   print(res) } #> MappingResult for 'Ring': best_bin=3 correlation=0.707410236822001 top_2_distance=0.0447 #>   Confident Result: FALSE (next max upper  0.681107079909328 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ring-R': best_bin=2 correlation=0.866594902423779 top_2_distance=0.0177 #>   Confident Result: FALSE (next max upper  0.868122786304604 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite': best_bin=5 correlation=0.876894228765886 top_2_distance=0.022 #>   Confident Result: TRUE (next max upper  0.86449753455101 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite-R': best_bin=4 correlation=0.872206403222446 top_2_distance=0.0029 #>   Confident Result: FALSE (next max upper  0.874713521772345 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont': best_bin=10 correlation=0.613563441905688 top_2_distance=0.1124 #>   Confident Result: TRUE (next max upper  0.51880686158761 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont-R': best_bin=7 correlation=0.590346551843878 top_2_distance=0.0526 #>   Confident Result: TRUE (next max upper  0.565198972150844 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte': best_bin=5 correlation=0.30244461420932 top_2_distance=0.0088 #>   Confident Result: FALSE (next max upper  0.313056462254323 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte-R': best_bin=5 correlation=0.304111396624766 top_2_distance=0.0101 #>   Confident Result: FALSE (next max upper  0.310070143759983 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h': best_bin=12 correlation=0.361684839224946 top_2_distance=0.0366 #>   Confident Result: FALSE (next max upper  0.376692670828365 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h-R': best_bin=12 correlation=0.35451767483853 top_2_distance=0.0238 #>   Confident Result: FALSE (next max upper  0.395636948326943 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-24h': best_bin=1 correlation=0.552063601750262 top_2_distance=0.0201 #>   Confident Result: FALSE (next max upper  0.574380165289256 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations  fourier_top_r2_spread_heat = blase::plot_mapping_result_heatmap(rev(mapping_results)) + ggplot2::ggtitle(paste0('fourier_top_r2_spread (', GENES_TO_USE_COUNT,')')) fourier_top_r2_spread_heat"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"top-amp-waves","dir":"Articles","previous_headings":"Using Bozdech Fourier Method","what":"Top amp waves","title":"Comparing Gene Selection Methods","text":"### Top Amp Waves spread  ### Top Power calculate using amplitude peak divided sum total expression  ### Top Power Spread","code":"top_amp_waves = waves[order(-waves$amplitude),][0:GENES_TO_USE_COUNT,] top_amp_waves = select_genes_by_fourier_method(processed_MCA_PB_SCE, waves, n_genes=GENES_TO_USE_COUNT, method=\"amplitude\", force_spread_selection=FALSE) #> Warning in .local(x, ...): n_groups and top_n_per_group are not used when #> force_spread_selection==FALSE  ggplot2::ggplot(top_amp_waves, ggplot2::aes(phase, amplitude, color=r2)) +     ggplot2::geom_point() +     ggplot2::xlim(c(0, max(processed_MCA_PB_SCE$slingPseudotime_1))) +     ggplot2::ggtitle('top_amp_waves') top_genes_fourier_top_amp = rownames(top_amp_waves)  x = as.BlaseData(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\") x@genes = top_genes_fourier_top_amp  processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\")  mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(x, bulkname, bulk)   mapping_results = c(mapping_results, res)   print(res) } #> MappingResult for 'Ring': best_bin=3 correlation=0.629110165907831 top_2_distance=0.0303 #>   Confident Result: FALSE (next max upper  0.633742512026633 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ring-R': best_bin=3 correlation=0.756041323145471 top_2_distance=0.0234 #>   Confident Result: FALSE (next max upper  0.769645525927567 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite': best_bin=5 correlation=0.813931523022432 top_2_distance=0.0163 #>   Confident Result: FALSE (next max upper  0.812549482602958 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite-R': best_bin=5 correlation=0.815216334467671 top_2_distance=0.008 #>   Confident Result: FALSE (next max upper  0.82173904739871 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont': best_bin=9 correlation=0.560007577982459 top_2_distance=0.0347 #>   Confident Result: FALSE (next max upper  0.533571775817765 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont-R': best_bin=9 correlation=0.667452389569491 top_2_distance=0.0633 #>   Confident Result: FALSE (next max upper  0.626576729108348 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte': best_bin=1 correlation=0.289147087631722 top_2_distance=0.0402 #>   Confident Result: FALSE (next max upper  0.280607499386539 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte-R': best_bin=1 correlation=0.287598358214854 top_2_distance=0.036 #>   Confident Result: FALSE (next max upper  0.285603658935521 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h': best_bin=12 correlation=0.183248836724773 top_2_distance=0.0175 #>   Confident Result: FALSE (next max upper  0.203238100206459 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h-R': best_bin=1 correlation=0.185014133028512 top_2_distance=0.0332 #>   Confident Result: FALSE (next max upper  0.171004930897979 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-24h': best_bin=1 correlation=0.408517317304923 top_2_distance=0.0972 #>   Confident Result: TRUE (next max upper  0.342116686420677 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations  fourier_top_amp_heat = blase::plot_mapping_result_heatmap(rev(mapping_results)) + ggplot2::ggtitle(paste0('fourier_top_amp (', GENES_TO_USE_COUNT,')')) fourier_top_amp_heat top_amp_waves_spread = select_genes_by_fourier_method(processed_MCA_PB_SCE, waves, n_groups=GENES_TO_USE_COUNT, method=\"amplitude\", force_spread_selection=TRUE)  ggplot2::ggplot(top_amp_waves_spread, ggplot2::aes(phase, amplitude, color=r2)) +     ggplot2::geom_point() +     ggplot2::xlim(c(0, max(processed_MCA_PB_SCE$slingPseudotime_1))) +     ggplot2::ggtitle('top_amp_waves_spread') top_genes_fourier_top_amp_spread = rownames(top_amp_waves_spread)  x = as.BlaseData(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\") x@genes = top_genes_fourier_top_amp_spread  processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\")  mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(x, bulkname, bulk)   mapping_results = c(mapping_results, res)   print(res) } #> MappingResult for 'Ring': best_bin=3 correlation=0.701069518716577 top_2_distance=0.0488 #>   Confident Result: FALSE (next max upper  0.676125689724507 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ring-R': best_bin=2 correlation=0.840155566358775 top_2_distance=9e-04 #>   Confident Result: FALSE (next max upper  0.868970067365789 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite': best_bin=5 correlation=0.879804153066185 top_2_distance=0.0255 #>   Confident Result: TRUE (next max upper  0.860469477047017 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite-R': best_bin=5 correlation=0.876935898326273 top_2_distance=0.0083 #>   Confident Result: FALSE (next max upper  0.874970484061393 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont': best_bin=10 correlation=0.659316619209667 top_2_distance=0.0841 #>   Confident Result: TRUE (next max upper  0.598145704562817 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont-R': best_bin=7 correlation=0.68275574692687 top_2_distance=0.0363 #>   Confident Result: FALSE (next max upper  0.667601916799778 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte': best_bin=5 correlation=0.47759566636572 top_2_distance=0.0398 #>   Confident Result: TRUE (next max upper  0.450941037572054 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte-R': best_bin=5 correlation=0.481102854364886 top_2_distance=0.0384 #>   Confident Result: TRUE (next max upper  0.455906660184735 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h': best_bin=5 correlation=0.336669213139801 top_2_distance=0.0288 #>   Confident Result: TRUE (next max upper  0.317973470379887 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h-R': best_bin=5 correlation=0.380297242864088 top_2_distance=0.0365 #>   Confident Result: TRUE (next max upper  0.360066671296618 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-24h': best_bin=3 correlation=0.454170428501979 top_2_distance=0.0265 #>   Confident Result: FALSE (next max upper  0.476933761683139 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations  fourier_top_amp_spread_heat = blase::plot_mapping_result_heatmap(rev(mapping_results)) + ggplot2::ggtitle(paste0('fourier_top_amp_spread (', GENES_TO_USE_COUNT,')')) fourier_top_amp_spread_heat top_power_waves = select_genes_by_fourier_method(processed_MCA_PB_SCE, waves, n_genes=GENES_TO_USE_COUNT, method=\"power\", force_spread_selection=FALSE) #> Warning in .local(x, ...): n_groups and top_n_per_group are not used when #> force_spread_selection==FALSE  ggplot2::ggplot(top_power_waves, ggplot2::aes(phase, amplitude, color=r2)) +     ggplot2::geom_point() +     ggplot2::xlim(c(0, max(processed_MCA_PB_SCE$slingPseudotime_1))) +     ggplot2::ggtitle('top_power_waves') top_genes_fourier_top_power = rownames(top_power_waves)  x = as.BlaseData(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\") x@genes = top_genes_fourier_top_power  processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\")  mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(x, bulkname, bulk)   mapping_results = c(mapping_results, res)   print(res) } #> MappingResult for 'Ring': best_bin=1 correlation=0.506273621531253 top_2_distance=0.0857 #>   Confident Result: FALSE (next max upper  0.474381599096062 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ring-R': best_bin=1 correlation=0.615892576481481 top_2_distance=0.0522 #>   Confident Result: FALSE (next max upper  0.599953518630256 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite': best_bin=5 correlation=0.729383984998958 top_2_distance=0.0136 #>   Confident Result: FALSE (next max upper  0.74057483358608 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite-R': best_bin=5 correlation=0.715834432946732 top_2_distance=0.0077 #>   Confident Result: FALSE (next max upper  0.732495412053748 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont': best_bin=10 correlation=0.54874644072505 top_2_distance=0.0279 #>   Confident Result: FALSE (next max upper  0.563911976380511 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont-R': best_bin=9 correlation=0.619500945166307 top_2_distance=0.0899 #>   Confident Result: FALSE (next max upper  0.550121536217793 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte': best_bin=3 correlation=0.156034206130908 top_2_distance=0.0026 #>   Confident Result: FALSE (next max upper  0.225059250466473 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte-R': best_bin=3 correlation=0.176064592068839 top_2_distance=0.025 #>   Confident Result: FALSE (next max upper  0.232617502163414 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h': best_bin=12 correlation=0.312452253628724 top_2_distance=0.2182 #>   Confident Result: TRUE (next max upper  0.205315733755594 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h-R': best_bin=12 correlation=0.292180012500868 top_2_distance=0.1949 #>   Confident Result: TRUE (next max upper  0.191026639120096 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-24h': best_bin=1 correlation=0.407460896766622 top_2_distance=0.0022 #>   Confident Result: FALSE (next max upper  0.446412945343427 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations  fourier_top_power_heat = blase::plot_mapping_result_heatmap(rev(mapping_results)) + ggplot2::ggtitle(paste0('fourier_top_power (', GENES_TO_USE_COUNT,')')) fourier_top_power_heat top_power_waves_spread = select_genes_by_fourier_method(processed_MCA_PB_SCE, waves, n_groups=GENES_TO_USE_COUNT, method=\"power\", force_spread_selection=TRUE)  ggplot2::ggplot(top_power_waves_spread, ggplot2::aes(phase, amplitude, color=r2)) +     ggplot2::geom_point() +     ggplot2::xlim(c(0, max(processed_MCA_PB_SCE$slingPseudotime_1))) +     ggplot2::ggtitle('top_power_waves_spread') top_genes_fourier_top_power_spread = rownames(top_power_waves_spread)  x = as.BlaseData(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\") x@genes = top_genes_fourier_top_power_spread  processed_MCA_PB_SCE = assign_pseudotime_bins(processed_MCA_PB_SCE, pseudotime_slot=\"slingPseudotime_1\", n_bins=BUCKETS_COUNT, split_by=\"pseudotime_range\")  mapping_results = c() for (bulkname in colnames(bulk)) {   res = map_best_bin(x, bulkname, bulk)   mapping_results = c(mapping_results, res)   print(res) } #> MappingResult for 'Ring': best_bin=3 correlation=0.653364817001181 top_2_distance=0.0482 #>   Confident Result: FALSE (next max upper  0.64073199527745 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ring-R': best_bin=2 correlation=0.803416903951663 top_2_distance=0.0041 #>   Confident Result: FALSE (next max upper  0.818154038474894 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite': best_bin=5 correlation=0.861198694353774 top_2_distance=0.0198 #>   Confident Result: TRUE (next max upper  0.846225432321689 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Trophozoite-R': best_bin=4 correlation=0.869567331064657 top_2_distance=0.003 #>   Confident Result: FALSE (next max upper  0.872907840822279 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont': best_bin=10 correlation=0.584172511979999 top_2_distance=0.0082 #>   Confident Result: FALSE (next max upper  0.586424328374404 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Schizont-R': best_bin=9 correlation=0.642157970989079 top_2_distance=0.0153 #>   Confident Result: FALSE (next max upper  0.65071185498993 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte': best_bin=5 correlation=0.356503923883603 top_2_distance=0.0302 #>   Confident Result: TRUE (next max upper  0.337606778248489 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Gametocyte-R': best_bin=5 correlation=0.354267657476214 top_2_distance=0.0316 #>   Confident Result: TRUE (next max upper  0.334099590249323 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h': best_bin=4 correlation=0.27508854781582 top_2_distance=0.015 #>   Confident Result: FALSE (next max upper  0.279810725861116 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-16h-R': best_bin=4 correlation=0.304465587888048 top_2_distance=0.0311 #>   Confident Result: FALSE (next max upper  0.292568928397805 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations #> MappingResult for 'Ookinete-24h': best_bin=1 correlation=0.504344081851748 top_2_distance=0.0242 #>   Confident Result: FALSE (next max upper  0.512241322733814 ) #>   with history for scores against 12  bins #>   Bootstrapped with 200 iterations  fourier_top_power_spread_heat = blase::plot_mapping_result_heatmap(rev(mapping_results)) + ggplot2::ggtitle(paste0('fourier_top_power_spread (', GENES_TO_USE_COUNT,')')) fourier_top_power_spread_heat"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"analysing-all-gene-lists","dir":"Articles","previous_headings":"","what":"Analysing All Gene Lists","title":"Comparing Gene Selection Methods","text":"Now can analyse genelists together compare statistics.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"util","dir":"Articles","previous_headings":"Analysing All Gene Lists > Earth Movers Distance for Gene Scoring (Coverage Scoring)","what":"Util","title":"Comparing Gene Selection Methods","text":"","code":"# Snippet from: https://cansnippet.bioinfo-fr.net/details.php?id=3 redim_matrix <- function(     mat,     target_height = 100,     target_width = 100,     summary_func = function(x) mean(x, na.rm = TRUE),     n_core = 1 ) {    if(target_height > nrow(mat) | target_width > ncol(mat)) {     stop(\"Input matrix must be bigger than target width and height.\")   }    seq_height <- round(seq(1, nrow(mat), length.out = target_height + 1))   seq_width  <- round(seq(1, ncol(mat), length.out = target_width  + 1))    # complicate way to write a double for loop   do.call(rbind, parallel::mclapply(seq_len(target_height), function(i) { # i is row     vapply(seq_len(target_width), function(j) { # j is column       summary_func(         mat[           seq(seq_height[i], seq_height[i + 1]),           seq(seq_width[j] , seq_width[j + 1] )         ]       )     }, 0.0)   }, mc.cores = n_core)) }"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"goal-state","dir":"Articles","previous_headings":"Analysing All Gene Lists > Earth Movers Distance for Gene Scoring (Coverage Scoring)","what":"Goal State","title":"Comparing Gene Selection Methods","text":"can use phase calculated gene now score well selected genes cover lifecycle. perfect set genes look roughly like diagonal line one corner : #### Earth Movers Distance can also generate quantified heuristic well genes selected. Earth Mover’s Distance (EMD) give value much matrix’s mass needs moved far order obtain “ideal” state. lower EMD means gene expression matchs expected expression “ideal” case. , assume perfect case straight diagonal line - .e. gene expressed serially, overlap stages. isn’t realistic, can help us make decision gene list informative. perform gene lists, EMD slow function, however, show code can used calculate gene lists .","code":"sim_mat = matrix(0, ncol=1000,nrow=1000) for (i in seq_len(nrow(sim_mat))) {   sim_mat[i, i] = 10 # Squish gene expression onto the place we think it should be }  reduced_sim_mat = redim_matrix(sim_mat, target_height = 100, target_width = 100, n_core=N_CORES)  df <- reshape2::melt(reduced_sim_mat, c(\"x\", \"y\"), value.name = \"expression\")  ggplot2::ggplot(data=df,ggplot2::aes(x=x,y=y,fill=expression)) +     ggplot2::geom_tile() +      ggplot2::theme(axis.text.x = ggplot2::element_blank(), axis.text.y = ggplot2::element_blank()) +     ggplot2::scale_fill_gradient(low = \"white\",                         high = \"red\",                         guide = \"colorbar\") +      ggplot2::ggtitle(\"Goal State\") get_earthmovers_distance_from_diagonal = function (expression_matrix, title) {   # wasserstein - define perfect matrix, then wasserstein versus real matrix   # Both need to have same *mass* - i.e. expression.      # 1x1 continuous \"perfect\" version   x = runif(10000)   x = x*nrow(expression_matrix)   x = ceiling(x)   y = x      sim_mat = matrix(0, ncol=nrow(expression_matrix),nrow=nrow(expression_matrix))        for (i in seq_len(length(x))) {     sim_mat[y[i], x[i]] = sim_mat[y[i], x[i]] + 1 # Squish gene expression onto the place we think it should be   }    # Normalise sim_mat expression to match mass of original matrix   sim_mat <- sim_mat/rowSums(sim_mat)   sim_mat <- sim_mat/sum(sim_mat) * sum(expression_matrix)      # redimension the matrices to speed up EMD approximation   reduced_mat = redim_matrix(expression_matrix, target_height = 40, target_width = 40, n_core=N_CORES)   reduced_sim_mat = redim_matrix(sim_mat, target_height = 40, target_width = 40, n_core=N_CORES)      dist = emd2d(reduced_mat, reduced_sim_mat, max.iter=750)      return(dist) }  heatmap_counts=normcounts(processed_MCA_PB_SCE)[order(waves$phase),order(processed_MCA_PB_SCE$slingPseudotime_1)]  top_genes_tradeseq_mat = heatmap_counts[rownames(heatmap_counts) %in% genes_tradeseq,] print(paste(\"Tradeseq:\", get_earthmovers_distance_from_diagonal(top_genes_tradeseq_mat, \"TradeSeq\"))) #> Warning in emdr(A, B, dist = dist, ...): emd: Maximum number of iterations has #> been reached (750) #> [1] \"Tradeseq: 10.1123142242432\"  top_genes_marker_genes_mat = heatmap_counts[rownames(heatmap_counts) %in% genes_markergenes,] print(paste(\"Markers:\", get_earthmovers_distance_from_diagonal(top_genes_marker_genes_mat, \"Markers\"))) #> Warning in emdr(A, B, dist = dist, ...): emd: Maximum number of iterations has #> been reached (750) #> [1] \"Markers: 8.26531600952148\"  top_genes_bin_markers_mat = heatmap_counts[rownames(heatmap_counts) %in% genes_markergenes_by_bin,] print(paste(\"Bin Markers:\", get_earthmovers_distance_from_diagonal(top_genes_bin_markers_mat, \"Bin Markers\"))) #> Warning in emdr(A, B, dist = dist, ...): emd: Maximum number of iterations has #> been reached (750) #> [1] \"Bin Markers: 8.5571460723877\"  #top_genes_fourier_top_r2_mat = heatmap_counts[rownames(heatmap_counts) %in% top_genes_fourier_top_r2,] #print(paste(\"R2:\", get_earthmovers_distance_from_diagonal(top_genes_fourier_top_r2_mat, \"Top r2\")))  #top_genes_fourier_top_r2_spread_mat = heatmap_counts[rownames(heatmap_counts) %in% top_genes_fourier_top_r2_spread,] #print(paste(\"R2 Spread:\", get_earthmovers_distance_from_diagonal(top_genes_fourier_top_r2_spread_mat, \"Top r2 Spread\")))  #top_genes_fourier_top_amp_mat = heatmap_counts[rownames(heatmap_counts) %in% top_genes_fourier_top_amp,] #print(paste(\"Amp:\", get_earthmovers_distance_from_diagonal(top_genes_fourier_top_amp_mat, \"Top Amp\")))  #top_genes_fourier_top_amp_spread_mat = heatmap_counts[rownames(heatmap_counts) %in% top_genes_fourier_top_amp_spread,] #print(paste(\"Amp Spread:\", get_earthmovers_distance_from_diagonal(top_genes_fourier_top_amp_spread_mat, \"Top Amp Spread\")))  top_genes_fourier_top_power_mat = heatmap_counts[rownames(heatmap_counts) %in% top_genes_fourier_top_power,] print(paste(\"Power:\", get_earthmovers_distance_from_diagonal(top_genes_fourier_top_power_mat, \"Top Power\"))) #> Warning in emdr(A, B, dist = dist, ...): emd: Maximum number of iterations has #> been reached (750) #> [1] \"Power: 12.5534162521362\"  top_genes_fourier_top_power_spread_mat = heatmap_counts[rownames(heatmap_counts) %in% top_genes_fourier_top_power_spread,] print(paste(\"Power Spread:\", get_earthmovers_distance_from_diagonal(top_genes_fourier_top_power_spread_mat, \"Top Power Spread\"))) #> Warning in emdr(A, B, dist = dist, ...): emd: Maximum number of iterations has #> been reached (750) #> [1] \"Power Spread: 9.23540496826172\""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"fourier-phase-aligned-plotting-log-expression","dir":"Articles","previous_headings":"Analysing All Gene Lists","what":"Fourier Phase Aligned Plotting (Log Expression)","title":"Comparing Gene Selection Methods","text":"","code":"top_tradeseq_phases_plot = gene_selection_matrix(processed_MCA_PB_SCE, waves, genes=genes_tradeseq, target_matrix_size=length(genes_tradeseq), n_cores=N_CORES) + ggplot2::ggtitle(\"TradeSeq\")  top_marker_phases_plot = gene_selection_matrix(processed_MCA_PB_SCE, waves, genes=genes_markergenes, target_matrix_size=length(genes_markergenes), n_cores=N_CORES) + ggplot2::ggtitle(\"Top Cluster Markers\")  length(genes_markergenes_by_bin) #> [1] 120 genes_markergenes_by_bin #>   [1] \"PBANKA-1145400\" \"PBANKA-1101200\" \"PBANKA-1101100\" \"PBANKA-0316200\" #>   [5] \"PBANKA-0524100\" \"PBANKA-0300600\" \"PBANKA-0205000\" \"PBANKA-1345800\" #>   [9] \"PBANKA-1334300\" \"PBANKA-1321400\" \"PBANKA-0205000\" \"PBANKA-1145900\" #>  [13] \"PBANKA-1229000\" \"PBANKA-0316200\" \"PBANKA-1106700\" \"PBANKA-1019500\" #>  [17] \"PBANKA-0623300\" \"PBANKA-1210200\" \"PBANKA-1101100\" \"PBANKA-0300600\" #>  [21] \"PBANKA-0805700\" \"PBANKA-1229000\" \"PBANKA-0711900\" \"PBANKA-1365500\" #>  [25] \"PBANKA-1145900\" \"PBANKA-1210200\" \"PBANKA-1340100\" \"PBANKA-1019500\" #>  [29] \"PBANKA-1351900\" \"PBANKA-1106700\" \"PBANKA-0805700\" \"PBANKA-1214300\" #>  [33] \"PBANKA-1235600\" \"PBANKA-0107300\" \"PBANKA-1340100\" \"PBANKA-0814200\" #>  [37] \"PBANKA-0823400\" \"PBANKA-1242300\" \"PBANKA-1317400\" \"PBANKA-1460400\" #>  [41] \"PBANKA-1214300\" \"PBANKA-0604300\" \"PBANKA-0814200\" \"PBANKA-0107300\" #>  [45] \"PBANKA-1235600\" \"PBANKA-0805700\" \"PBANKA-0406500\" \"PBANKA-1340100\" #>  [49] \"PBANKA-1446800\" \"PBANKA-0106500\" \"PBANKA-0604300\" \"PBANKA-0818900\" #>  [53] \"PBANKA-1437300\" \"PBANKA-1400600\" \"PBANKA-0938400\" \"PBANKA-0702800\" #>  [57] \"PBANKA-1232200\" \"PBANKA-0313800\" \"PBANKA-0409800\" \"PBANKA-0814200\" #>  [61] \"PBANKA-1443300\" \"PBANKA-1400600\" \"PBANKA-0915200\" \"PBANKA-1349000\" #>  [65] \"PBANKA-0702800\" \"PBANKA-1113300\" \"PBANKA-1438000\" \"PBANKA-0818900\" #>  [69] \"PBANKA-1214200\" \"PBANKA-1010600\" \"PBANKA-1443300\" \"PBANKA-0305000\" #>  [73] \"PBANKA-1349000\" \"PBANKA-0305100\" \"PBANKA-0519400\" \"PBANKA-0519100\" #>  [77] \"PBANKA-0831000\" \"PBANKA-1400600\" \"PBANKA-0304800\" \"PBANKA-1237100\" #>  [81] \"PBANKA-1210600\" \"PBANKA-1032100\" \"PBANKA-0305000\" \"PBANKA-0523700\" #>  [85] \"PBANKA-0713100\" \"PBANKA-1406400\" \"PBANKA-1419000\" \"PBANKA-0930600\" #>  [89] \"PBANKA-1443300\" \"PBANKA-0910700\" \"PBANKA-0804500\" \"PBANKA-0523700\" #>  [93] \"PBANKA-0713100\" \"PBANKA-1210600\" \"PBANKA-0619700\" \"PBANKA-1014500\" #>  [97] \"PBANKA-1032100\" \"PBANKA-1003600\" \"PBANKA-1002400\" \"PBANKA-0519400\" #> [101] \"PBANKA-0523700\" \"PBANKA-1002400\" \"PBANKA-1008600\" \"PBANKA-0929400\" #> [105] \"PBANKA-0713200\" \"PBANKA-1032100\" \"PBANKA-1349100\" \"PBANKA-1212200\" #> [109] \"PBANKA-0804500\" \"PBANKA-0831000\" \"PBANKA-1240600\" \"PBANKA-0707700\" #> [113] \"PBANKA-0208900\" \"PBANKA-0510800\" \"PBANKA-1342500\" \"PBANKA-0313400\" #> [117] \"PBANKA-0915000\" \"PBANKA-1319000\" \"PBANKA-0911700\" \"PBANKA-0304500\"  top_bin_marker_phases_plot = gene_selection_matrix(processed_MCA_PB_SCE, waves, genes=genes_markergenes_by_bin, target_matrix_size=length(unique(genes_markergenes_by_bin)), n_cores=N_CORES) + ggplot2::ggtitle(\"Top Bin Markers\")  fourier_top_r2_phases = gene_selection_matrix(processed_MCA_PB_SCE, waves, genes=top_genes_fourier_top_r2, target_matrix_size=length(top_genes_fourier_top_r2), n_cores=N_CORES) + ggplot2::ggtitle(\"Top Fourier R2\")  fourier_top_r2_spread_phases = gene_selection_matrix(processed_MCA_PB_SCE, waves, genes=top_genes_fourier_top_r2_spread, target_matrix_size=length(top_genes_fourier_top_r2_spread), n_cores=N_CORES) + ggplot2::ggtitle(\"Top Fourier R2\")  fourier_top_amp_phases = gene_selection_matrix(processed_MCA_PB_SCE, waves, genes=top_genes_fourier_top_amp, target_matrix_size=length(top_genes_fourier_top_amp), n_cores=N_CORES) + ggplot2::ggtitle(\"Top Fourier Amplitude\")  fourier_top_amp_spread_phases = gene_selection_matrix(processed_MCA_PB_SCE, waves, genes=top_genes_fourier_top_amp_spread, target_matrix_size=length(top_genes_fourier_top_amp_spread), n_cores=N_CORES) + ggplot2::ggtitle(\"Top Fourier Amplitude Spread\")  fourier_top_power_phases = gene_selection_matrix(processed_MCA_PB_SCE, waves, genes=top_genes_fourier_top_power, target_matrix_size=length(top_genes_fourier_top_power), n_cores=N_CORES) + ggplot2::ggtitle(\"Top Fourier Power\")  fourier_top_power_spread_phases = gene_selection_matrix(processed_MCA_PB_SCE, waves, genes=top_genes_fourier_top_power_spread, target_matrix_size=length(top_genes_fourier_top_power_spread), n_cores=N_CORES) + ggplot2::ggtitle(\"Top Fourier Power Spread\")  gridExtra::grid.arrange(   top_tradeseq_phases_plot,   top_marker_phases_plot,   top_bin_marker_phases_plot,   ncol=2 ) gridExtra::grid.arrange(   fourier_top_r2_phases,   fourier_top_amp_phases,   fourier_top_power_phases,   ncol=2 ) gridExtra::grid.arrange(   fourier_top_r2_spread_phases,   fourier_top_amp_spread_phases,   fourier_top_power_spread_phases,   ncol=2 )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/gene_selection_comparison.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Comparing Gene Selection Methods","text":", show summary different results methods give.            ## Session Info","code":"gridExtra::grid.arrange(   tradeseq_heat,   tradeseq_tuning,   ncol=1 ) gridExtra::grid.arrange(   markergenes_heat,   markergenes_tuning,   ncol=1 ) gridExtra::grid.arrange(   markergenes_by_bin_heat,   markergenes_by_bin_tuning,   ncol=1 ) fourier_top_r2_heat fourier_top_amp_heat fourier_top_power_heat fourier_top_r2_spread_heat fourier_top_amp_spread_heat fourier_top_power_spread_heat #upsetInput = list(tradeseq=genes_tradeseq, markergenes=genes_markergenes, markergenes_by_bins=genes_markergenes_by_bin, top_genes_fourier_top_r2=top_genes_fourier_top_r2) upsetInput = list(   tradeseq=genes_tradeseq,   markergenes=genes_markergenes,   markergenes_by_bins=genes_markergenes_by_bin,   top_genes_fourier_top_r2=top_genes_fourier_top_r2,   top_genes_fourier_top_amp=top_genes_fourier_top_amp,   top_genes_fourier_top_power=top_genes_fourier_top_power,   top_genes_fourier_top_r2_spread=top_genes_fourier_top_r2_spread,   top_genes_fourier_top_amp_spread=top_genes_fourier_top_amp_spread,   top_genes_fourier_top_power_spread=top_genes_fourier_top_power_spread   )  upsetPlot = upset(fromList(upsetInput), nsets=length(upsetInput), ) upsetPlot library(ggplotify) gridExtra::grid.arrange(   tradeseq_heat,   markergenes_heat,   markergenes_by_bin_heat,   as.grob(upsetPlot),   ncol=2 ) gridExtra::grid.arrange(   plotUMAP(processed_MCA_PB_SCE, colour_by=\"STAGE_LR\"),   plotUMAP(processed_MCA_PB_SCE, colour_by=\"pseudotime_bin\"),   ncol=2 ) sessionInfo() #> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> Random number generation: #>  RNG:     Mersenne-Twister  #>  Normal:  Inversion  #>  Sample:  Rounding  #>   #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplotify_0.1.2             blase_0.0.0.9000            #>  [3] metR_0.15.0                 fs_1.6.3                    #>  [5] scater_1.30.1               ggplot2_3.5.0               #>  [7] emdist_0.3-3                UpSetR_1.4.0                #>  [9] BiocParallel_1.36.0         tradeSeq_1.16.0             #> [11] slingshot_2.10.0            TrajectoryUtils_1.10.1      #> [13] princurve_2.1.6             scran_1.30.2                #> [15] scuttle_1.12.0              SingleCellExperiment_1.24.0 #> [17] SummarizedExperiment_1.32.0 Biobase_2.62.0              #> [19] GenomicRanges_1.54.1        GenomeInfoDb_1.38.6         #> [21] IRanges_2.36.0              S4Vectors_0.40.2            #> [23] BiocGenerics_0.48.1         MatrixGenerics_1.14.0       #> [25] matrixStats_1.2.0           readxl_1.4.3                #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3        jsonlite_1.8.8            #>   [3] magrittr_2.0.3            ggbeeswarm_0.7.2          #>   [5] farver_2.1.1              rmarkdown_2.25            #>   [7] zlibbioc_1.48.0           ragg_1.2.7                #>   [9] vctrs_0.6.5               memoise_2.0.1             #>  [11] DelayedMatrixStats_1.24.0 RCurl_1.98-1.14           #>  [13] htmltools_0.5.7           S4Arrays_1.2.0            #>  [15] BiocNeighbors_1.20.2      cellranger_1.1.0          #>  [17] SparseArray_1.2.4         gridGraphics_0.5-1        #>  [19] ami_0.1.0                 sass_0.4.8                #>  [21] bslib_0.6.1               desc_1.4.3                #>  [23] plyr_1.8.9                cachem_1.0.8              #>  [25] igraph_2.0.2              lifecycle_1.0.4           #>  [27] pkgconfig_2.0.3           rsvd_1.0.5                #>  [29] Matrix_1.6-5              R6_2.5.1                  #>  [31] fastmap_1.1.1             GenomeInfoDbData_1.2.11   #>  [33] digest_0.6.34             colorspace_2.1-0          #>  [35] dqrng_0.3.2               irlba_2.3.5.1             #>  [37] textshaping_0.3.7         beachmat_2.18.1           #>  [39] labeling_0.4.3            fansi_1.0.6               #>  [41] abind_1.4-5               mgcv_1.9-1                #>  [43] compiler_4.3.3            withr_3.0.0               #>  [45] backports_1.4.1           viridis_0.6.5             #>  [47] highr_0.10                DelayedArray_0.28.0       #>  [49] bluster_1.12.0            tools_4.3.3               #>  [51] vipor_0.4.7               beeswarm_0.4.0            #>  [53] glue_1.7.0                nlme_3.1-164              #>  [55] grid_4.3.3                checkmate_2.3.1           #>  [57] cluster_2.1.6             reshape2_1.4.4            #>  [59] generics_0.1.3            gtable_0.3.4              #>  [61] data.table_1.15.2         BiocSingular_1.18.0       #>  [63] ScaledMatrix_1.10.0       metapod_1.10.1            #>  [65] utf8_1.2.4                XVector_0.42.0            #>  [67] ggrepel_0.9.5             pillar_1.9.0              #>  [69] stringr_1.5.1             yulab.utils_0.1.4         #>  [71] limma_3.58.1              splines_4.3.3             #>  [73] dplyr_1.1.4               lattice_0.22-5            #>  [75] tidyselect_1.2.0          locfit_1.5-9.8            #>  [77] pbapply_1.7-2             knitr_1.45                #>  [79] gridExtra_2.3             edgeR_4.0.16              #>  [81] xfun_0.42                 statmod_1.5.0             #>  [83] stringi_1.8.3             rematch_2.0.0             #>  [85] yaml_2.3.8                evaluate_0.23             #>  [87] codetools_0.2-19          tibble_3.2.1              #>  [89] cli_3.6.2                 systemfonts_1.0.5         #>  [91] munsell_0.5.0             jquerylib_0.1.4           #>  [93] Rcpp_1.0.12               parallel_4.3.3            #>  [95] pkgdown_2.0.7             sparseMatrixStats_1.14.0  #>  [97] bitops_1.0-7              viridisLite_0.4.2         #>  [99] scales_1.3.0              purrr_1.0.2               #> [101] crayon_1.5.2              rlang_1.1.3               #> [103] cowplot_1.1.3"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pb-object.html","id":"generating-malaria-cell-atlas-pb-test-dataset","dir":"Articles","previous_headings":"","what":"Generating Malaria Cell Atlas PB Test Dataset","title":"Generating Malaria Cell Atlas PB Test Dataset","text":"article, run website, shows prepare Malaria Cell Atlas Plasmodium Berghei (Howick et al. 2019 10x single cell data. can used generate scratch, provide processed object BLASE. First configure R: First download data Malaria Cell Atlas","code":"library(readxl) library(scran) library(slingshot) library(tradeSeq) library(BiocParallel) library(fs) library(gridExtra) library(scater) library(utils) library(blase) library(utils) library(ami) RNGversion(\"3.5.0\") SEED = 7 set.seed(SEED) N_CORES = 4 if (ami::using_ci()) {   N_CORES = 2 } root_dir = tools::R_user_dir(\"BLASE\", \"data\") article_dir = path(root_dir, \"Generate_MCA_PB_Object\")  if (!dir.exists(article_dir)) {   dir.create(article_dir, recursive = TRUE) }  mca_path = path(article_dir, 'MCA-pb', ext=\"zip\") if (!file.exists(mca_path)) {   download.file('https://www.malariacellatlas.org/downloads/pb-ch10x-set1.zip', mca_path)   unzip(mca_path, exdir = path(article_dir, 'MCA-pb')) }else {   print(\"Using cached\") }"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pb-object.html","id":"prepare-sc","dir":"Articles","previous_headings":"Generating Malaria Cell Atlas PB Test Dataset","what":"Prepare SC","title":"Generating Malaria Cell Atlas PB Test Dataset","text":"Now read files create SCE. Now can create SingleCellExperiment object: Now start annotating preprocessing data.","code":"mca_counts_path = path(article_dir, 'MCA-pb','pb-ch10x-set1-ch10x-exp', ext=\"csv\") sc_readcounts = read.csv(mca_counts_path, row.names=1)  mca_annotation_path = path(article_dir, 'MCA-pb','pb-ch10x-set1-ch10x-data', ext=\"csv\") sc_annotations = read.csv(mca_annotation_path, row.names=1)  rownames(sc_annotations) = gsub(x = rownames(sc_annotations), pattern=\"-\", replacement=\".\", fixed=TRUE) rownames(sc_readcounts) = gsub(x=rownames(sc_readcounts), pattern=\"_\", replacement=\"-\", fixed=TRUE) sce = SingleCellExperiment(assays=list(counts=as.matrix(sc_readcounts)), colData=sc_annotations) rm(sc_annotations, sc_readcounts) gc()  sce@colData$STAGE_LR = factor(sce@colData$STAGE_LR) sce@colData$STAGE_HR = factor(sce@colData$STAGE_HR) sce@colData$STRAIN = factor(sce@colData$STRAIN) sce@colData$DAY = factor(sce@colData$DAY) sce@colData$HOST = factor(sce@colData$HOST) sce <- computeSumFactors(sce) sce <- logNormCounts(sce) normcounts(sce) <- exp(logcounts(sce)) reducedDim(sce, \"PCA\") = as.matrix(cbind(sce@colData[\"PC_1\"], sce@colData[\"PC_2\"])) sce = runUMAP(sce)  gridExtra::grid.arrange(   plotPCA(sce, colour_by=\"STAGE_LR\"),   plotUMAP(sce, colour_by=\"STAGE_LR\"),   ncol=2 )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pb-object.html","id":"running-trajectory-analysis","dir":"Articles","previous_headings":"Generating Malaria Cell Atlas PB Test Dataset","what":"Running Trajectory Analysis","title":"Generating Malaria Cell Atlas PB Test Dataset","text":"Generate pseudotime trajectory Evaluate number knots required tradeseq differential gene expression pseudotime. Find differentially expressed genes pseudotime: differentially expressed genes can found using association test like places:","code":"sce <- slingshot(sce, reducedDim = 'UMAP', clusterLabels=\"STAGE_LR\", start.clus=\"ring\") sce = assign_pseudotime_bins(sce, pseudotime_slot=\"slingPseudotime_1\", n_bins=12, split_by=\"pseudotime_range\")  gridExtra::grid.arrange(   plotPCA(sce, colour_by=\"slingPseudotime_1\"),   plotUMAP(sce, colour_by=\"slingPseudotime_1\"),   plotPCA(sce, colour_by=\"pseudotime_bin\"),   plotUMAP(sce, colour_by=\"pseudotime_bin\"),   ncol=2 ) evaluateK(sce, k=6:8, parallel=T, BPPARAM=MulticoreParam(N_CORES), nGenes=length(rownames(sce))) sce <- fitGAM(sce, parallel=T, BPPARAM=MulticoreParam(N_CORES), nknots=7) associationTestResult <- associationTest(sce, lineages=T, global=F, contrastType=\"consecutive\") head(associationTestResult) nrow(associationTestResult)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pb-object.html","id":"saving-the-sce-object","dir":"Articles","previous_headings":"Generating Malaria Cell Atlas PB Test Dataset","what":"Saving the SCE Object","title":"Generating Malaria Cell Atlas PB Test Dataset","text":"Now save RDS can distribute BLASE.","code":"processed_MCA_PB_SCE = sce usethis::use_data(processed_MCA_PB_SCE, overwrite = TRUE, compress = \"bzip2\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pb-object.html","id":"loading-the-sce-object","dir":"Articles","previous_headings":"Generating Malaria Cell Atlas PB Test Dataset","what":"Loading the SCE Object","title":"Generating Malaria Cell Atlas PB Test Dataset","text":"can load SCE :","code":"data(processed_MCA_PB_SCE, package=\"blase\") processed_MCA_PB_SCE ## Loading required package: SingleCellExperiment ## Loading required package: SummarizedExperiment ## Loading required package: MatrixGenerics ## Loading required package: matrixStats ##  ## Attaching package: 'MatrixGenerics' ## The following objects are masked from 'package:matrixStats': ##  ##     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, ##     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, ##     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, ##     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, ##     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, ##     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, ##     colWeightedMeans, colWeightedMedians, colWeightedSds, ##     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, ##     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, ##     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, ##     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, ##     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, ##     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, ##     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, ##     rowWeightedSds, rowWeightedVars ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ##  ## Attaching package: 'BiocGenerics' ## The following objects are masked from 'package:stats': ##  ##     IQR, mad, sd, var, xtabs ## The following objects are masked from 'package:base': ##  ##     anyDuplicated, aperm, append, as.data.frame, basename, cbind, ##     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, ##     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, ##     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, ##     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, ##     table, tapply, union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ##  ## Attaching package: 'S4Vectors' ## The following object is masked from 'package:utils': ##  ##     findMatches ## The following objects are masked from 'package:base': ##  ##     expand.grid, I, unname ## Loading required package: IRanges ## Loading required package: GenomeInfoDb ## Loading required package: Biobase ## Welcome to Bioconductor ##  ##     Vignettes contain introductory material; view with ##     'browseVignettes()'. To cite Bioconductor, see ##     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. ##  ## Attaching package: 'Biobase' ## The following object is masked from 'package:MatrixGenerics': ##  ##     rowMedians ## The following objects are masked from 'package:matrixStats': ##  ##     anyMissing, rowMedians ## class: SingleCellExperiment  ## dim: 4890 4763  ## metadata(1): tradeSeq ## assays(3): counts logcounts normcounts ## rownames(4890): PBANKA-0000301 PBANKA-0000600 ... PBANKA-MIT0350 ##   PBANKA-MIT0360 ## rowData names(1): tradeSeq ## colnames(4763): AAACCTGAGCACCGTC AAACCTGAGCGCTTAT ... AGCTTGACAATAGAGT ##   CCGGGATCACGTTGGC ## colData names(18): PC_1 PC_2 ... tradeSeq crv ## reducedDimNames(2): PCA UMAP ## mainExpName: NULL ## altExpNames(0):"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pb-object.html","id":"session-info","dir":"Articles","previous_headings":"Generating Malaria Cell Atlas PB Test Dataset","what":"Session Info","title":"Generating Malaria Cell Atlas PB Test Dataset","text":"","code":"sessionInfo() ## R version 4.3.3 (2024-02-29) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SingleCellExperiment_1.24.0 SummarizedExperiment_1.32.0 ##  [3] Biobase_2.62.0              GenomicRanges_1.54.1        ##  [5] GenomeInfoDb_1.38.6         IRanges_2.36.0              ##  [7] S4Vectors_0.40.2            BiocGenerics_0.48.1         ##  [9] MatrixGenerics_1.14.0       matrixStats_1.2.0           ##  ## loaded via a namespace (and not attached): ##  [1] Matrix_1.6-5            jsonlite_1.8.8          crayon_1.5.2            ##  [4] compiler_4.3.3          stringr_1.5.1           bitops_1.0-7            ##  [7] jquerylib_0.1.4         systemfonts_1.0.5       textshaping_0.3.7       ## [10] yaml_2.3.8              fastmap_1.1.1           lattice_0.22-5          ## [13] XVector_0.42.0          R6_2.5.1                S4Arrays_1.2.0          ## [16] knitr_1.45              DelayedArray_0.28.0     desc_1.4.3              ## [19] GenomeInfoDbData_1.2.11 bslib_0.6.1             rlang_1.1.3             ## [22] cachem_1.0.8            stringi_1.8.3           xfun_0.42               ## [25] fs_1.6.3                sass_0.4.8              SparseArray_1.2.4       ## [28] memoise_2.0.1           cli_3.6.2               pkgdown_2.0.7           ## [31] magrittr_2.0.3          zlibbioc_1.48.0         grid_4.3.3              ## [34] digest_0.6.34           lifecycle_1.0.4         vctrs_0.6.5             ## [37] evaluate_0.23           glue_1.7.0              ragg_1.2.7              ## [40] abind_1.4-5             RCurl_1.98-1.14         rmarkdown_2.25          ## [43] purrr_1.0.2             tools_4.3.3             htmltools_0.5.7"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pf-object.html","id":"generating-malaria-cell-atlas-pf-test-dataset","dir":"Articles","previous_headings":"","what":"Generating Malaria Cell Atlas PF Test Dataset","title":"Generating Malaria Cell Atlas PF Test dataset","text":"article, run website, shows prepare Malaria Cell Atlas Plasmodium Falciparum (Howick et al. 2019 10x single cell data. can used generate scratch, provide processed object BLASE. First configure R: First download data Malaria Cell Atlas","code":"library(readxl) library(scran) library(slingshot) library(tradeSeq) library(BiocParallel) library(fs) library(gridExtra) library(scater) library(utils) library(blase) library(utils) library(ami) RNGversion(\"3.5.0\") SEED = 7 set.seed(SEED) N_CORES = 4 if (ami::using_ci()) {   N_CORES = 2 } root_dir = tools::R_user_dir(\"BLASE\", \"data\") article_dir = path(root_dir, \"Generate_MCA_PF_Object\")  if (!dir.exists(article_dir)) {   dir.create(article_dir, recursive = TRUE) }  mca_path = path(article_dir, \"MCA\", ext=\"zip\") if (!file.exists(mca_path)) {   download.file('https://www.malariacellatlas.org/downloads/pf.zip', mca_path)   unzip(mca_path, exdir = paste0(article_dir, '/MCA')) }else {   print(\"Using cached\") }"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pf-object.html","id":"prepare-sc","dir":"Articles","previous_headings":"Generating Malaria Cell Atlas PF Test Dataset","what":"Prepare SC","title":"Generating Malaria Cell Atlas PF Test dataset","text":"Now read files create SCE. , collapse transcripts gene, can match bulk datasets better. reccomended approach analyses. Now can create SingleCellExperiment object: also subset gametocytes, since focus Plasmodium’s asexual reproduction articles. limit outselves 10,000 cells, plenty BLASE, reduces resource load file. Now start annotating preprocessing data.","code":"mca_counts_path = path(article_dir, \"MCA\", \"pf-ch10x-raw\", ext=\"csv\") sc_readcounts = read.csv(mca_counts_path, row.names=1)  mca_annotation_path = path(article_dir, \"MCA\", \"pf-ch10x-data\", ext=\"csv\") sc_annotations = read.csv(mca_annotation_path, row.names=1)  rownames(sc_annotations) = gsub(x = rownames(sc_annotations), pattern=\"-\", replacement=\".\", fixed=TRUE) genes_to_fix = rownames(sc_readcounts)[!(rownames(sc_readcounts) %in% sub(x=rownames(sc_readcounts), pattern=\"\\\\.[0-9]\", replacement=\"\"))] genes_to_fix = unique(sub(x=genes_to_fix, pattern=\"\\\\.[0-9]\", replacement=\"\"))  new_rows = data.frame() rownames_to_remove = c()  # Do some pre-work to get colSums quickly sc_readcounts_matrix = data.matrix(sc_readcounts) sc_readcounts_n = ncol(sc_readcounts_matrix)  for (gene in genes_to_fix) {   targetRowNames = rownames(sc_readcounts)[grep(x=rownames(sc_readcounts), pattern=gene)]   rownames_to_remove = c(rownames_to_remove, targetRowNames)   # N = col index, M = row index   counts = .colSums(sc_readcounts_matrix[targetRowNames,], m=length(targetRowNames), n=sc_readcounts_n)   counts = t(data.frame(counts=counts))   rownames(counts) = c(gene)   colnames(counts) = colnames(sc_readcounts)   new_rows = rbind(new_rows, counts) }  sc_readcounts <- sc_readcounts[ !(rownames(sc_readcounts) %in% rownames_to_remove), ] sc_readcounts = rbind(sc_readcounts, new_rows)  genes_to_fix = rownames(sc_readcounts)[!(rownames(sc_readcounts) %in% sub(x=rownames(sc_readcounts), pattern=\"\\\\.[0-9]\", replacement=\"\"))] genes_to_fix = unique(sub(x=genes_to_fix, pattern=\"\\\\.[0-9]\", replacement=\"\")) print(paste(\"Remaining genes with dups:\", genes_to_fix))  rm (new_rows, rownames_to_remove, sc_readcounts_matrix, sc_readcounts_n, genes_to_fix, targetRowNames, gene) gc() sce = SingleCellExperiment(assays=list(counts=as.matrix(sc_readcounts)), colData=sc_annotations) rownames(sce) = sub(x=rownames(sce), pattern=\"\\\\.[0-9]\", replacement=\"\")  sce@colData$STAGE_LR = factor(sce@colData$STAGE_LR) sce@colData$STAGE_HR = factor(sce@colData$STAGE_HR) sce@colData$STRAIN = factor(sce@colData$STRAIN) sce@colData$DAY = factor(sce@colData$DAY) sce@colData$HOST = factor(sce@colData$HOST) sce@colData$STAGE_HR2 = factor(sce@colData$STAGE_HR2) sce@colData$CLUSTER = factor(sce@colData$CLUSTER) sce = subset(sce, , STAGE_LR != 'gametocyte')  # Subsample to reduce memory consumption cells_to_keep = sample(colnames(sce), size=6000) sce = sce[,colnames(sce) %in% cells_to_keep]  rm(sc_annotations, sc_readcounts, cells_to_keep) gc() sce <- computeSumFactors(sce) sce <- logNormCounts(sce) normcounts(sce) <- exp(logcounts(sce))  dec <- modelGeneVar(sce) hvg <- getTopHVGs(dec, prop=0.3) sce = sce[hvg,]  reducedDim(sce, \"PCA\") = as.matrix(cbind(sce@colData[\"PC_1\"], sce@colData[\"PC_2\"],sce@colData[\"PC_3\"])) # better separation in the 2nd and 3rd dimension for just asexual stages reducedDim(sce, \"UMAP\") = as.matrix(cbind(sce@colData[\"UMAP_2\"], sce@colData[\"UMAP_3\"]))  gridExtra::grid.arrange(   plotPCA(sce, colour_by=\"STAGE_HR\"),   plotUMAP(sce, colour_by=\"STAGE_HR\"),   plotPCA(sce, colour_by=\"DAY\"),   plotUMAP(sce, colour_by=\"DAY\"),   plotPCA(sce, colour_by=\"STRAIN\"),   plotUMAP(sce, colour_by=\"STRAIN\"),   ncol=2 )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pf-object.html","id":"running-trajectory-analysis","dir":"Articles","previous_headings":"Generating Malaria Cell Atlas PF Test Dataset","what":"Running Trajectory Analysis","title":"Generating Malaria Cell Atlas PF Test dataset","text":"Generate pseudotime trajectory Evaluate number knots required tradeseq differential gene expression pseudotime. Find differentially expressed genes pseudotime: differentially expressed genes can found using association test like places:","code":"sce <- slingshot(sce, reducedDim = 'UMAP', clusterLabels=\"STAGE_HR\", start.clus=\"early ring\") plotUMAP(sce, colour_by=\"slingPseudotime_1\") evaluateK(sce, k=6:8, parallel=T, BPPARAM=MulticoreParam(N_CORES), nGenes=length(rownames(sce))) sce <- fitGAM(sce, parallel=T, BPPARAM=MulticoreParam(N_CORES), nknots=7) associationTestResult <- associationTest(sce, lineages=T, global=F, contrastType=\"consecutive\") head(associationTestResult) nrow(associationTestResult)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pf-object.html","id":"saving-the-sce-object","dir":"Articles","previous_headings":"Generating Malaria Cell Atlas PF Test Dataset","what":"Saving the SCE Object","title":"Generating Malaria Cell Atlas PF Test dataset","text":"Now save RDS can distribute BLASE.","code":"processed_MCA_PF_SCE = sce usethis::use_data(processed_MCA_PF_SCE, overwrite = TRUE, compress = \"bzip2\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pf-object.html","id":"loading-the-sce-object","dir":"Articles","previous_headings":"Generating Malaria Cell Atlas PF Test Dataset","what":"Loading the SCE Object","title":"Generating Malaria Cell Atlas PF Test dataset","text":"can load SCE :","code":"data(processed_MCA_PF_SCE, package=\"blase\") processed_MCA_PF_SCE ## Loading required package: SingleCellExperiment ## Loading required package: SummarizedExperiment ## Loading required package: MatrixGenerics ## Loading required package: matrixStats ##  ## Attaching package: 'MatrixGenerics' ## The following objects are masked from 'package:matrixStats': ##  ##     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, ##     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, ##     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, ##     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, ##     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, ##     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, ##     colWeightedMeans, colWeightedMedians, colWeightedSds, ##     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, ##     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, ##     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, ##     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, ##     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, ##     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, ##     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, ##     rowWeightedSds, rowWeightedVars ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ##  ## Attaching package: 'BiocGenerics' ## The following objects are masked from 'package:stats': ##  ##     IQR, mad, sd, var, xtabs ## The following objects are masked from 'package:base': ##  ##     anyDuplicated, aperm, append, as.data.frame, basename, cbind, ##     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, ##     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, ##     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, ##     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, ##     table, tapply, union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ##  ## Attaching package: 'S4Vectors' ## The following object is masked from 'package:utils': ##  ##     findMatches ## The following objects are masked from 'package:base': ##  ##     expand.grid, I, unname ## Loading required package: IRanges ## Loading required package: GenomeInfoDb ## Loading required package: Biobase ## Welcome to Bioconductor ##  ##     Vignettes contain introductory material; view with ##     'browseVignettes()'. To cite Bioconductor, see ##     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. ##  ## Attaching package: 'Biobase' ## The following object is masked from 'package:MatrixGenerics': ##  ##     rowMedians ## The following objects are masked from 'package:matrixStats': ##  ##     anyMissing, rowMedians ## class: SingleCellExperiment  ## dim: 710 6000  ## metadata(1): tradeSeq ## assays(3): counts logcounts normcounts ## rownames(710): PF3D7-0930300 PF3D7-1035200 ... PF3D7-0936400 ##   PF3D7-0916700 ## rowData names(1): tradeSeq ## colnames(6000): D0_AAACGCTCATATCGGT.1 D0_AAAGGTAAGGCAGTCA.1 ... ##   D10b_TTGGGTAAGATTGTGA.1 D10b_TTTGATCAGTAAGCAT.1 ## colData names(18): PC_1 PC_2 ... tradeSeq crv ## reducedDimNames(2): PCA UMAP ## mainExpName: NULL ## altExpNames(0):"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-MCA-pf-object.html","id":"session-info","dir":"Articles","previous_headings":"Generating Malaria Cell Atlas PF Test Dataset","what":"Session Info","title":"Generating Malaria Cell Atlas PF Test dataset","text":"","code":"sessionInfo() ## R version 4.3.3 (2024-02-29) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SingleCellExperiment_1.24.0 SummarizedExperiment_1.32.0 ##  [3] Biobase_2.62.0              GenomicRanges_1.54.1        ##  [5] GenomeInfoDb_1.38.6         IRanges_2.36.0              ##  [7] S4Vectors_0.40.2            BiocGenerics_0.48.1         ##  [9] MatrixGenerics_1.14.0       matrixStats_1.2.0           ##  ## loaded via a namespace (and not attached): ##  [1] Matrix_1.6-5            jsonlite_1.8.8          crayon_1.5.2            ##  [4] compiler_4.3.3          stringr_1.5.1           bitops_1.0-7            ##  [7] jquerylib_0.1.4         systemfonts_1.0.5       textshaping_0.3.7       ## [10] yaml_2.3.8              fastmap_1.1.1           lattice_0.22-5          ## [13] XVector_0.42.0          R6_2.5.1                S4Arrays_1.2.0          ## [16] knitr_1.45              DelayedArray_0.28.0     desc_1.4.3              ## [19] GenomeInfoDbData_1.2.11 bslib_0.6.1             rlang_1.1.3             ## [22] cachem_1.0.8            stringi_1.8.3           xfun_0.42               ## [25] fs_1.6.3                sass_0.4.8              SparseArray_1.2.4       ## [28] memoise_2.0.1           cli_3.6.2               pkgdown_2.0.7           ## [31] magrittr_2.0.3          zlibbioc_1.48.0         grid_4.3.3              ## [34] digest_0.6.34           lifecycle_1.0.4         vctrs_0.6.5             ## [37] evaluate_0.23           glue_1.7.0              ragg_1.2.7              ## [40] abind_1.4-5             RCurl_1.98-1.14         rmarkdown_2.25          ## [43] purrr_1.0.2             tools_4.3.3             htmltools_0.5.7"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-simulated-data-object.html","id":"generating-simulated-dataset","dir":"Articles","previous_headings":"","what":"Generating Simulated Dataset","title":"Generating Simulated Data Test dataset","text":"article, run website, shows simulated dataset used simulated data article. First configure R:","code":"library(blase) library(SingleCellExperiment) library(tradeSeq) library(slingshot) library(scran) library(scater) library(BiocParallel) library(dyngen) library(bluster) library(fs) library(utils) RNGversion(\"3.5.0\") SEED = 7 set.seed(SEED) N_CORES = 4 if (ami::using_ci()) {   N_CORES = 2 }"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-simulated-data-object.html","id":"generate-the-simulation-data","dir":"Articles","previous_headings":"Generating Simulated Dataset","what":"Generate the simulation data","title":"Generating Simulated Data Test dataset","text":"Based dyngen Getting Started tutorial. Now ’ll create SCE simulation","code":"# realnet for featurenetwork from realnets # realcount for generate experiment from realcounts  simulations_num = 150 backbone <- backbone_linear_simple() config <-   initialise_model(     backbone = backbone,     num_cells = 2000,     num_tfs = nrow(backbone$module_info),     num_targets = 400,     num_hks = 50,     verbose = FALSE,     feature_network_params = feature_network_default(       realnet=\"regulatorycircuits_04_mesenchymal_mixed\"     ),     experiment_params = experiment_snapshot(       realcount=\"zenodo_1443566_real_silver_trophoblast-stem-cell-trophoblast-differentiation_mca\"     ),     download_cache_dir = tools::R_user_dir(\"dyngen\", \"data\"),     simulation_params = simulation_default(       total_time = 1000,       ssa_algorithm = ssa_etl(tau = 30/3600),       census_interval = 4,       experiment_params = simulation_type_wild_type(num_simulations = simulations_num, seed=seq_len(simulations_num))     ),     num_cores=N_CORES   )  # Should be > 10 ideally floor(config$simulation_params$total_time / config$simulation_params$census_interval) * simulations_num / config$numbers$num_cells config$experiment_params$realcount config$feature_network_params$realnet  model <- generate_tf_network(config) model <- generate_feature_network(model) model <- generate_kinetics(model) model <- generate_gold_standard(model) model <- generate_cells(model) model <- generate_experiment(model) #model = readRDS(\"/Users/andrewmccluskey/Library/Application Support/org.R-project.R/R/BLASE/compare_simulated_data/simulation.rds\") sce <- as_sce(model)  sce <- computeSumFactors(sce) sce <- logNormCounts(sce) normcounts(sce) <- exp(logcounts(sce)) sce = runPCA(sce) sce = runUMAP(sce) colLabels(sce) <- clusterCells(sce, use.dimred='PCA',     BLUSPARAM=NNGraphParam(cluster.fun=\"louvain\"))"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-simulated-data-object.html","id":"saving-the-sce-object","dir":"Articles","previous_headings":"Generating Simulated Dataset","what":"Saving the SCE Object","title":"Generating Simulated Data Test dataset","text":"Now save RDS can distribute BLASE.","code":"processed_simulated_data_SCE = sce usethis::use_data(processed_simulated_data_SCE, overwrite = TRUE, compress = \"bzip2\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-simulated-data-object.html","id":"loading-the-sce-object","dir":"Articles","previous_headings":"Generating Simulated Dataset","what":"Loading the SCE Object","title":"Generating Simulated Data Test dataset","text":"can load SCE :","code":"data(processed_simulated_data_SCE, package=\"blase\") processed_simulated_data_SCE ## Loading required package: SingleCellExperiment ## Loading required package: SummarizedExperiment ## Loading required package: MatrixGenerics ## Loading required package: matrixStats ##  ## Attaching package: 'MatrixGenerics' ## The following objects are masked from 'package:matrixStats': ##  ##     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, ##     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, ##     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, ##     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, ##     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, ##     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, ##     colWeightedMeans, colWeightedMedians, colWeightedSds, ##     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, ##     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, ##     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, ##     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, ##     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, ##     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, ##     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, ##     rowWeightedSds, rowWeightedVars ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ##  ## Attaching package: 'BiocGenerics' ## The following objects are masked from 'package:stats': ##  ##     IQR, mad, sd, var, xtabs ## The following objects are masked from 'package:base': ##  ##     anyDuplicated, aperm, append, as.data.frame, basename, cbind, ##     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, ##     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, ##     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, ##     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, ##     table, tapply, union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ##  ## Attaching package: 'S4Vectors' ## The following object is masked from 'package:utils': ##  ##     findMatches ## The following objects are masked from 'package:base': ##  ##     expand.grid, I, unname ## Loading required package: IRanges ## Loading required package: GenomeInfoDb ## Loading required package: Biobase ## Welcome to Bioconductor ##  ##     Vignettes contain introductory material; view with ##     'browseVignettes()'. To cite Bioconductor, see ##     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. ##  ## Attaching package: 'Biobase' ## The following object is masked from 'package:MatrixGenerics': ##  ##     rowMedians ## The following objects are masked from 'package:matrixStats': ##  ##     anyMissing, rowMedians ## class: SingleCellExperiment  ## dim: 455 2000  ## metadata(3): traj_milestone_network traj_progressions ##   traj_dimred_segments ## assays(6): counts logcounts ... counts_protein normcounts ## rownames(455): M1_TF1 M2_TF1 ... HK49 HK50 ## rowData names(20): module_id basal ... mol_mrna mol_protein ## colnames(2000): cell1 cell2 ... cell1999 cell2000 ## colData names(5): step_ix simulation_i sim_time sizeFactor label ## reducedDimNames(3): MDS PCA UMAP ## mainExpName: NULL ## altExpNames(0):"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/generate-simulated-data-object.html","id":"session-info","dir":"Articles","previous_headings":"Generating Simulated Dataset","what":"Session Info","title":"Generating Simulated Data Test dataset","text":"","code":"sessionInfo() ## R version 4.3.3 (2024-02-29) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SingleCellExperiment_1.24.0 SummarizedExperiment_1.32.0 ##  [3] Biobase_2.62.0              GenomicRanges_1.54.1        ##  [5] GenomeInfoDb_1.38.6         IRanges_2.36.0              ##  [7] S4Vectors_0.40.2            BiocGenerics_0.48.1         ##  [9] MatrixGenerics_1.14.0       matrixStats_1.2.0           ##  ## loaded via a namespace (and not attached): ##  [1] Matrix_1.6-5            jsonlite_1.8.8          crayon_1.5.2            ##  [4] compiler_4.3.3          stringr_1.5.1           bitops_1.0-7            ##  [7] jquerylib_0.1.4         systemfonts_1.0.5       textshaping_0.3.7       ## [10] yaml_2.3.8              fastmap_1.1.1           lattice_0.22-5          ## [13] XVector_0.42.0          R6_2.5.1                S4Arrays_1.2.0          ## [16] knitr_1.45              DelayedArray_0.28.0     desc_1.4.3              ## [19] GenomeInfoDbData_1.2.11 bslib_0.6.1             rlang_1.1.3             ## [22] cachem_1.0.8            stringi_1.8.3           xfun_0.42               ## [25] fs_1.6.3                sass_0.4.8              SparseArray_1.2.4       ## [28] memoise_2.0.1           cli_3.6.2               pkgdown_2.0.7           ## [31] magrittr_2.0.3          zlibbioc_1.48.0         grid_4.3.3              ## [34] digest_0.6.34           lifecycle_1.0.4         vctrs_0.6.5             ## [37] evaluate_0.23           glue_1.7.0              ragg_1.2.7              ## [40] abind_1.4-5             RCurl_1.98-1.14         rmarkdown_2.25          ## [43] purrr_1.0.2             tools_4.3.3             htmltools_0.5.7"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McCluskey. Author, maintainer. Toby Kettlewell. Author. Thomas Otto. Author, thesis advisor.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McCluskey , Kettlewell T, Otto T (2024). blase: Enhancing Single Cell RNA-seq data bulk RNA-seq data. R package version 0.0.0.9000, https://andrewmccluskey-uog.github.io/atgnat/.","code":"@Manual{,   title = {blase: Enhancing Single Cell RNA-seq data with bulk RNA-seq data},   author = {Andrew McCluskey and Toby Kettlewell and Thomas Otto},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://andrewmccluskey-uog.github.io/atgnat/}, }"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/index.html","id":"blase","dir":"","previous_headings":"","what":"Enhancing Single Cell RNA-seq data with bulk RNA-seq data","title":"Enhancing Single Cell RNA-seq data with bulk RNA-seq data","text":"goal Blase enable map bulk RNA-seq samples onto Single Cell RNA-seq analysis, emphasis trajectories (can work continuous variable across data!).","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Enhancing Single Cell RNA-seq data with bulk RNA-seq data","text":"can install development version atgnat GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"andrewmccluskey-uog/atgnat\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Enhancing Single Cell RNA-seq data with bulk RNA-seq data","text":"Take look Vignette use Single Cell Experiment.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/BlaseData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Blase Data Object — BlaseData-class","title":"Blase Data Object — BlaseData-class","text":"creation details, see .BlaseData()","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/BlaseData-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blase Data Object — BlaseData-class","text":"BlaseData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/BlaseData-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Blase Data Object — BlaseData-class","text":"pseudobulk_bins list data.frames. item normalised count matrix representing bin, column cell bin row gene. bins list. list bin names timepoint. genes list. list genes selected discriminating timepoints.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/BlaseData-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blase Data Object — BlaseData-class","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol=10, nrow=10) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(normcounts = counts)) sce$pseudotime = seq_len(10) as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=3) #> Blase Data with: #> \tbins: c(1, 2, 3) #> \tselected genes: character(0)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/MappingResult-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Blase Mapping Result — MappingResult-class","title":"Blase Mapping Result — MappingResult-class","text":"Created map_best_bin()","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/MappingResult-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blase Mapping Result — MappingResult-class","text":"MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/MappingResult-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Blase Mapping Result — MappingResult-class","text":"bulk_name name bulk sample mapped. best_bin bin best matched bulk sample. best_correlation spearman's rho test geneset winning bin bulk. top_2_distance absolute difference best second best mapping buckets. Higher indicates less doubtful mapping. confident_mapping TRUE mapped bin's lower bound higher maximum upper bound bins. history dataframe correlation score confidence bounds bin. bootstrap_iterations number iterations used bootstrap.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/MappingResult-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blase Mapping Result — MappingResult-class","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) blase_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(blase_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/as.BlaseData.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to BlaseData — as.BlaseData","title":"Conversion to BlaseData — as.BlaseData","text":"Conversion BlaseData","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/as.BlaseData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to BlaseData — as.BlaseData","text":"","code":"as.BlaseData(x, ...)  # S4 method for data.frame as.BlaseData(x)  # S4 method for Seurat as.BlaseData(   x,   pseudotime_slot = \"slingPseudotime_1\",   n_bins = 20,   split_by = \"pseudotime_range\" )  # S4 method for SingleCellExperiment as.BlaseData(   x,   pseudotime_slot = \"slingPseudotime_1\",   n_bins = 20,   split_by = \"pseudotime_range\" )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/as.BlaseData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to BlaseData — as.BlaseData","text":"x object take counts ... additional arguments passed object-specific methods. pseudotime_slot SingleCellExperiment::SingleCellExperiment slot containing pseudotime values cell passed assign_pseudotime_bins(). n_bins number bins create, passed assign_pseudotime_bins(). split_by split_by method passed assign_pseudotime_bins().","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/as.BlaseData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion to BlaseData — as.BlaseData","text":"BlaseData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/as.BlaseData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion to BlaseData — as.BlaseData","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol=10, nrow=10) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(normcounts = counts)) sce$pseudotime = seq_len(10) as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=3) #> Blase Data with: #> \tbins: c(1, 2, 3) #> \tselected genes: character(0)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/assign_pseudotime_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"Assign Pseudotime Bins source object's metadata","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/assign_pseudotime_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"","code":"assign_pseudotime_bins(x, split_by = \"pseudotime_range\", n_bins = 20, ...)  # S4 method for SingleCellExperiment assign_pseudotime_bins(   x,   split_by,   n_bins,   pseudotime_slot = \"slingPseudotime_1\" )  # S4 method for data.frame assign_pseudotime_bins(x, split_by, n_bins)  # S4 method for Seurat assign_pseudotime_bins(   x,   split_by,   n_bins,   pseudotime_slot = \"slingPseudotime_1\" )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/assign_pseudotime_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"x object add metadata . split_by technique used split bins. default pseudotime_range picks bin cell based constant range pseudotime. cells picks bin cell based even number cells per bin. n_bins number bins split cells . ... additional arguments passed object-specific methods. pseudotime_slot SingleCellExperiment::SingleCellExperiment slot containing pseudotime values cell.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/assign_pseudotime_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) blase_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(blase_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"use n_bins n_genes implied sce pseudotime_bins_top_n_genes_df parameters return quality metrics optional chart.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"","code":"evaluate_parameters(blase_data, make_plot = FALSE, plot_columns = 4)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"blase_data BlaseData object use. make_plot Whether render plot showing correlations pseudobulk bin try map given bin. plot_columns many columns use plot.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"vector length 2: \"worst top 2 distance\" containing lowest difference absolute values top 2 correlated bins bin. Higher better differentiating. \"mean top 2 distance\" containing mean top 2 distance across entire set genes bins. Higher better differentiation, matter less worst value.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"","code":"ncells = 70 ngenes = 100 counts_matrix <- matrix(c(seq_len(3500)/10, seq_len(3500)/5), ncol=ncells, nrow=ngenes) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(ncells) rownames(sce) = as.character(seq_len(ngenes)) sce$cell_type = c(rep(\"celltype_1\", ncells/2), rep(\"celltype_2\", ncells/2))  sce$pseudotime = seq_len(ncells) genelist = as.character(seq_len(ngenes))  # Evaluating created BlaseData blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=10) blase_data@genes = genelist[1:20]  # Check specificity of parameters evaluate_parameters(blase_data, make_plot = TRUE)  #> [1] 0 0"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_top_n_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Top Genes — evaluate_top_n_genes","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"Shows plots bins expression top n genes. designed help identify selected genes vary pseudotime chosen bins exist . Uses normcounts SCE.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_top_n_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"","code":"evaluate_top_n_genes(blase_data, n_genes_to_plot = 16, plot_columns = 4)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_top_n_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"blase_data BlaseData get bins expression . n_genes_to_plot number genes plot. plot_columns number columns plot grid . Best divisor n_genes_to_plot.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_top_n_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"","code":"ncells = 70 ngenes = 100 counts_matrix <- matrix(c(seq_len(3500)/10, seq_len(3500)/5), ncol=ncells, nrow=ngenes) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(ncells) rownames(sce) = as.character(seq_len(ngenes)) sce$cell_type = c(rep(\"celltype_1\", ncells/2), rep(\"celltype_2\", ncells/2))  sce$pseudotime = seq_len(ncells) genelist = as.character(seq_len(ngenes))  # Evaluating created BlaseData blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=10) blase_data@genes = genelist[1:20]  # Check gene expression over pseudotime evaluate_top_n_genes(blase_data)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/find_best_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the Best Parameters For Your Dataset — find_best_params","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"Identify Best Parameters Dataset","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/find_best_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"","code":"find_best_params(   x,   genelist,   bins_count_range = c(5, 10, 20, 40),   gene_count_range = c(10, 20, 40, 80),   ... )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/find_best_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"x object create `BlaseData`` genelist list genes use (ordered descending goodness) bins_count_range n_bins list try gene_count_range n_genes list try ... params passed child functions, see .BlaseData()","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/find_best_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"dataframe results. bin_count: bin count attempt gene_count: top n genes use attempt worst_specificity: worst specificity parameters mean_specificity: mean specificity parameters","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/find_best_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"","code":"ncells = 70 ngenes = 100 counts_matrix <- matrix(c(seq_len(3500)/10, seq_len(3500)/5), ncol=ncells, nrow=ngenes) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(ncells) rownames(sce) = as.character(seq_len(ngenes)) sce$cell_type = c(rep(\"celltype_1\", ncells/2), rep(\"celltype_2\", ncells/2))  sce$pseudotime = seq_len(ncells) genelist = as.character(seq_len(ngenes))  # Finding the best params for the BlaseData best_params = find_best_params(   sce, genelist,   bins_count_range=c(10,20),   gene_count_range=c(20,50),   pseudotime_slot=\"pseudotime\",   split_by=\"pseudotime_range\" ) best_params #>   bin_count gene_count worst_specificity mean_specificity #> 1        10         20                 0                0 #> 2        10         50                 0                0 #> 3        20         20                 0                0 #> 4        20         50                 0                0 plot_find_best_params_results(best_params)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/gene_selection_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"gene_selection_matrix — gene_selection_matrix","title":"gene_selection_matrix — gene_selection_matrix","text":"Generates plot showing progression genes cells pseudotime. Plots log normalised expression values.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/gene_selection_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gene_selection_matrix — gene_selection_matrix","text":"","code":"gene_selection_matrix(x, ...)  # S4 method for Seurat gene_selection_matrix(   x,   waves,   genes = c(),   pseudotime_slot = \"slingPseudotime_1\",   target_matrix_size = 1000,   n_cores = 1 )  # S4 method for SingleCellExperiment gene_selection_matrix(   x,   waves,   genes = c(),   pseudotime_slot = \"slingPseudotime_1\",   target_matrix_size = 1000,   n_cores = 1 )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/gene_selection_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gene_selection_matrix — gene_selection_matrix","text":"x Object generate gene selection matrix ... Parameters passed implementations. waves Waves dataframe generated get_waves genes genes generate matrix . empty list, genes used. Defaults c(). pseudotime_slot slot pseudotime use ordering. Defaults slingPseudotime_1\". target_matrix_size Matrix size redimension . Defaults 1000. n_cores Number cores matrix redimensioning","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/gene_selection_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gene_selection_matrix — gene_selection_matrix","text":"plot genes cells ordered pseudotime","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_bins_as_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"function try create pseudobulked count matrix bins. replicate cells, discounted. one exists, sample twice create pseudobulks.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_bins_as_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"","code":"get_bins_as_bulk(   pseudotime_sce,   min_cells_for_bulk = 50,   replicate_slot = \"replicate\" )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_bins_as_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"pseudotime_sce Single Cell Experiment object get bins min_cells_for_bulk minimum cells look per replicate bin. replicate_slot slot Single Cell Experiment contains replicate information","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_bins_as_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"dataframe pseudobulk counts matrix.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_bins_as_bulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"","code":"library(SingleCellExperiment, quietly=TRUE) #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians library(blase) counts <- matrix(rpois(1000, lambda = 10), ncol=100, nrow=10) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(normcounts = counts, counts = counts/2) ) sce$pseudotime = seq_len(100) colnames(sce) = seq_len(100) rownames(sce) = as.character(seq_len(10)) sce = assign_pseudotime_bins(sce, n_bins=5,   pseudotime_slot=\"pseudotime\", split_by=\"cells\") sce$replicate=rep(c(1,2), 50) result = get_bins_as_bulk(sce, min_cells_for_bulk=1, replicate_slot=\"replicate\") result #>    bin_1_rep_1 bin_1_rep_2 bin_2_rep_1 bin_2_rep_2 bin_3_rep_1 bin_3_rep_2 #> 1         51.0        46.5        51.0        58.0        52.5        55.0 #> 10        43.0        47.0        51.5        57.5        52.0        34.5 #> 2         60.5        54.5        42.0        48.0        53.0        52.0 #> 3         43.0        50.0        53.5        46.0        48.0        57.5 #> 4         47.5        58.0        45.0        45.0        41.5        47.0 #> 5         46.5        40.5        50.0        52.0        44.5        51.5 #> 6         52.0        48.5        46.0        57.0        39.0        48.5 #> 7         50.5        50.5        56.5        43.5        56.0        54.0 #> 8         47.5        47.0        51.0        42.5        46.5        41.5 #> 9         45.0        55.0        51.0        43.0        48.0        54.0 #>    bin_4_rep_1 bin_4_rep_2 bin_5_rep_1 bin_5_rep_2 #> 1         50.5        48.0        45.5        50.5 #> 10        53.0        49.5        45.5        47.0 #> 2         51.5        48.5        51.0        38.5 #> 3         43.5        48.0        50.0        49.0 #> 4         50.0        39.0        58.0        45.0 #> 5         42.5        45.5        46.0        51.0 #> 6         54.5        48.0        50.0        52.0 #> 7         51.0        44.5        44.5        51.0 #> 8         57.0        56.0        54.0        51.0 #> 9         44.5        51.5        52.5        50.5"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_top_n_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Top Genes From An AssociationTestResult — get_top_n_genes","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"Pulls genes highest wald statistic association test result, p value cutoff.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_top_n_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"","code":"get_top_n_genes(   association_test_results,   n_genes = 40,   lineage = NA,   p_cutoff = 0.05 )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_top_n_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"association_test_results association test results data frame take genes . n_genes number genes return. Defaults 40. lineage Lineage use. Defaults NA, assumes test run Lineages=False. p_cutoff P value cutoff use. Defaults less 0.05.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_top_n_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"vector names genes best describe lineage's trajectory.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_top_n_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"","code":"assoRes = data.frame(   row.names=c(\"A\", \"B\", \"C\", \"D\"),   waldStat=c(25, 50, 100, 10),   pvalue=c(0.01, 0.5, 0.005, 0.13)) get_top_n_genes(assoRes, n_genes=2) #> [1] \"C\" \"A\""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_waves.html","id":null,"dir":"Reference","previous_headings":"","what":"get_waves — get_waves","title":"get_waves — get_waves","text":"Uses metR perform fourier analysis gene find phase, amplitude, r2 (explained variance) pattern gene. function uses normalised counts.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_waves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_waves — get_waves","text":"","code":"get_waves(sce, pseudotime_slot = \"slingPseudotime_1\", n_cores = 1)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_waves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_waves — get_waves","text":"sce SCE generate waves . pseudotime_slot slot pseudotime . n_cores Number cores use fourier analysis. Defaults 1.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_waves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_waves — get_waves","text":"Waves dataframe, used select_genes_by_fourier_method gene_selection_matrix. Phase normalised position pseudotime. Power value calculated method described Bozdech et al. 2003 (https://doi.org/10.1371/journal.pbio.0000005), using window +/- 5% peak pseudotime.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/map_best_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Map the best matching SC bin for a bulk sample — map_best_bin","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"Map best matching SC bin bulk sample","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/map_best_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"","code":"map_best_bin(blase_data, bulk_id, bulk_data, bootstrap_iterations = 200)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/map_best_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"blase_data BlaseData holding bins. bulk_id sample id bulk analyse. bulk_data whole bulk read matrix. bootstrap_iterations number bootstrapping iterations run.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/map_best_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"MappingResult object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/map_best_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) blase_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(blase_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_bin_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the populations of a bin — plot_bin_population","title":"Plot the populations of a bin — plot_bin_population","text":"Plot populations bin","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_bin_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the populations of a bin — plot_bin_population","text":"","code":"plot_bin_population(x, bin, ...)  # S4 method for SingleCellExperiment plot_bin_population(x, bin, group_by_slot)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_bin_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the populations of a bin — plot_bin_population","text":"x object plot . bin bin ID plot ... additional arguments passed object-specific methods. group_by_slot slot SingleCellExperiment::SingleCellExperiment used cell type labels.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_bin_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the populations of a bin — plot_bin_population","text":"ggplot2 object plot population given object bin.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_bin_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the populations of a bin — plot_bin_population","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) blase_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(blase_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_find_best_params_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of the search for good parameters — plot_find_best_params_results","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"Plot results search good parameters","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_find_best_params_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"","code":"plot_find_best_params_results(   find_best_params_results,   bin_count_colors = viridis::scale_color_viridis(option = \"viridis\"),   gene_count_colors = viridis::scale_color_viridis(option = \"magma\") )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_find_best_params_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"find_best_params_results Results dataframe find_best_params() bin_count_colors Optional, custom bin count color scheme. gene_count_colors Optional, custom gene count color scheme.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_find_best_params_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"","code":"ncells = 70 ngenes = 100 counts_matrix <- matrix(c(seq_len(3500)/10, seq_len(3500)/5), ncol=ncells, nrow=ngenes) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(ncells) rownames(sce) = as.character(seq_len(ngenes)) sce$cell_type = c(rep(\"celltype_1\", ncells/2), rep(\"celltype_2\", ncells/2))  sce$pseudotime = seq_len(ncells) genelist = as.character(seq_len(ngenes))  # Finding the best params for the BlaseData best_params = find_best_params(   sce, genelist,   bins_count_range=c(10,20),   gene_count_range=c(20,50),   pseudotime_slot=\"pseudotime\",   split_by=\"pseudotime_range\" ) best_params #>   bin_count gene_count worst_specificity mean_specificity #> 1        10         20                 0                0 #> 2        10         50                 0                0 #> 3        20         20                 0                0 #> 4        20         50                 0                0 plot_find_best_params_results(best_params)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a summary of the mapping result — plot_mapping_result","title":"Plot a summary of the mapping result — plot_mapping_result","text":"Plot summary mapping result","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a summary of the mapping result — plot_mapping_result","text":"","code":"plot_mapping_result(x, y, ...)  # S4 method for SingleCellExperiment,MappingResult plot_mapping_result(x, y, group_by_slot)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a summary of the mapping result — plot_mapping_result","text":"x object plot . y MappingResult object plot ... additional arguments passed object-specific methods. group_by_slot slot SingleCellExperiment::SingleCellExperiment used coloring output plot. Passed scater::plotUMAP() colour_by, used produce bar chart populations best mapped bin.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a summary of the mapping result — plot_mapping_result","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) blase_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  result = map_best_bin(blase_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf  # Plot bin sce = scater::runUMAP(sce) sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_mapping_result(sce, result, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a mapping result's correlation — plot_mapping_result_corr","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"Plots mapping results correlations pseudobin","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"","code":"plot_mapping_result_corr(mapping_result)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"mapping_result MappingResult object plot correlations .","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"ggplot2 object plot","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) blase_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(blase_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a mapping result heatmap — plot_mapping_result_heatmap","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"Plots Spearman's Rho fill colour, adds * MappingResult confidently assigned.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"","code":"plot_mapping_result_heatmap(   mapping_result_list,   heatmap_fill_scale = viridis::scale_fill_viridis(option = \"viridis\", limits = c(-1, 1)),   annotate = TRUE )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"mapping_result_list list MappingResult objects include heatmap. heatmap_fill_scale ggplot2 compatible fill scale apply heatmap. annotate Whether annotate heatmap significant results , defaults TRUE. limits Limits heatmap's colors. maximum values -1 1 , default show. Defaults c(-1,1).","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) blase_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(blase_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_MCA_PB_SCE.html","id":null,"dir":"Reference","previous_headings":"","what":"BLASE Malaria Cell Atlas Plasmodium Berghei Test Dataset — processed_MCA_PB_SCE","title":"BLASE Malaria Cell Atlas Plasmodium Berghei Test Dataset — processed_MCA_PB_SCE","text":"SingleCellExperiment object contains 4890 cells 4763 genes. used test BLASE real dataset Plasmodium Berghei, case generated Howick et al. 2019.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_MCA_PB_SCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BLASE Malaria Cell Atlas Plasmodium Berghei Test Dataset — processed_MCA_PB_SCE","text":"","code":"data(processed_MCA_PB_SCE, 'blase')"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_MCA_PB_SCE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BLASE Malaria Cell Atlas Plasmodium Berghei Test Dataset — processed_MCA_PB_SCE","text":"object contains raw, normalized log normalized counts, cluster names, PCA UMAP coordinates, well pre-calculated slingshot trajectory tradeSeq analysis.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_MCA_PB_SCE.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"BLASE Malaria Cell Atlas Plasmodium Berghei Test Dataset — processed_MCA_PB_SCE","text":"https://doi.org/10.1126/science.aaw2619","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_MCA_PB_SCE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BLASE Malaria Cell Atlas Plasmodium Berghei Test Dataset — processed_MCA_PB_SCE","text":"Exact steps generating object given article.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_MCA_PF_SCE.html","id":null,"dir":"Reference","previous_headings":"","what":"BLASE Malaria Cell Atlas Plasmodium Falciparum Test Dataset — processed_MCA_PF_SCE","title":"BLASE Malaria Cell Atlas Plasmodium Falciparum Test Dataset — processed_MCA_PF_SCE","text":"SingleCellExperiment object contains 6000 cells 710 genes. used test BLASE real dataset Plasmodium Falciparum, case generated Howick et al. 2019.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_MCA_PF_SCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BLASE Malaria Cell Atlas Plasmodium Falciparum Test Dataset — processed_MCA_PF_SCE","text":"","code":"data(processed_MCA_PF_SCE, 'blase')"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_MCA_PF_SCE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BLASE Malaria Cell Atlas Plasmodium Falciparum Test Dataset — processed_MCA_PF_SCE","text":"object contains raw, normalized log normalized counts, cluster names, PCA UMAP coordinates, well pre-calculated slingshot trajectory tradeSeq analysis.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_MCA_PF_SCE.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"BLASE Malaria Cell Atlas Plasmodium Falciparum Test Dataset — processed_MCA_PF_SCE","text":"https://doi.org/10.1126/science.aaw2619","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_MCA_PF_SCE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BLASE Malaria Cell Atlas Plasmodium Falciparum Test Dataset — processed_MCA_PF_SCE","text":"Exact steps generating object given article.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_simulated_data_SCE.html","id":null,"dir":"Reference","previous_headings":"","what":"BLASE Simulation Test Dataset — processed_simulated_data_SCE","title":"BLASE Simulation Test Dataset — processed_simulated_data_SCE","text":"SingleCellExperiment object contains 2000 cells 455 genes. used test BLASE dataset ground truth known. generated dyngen library.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_simulated_data_SCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BLASE Simulation Test Dataset — processed_simulated_data_SCE","text":"","code":"data(processed_simulated_data_SCE, 'blase')"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_simulated_data_SCE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BLASE Simulation Test Dataset — processed_simulated_data_SCE","text":"object contains raw, normalized log normalized counts, cluster names, PCA UMAP coordinates.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_simulated_data_SCE.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"BLASE Simulation Test Dataset — processed_simulated_data_SCE","text":"BLASE","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/processed_simulated_data_SCE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BLASE Simulation Test Dataset — processed_simulated_data_SCE","text":"Exact steps generating object given article.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/redim_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"redim_matrix — redim_matrix","title":"redim_matrix — redim_matrix","text":"Snippet : https://cansnippet.bioinfo-fr.net/details.php?id=3","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/redim_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"redim_matrix — redim_matrix","text":"","code":"redim_matrix(   mat,   target_height = 100,   target_width = 100,   summary_func = function(x) mean(x, na.rm = TRUE),   n_core = 1 )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/redim_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"redim_matrix — redim_matrix","text":"mat matrix reduce target_height target number rows matrix. Default 100. target_width target number columns matrix. Default 100. summary_func reduce cells. Defaults mean. n_core Number cores use redimensioning.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/redim_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"redim_matrix — redim_matrix","text":"matrix reduced dimensions","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/select_genes_by_fourier_method.html","id":null,"dir":"Reference","previous_headings":"","what":"select_genes_by_fourier_method — select_genes_by_fourier_method","title":"select_genes_by_fourier_method — select_genes_by_fourier_method","text":"select_genes_by_fourier_method","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/select_genes_by_fourier_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"select_genes_by_fourier_method — select_genes_by_fourier_method","text":"","code":"select_genes_by_fourier_method(x, ...)  # S4 method for Seurat select_genes_by_fourier_method(   x,   waves,   n_genes = 100,   n_groups = 40,   top_n_per_group = 1,   method = \"power\",   force_spread_selection = TRUE,   pseudotime_slot = \"slingPseudotime_1\" )  # S4 method for SingleCellExperiment select_genes_by_fourier_method(   x,   waves,   n_genes = 100,   n_groups = 40,   top_n_per_group = 1,   method = \"power\",   force_spread_selection = TRUE,   pseudotime_slot = \"slingPseudotime_1\" )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/select_genes_by_fourier_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"select_genes_by_fourier_method — select_genes_by_fourier_method","text":"x SingleCellExperiment. ... Parameters pass implementations. waves Waves dataframe generated get_waves n_genes number genes use force_spread_selection=FALSE. effect force_spread_selection=TRUE. Defaults 100. n_groups number divisions pseudotime use force_spread_selection=TRUE. effect force_spread_selection=FALSE. Defaults 40. top_n_per_group number genes per group use force_spread_selection=TRUE. effect force_spread_selection=FALSE. Defaults 1. method wave parameter use ordering genes. 'r2' maximises explained variance. 'amplitdue' maximises wave amplitude. 'power' maximises power parameter Bozdech et al. 2003 (https://doi.org/10.1371/journal.pbio.0000005, short, strength signal near peak compared baseline.) Defaults 'power' force_spread_selection Whether enforce selecting genes give good dispersion throughout whole pseudotime. false, strong signals concentrated one area can reduce Blase's efficacy. default, reccomended value, TRUE. pseudotime_slot slot object use pseudotime value. Defaults 'slingPseudotime_1'","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/select_genes_by_fourier_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"select_genes_by_fourier_method — select_genes_by_fourier_method","text":"dataframe fourier wave information list selected genes. rownames names genes.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-BlaseData-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an BlaseData object — show,BlaseData-method","title":"Show an BlaseData object — show,BlaseData-method","text":"Show BlaseData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-BlaseData-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an BlaseData object — show,BlaseData-method","text":"","code":"# S4 method for BlaseData show(object)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-BlaseData-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an BlaseData object — show,BlaseData-method","text":"object BlaseData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-BlaseData-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an BlaseData object — show,BlaseData-method","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol=10, nrow=10) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(normcounts = counts)) sce$pseudotime = seq_len(10) as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=3) #> Blase Data with: #> \tbins: c(1, 2, 3) #> \tselected genes: character(0)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-MappingResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an MappingResult object — show,MappingResult-method","title":"Show an MappingResult object — show,MappingResult-method","text":"Show MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-MappingResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an MappingResult object — show,MappingResult-method","text":"","code":"# S4 method for MappingResult show(object)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-MappingResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an MappingResult object — show,MappingResult-method","text":"object MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-MappingResult-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an MappingResult object — show,MappingResult-method","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) blase_data = as.BlaseData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) blase_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(blase_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"}]
