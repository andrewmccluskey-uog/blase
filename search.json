[{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-annotating-scRNA-seq.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"BLASE for annotating scRNA-seq","text":"First ’ll load data ’re using, pre-prepared BLASE reproducibility repository. can examine true lifecycle stages, also calculated pseudotime trajectory (Slingshot).","code":"painter_microarray = readRDS('Data/painter_2018_pf.rds') dogga_sc = readRDS('Data/processed_MCA_PF_SCE_allgenes.rds') plotUMAP(dogga_sc, colour_by=\"STAGE_HR\") #| fig.alt: > #|   UMAP of Dogga et al. single-cell RNA-seq reference coloured by pseudotime, #|   starting with Rings, and ending with Schizonts. plotUMAP(dogga_sc, colour_by=\"slingPseudotime_1\")"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-annotating-scRNA-seq.html","id":"prepare-blase","dir":"Articles","previous_headings":"","what":"Prepare BLASE","title":"BLASE for annotating scRNA-seq","text":"Now ’ll prepare BLASE use.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-annotating-scRNA-seq.html","id":"create-blase-data-object","dir":"Articles","previous_headings":"Prepare BLASE","what":"Create BLASE data object","title":"BLASE for annotating scRNA-seq","text":"First, create object, giving number bins want use, calculate .","code":"blase_data = as.BlaseData(   dogga_sc,    pseudotime_slot=\"slingPseudotime_1\",    n_bins=8,    split_by=\"pseudotime_range\") #> Loading required namespace: TrajectoryUtils"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-annotating-scRNA-seq.html","id":"select-genes","dir":"Articles","previous_headings":"Prepare BLASE","what":"Select Genes","title":"BLASE for annotating scRNA-seq","text":"Now select genes want use, using BLASE’s gene peakedness metric. using gene_peakedness_spread_selection function, can ensure genes high ratios selected throughout trajectory.  , add BLASE object mapping .","code":"gene_peakedness_info = blase::calculate_gene_peakedness(   dogga_sc,    window_pct = 5,    knots = 18,    BPPARAM = bpparam) #> Warning in blase::calculate_gene_peakedness(dogga_sc, window_pct = 5, knots = #> 18, : 65 genes without counts have been omitted  genes_to_use = blase::gene_peakedness_spread_selection(   dogga_sc,    gene_peakedness_info,    genes_per_bin = 30,    n_gene_bins = 30)  head(gene_peakedness_info) #>              gene peak_pseudotime mean_in_window mean_out_window     ratio #> 1   PF3D7-1400200       0.1368156       1.000000        1.014045 0.9861494 #> 31  PF3D7-1400300       4.2412849       1.003203        1.002588 1.0006133 #> 14  PF3D7-1400400       1.9154190       1.000000        1.004880 0.9951434 #> 110 PF3D7-1400500       0.1368156       1.000000        1.020406 0.9800019 #> 111 PF3D7-1400600       0.1368156       1.000000        1.003663 0.9963507 #> 112 PF3D7-1400700       0.1368156       1.000000        1.010270 0.9898343 #>     window_start window_end deviance_explained #> 1     -0.2052235  0.4788548       3.285959e-05 #> 31     3.8992458  4.5833241       3.226027e-04 #> 14     1.5733799  2.2574581       2.607741e-03 #> 110   -0.2052235  0.4788548       1.459514e-05 #> 111   -0.2052235  0.4788548       6.363956e-05 #> 112   -0.2052235  0.4788548       5.781721e-05 ggplot(gene_peakedness_info, aes(x=peak_pseudotime, y=ratio)) +    geom_point() +   ggtitle(\"All genes\") gene_peakedness_selected_genes = gene_peakedness_info[   gene_peakedness_info$gene %in% genes_to_use,] #| fig.alt: > #|   Scatter plot showing gene peakedness ratios for genes selected by BLASE  #|   spread selection, ordered by pseudotime. ggplot(gene_peakedness_selected_genes, aes(x=peak_pseudotime, y=ratio)) +    geom_point() +   ggtitle(\"Selected genes\") genes(blase_data) = genes_to_use"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-annotating-scRNA-seq.html","id":"calculate-mappings","dir":"Articles","previous_headings":"","what":"Calculate Mappings","title":"BLASE for annotating scRNA-seq","text":"Now can perform actual mapping step, review results.","code":"mapping_results = blase::map_all_best_bins(   blase_data,    painter_microarray,    BPPARAM=bpparam)  #| fig.alt: > #|   Heatmap of mapping correlations of the Painter et al. data onto  #|   the Dogga et al. scRNA-seq. blase::plot_mapping_result_heatmap(mapping_results)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-annotating-scRNA-seq.html","id":"transfer-mappings","dir":"Articles","previous_headings":"","what":"Transfer Mappings","title":"BLASE for annotating scRNA-seq","text":"TODO","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-annotating-scRNA-seq.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"BLASE for annotating scRNA-seq","text":"","code":"sessionInfo() #> R version 4.5.0 (2025-04-11) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> Random number generation: #>  RNG:     Mersenne-Twister  #>  Normal:  Inversion  #>  Sample:  Rounding  #>   #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] blase_0.99.0                BiocParallel_1.42.0         #>  [3] scater_1.36.0               ggplot2_3.5.2               #>  [5] scuttle_1.18.0              SingleCellExperiment_1.30.0 #>  [7] SummarizedExperiment_1.38.1 Biobase_2.68.0              #>  [9] GenomicRanges_1.60.0        GenomeInfoDb_1.44.0         #> [11] IRanges_2.42.0              S4Vectors_0.46.0            #> [13] BiocGenerics_0.54.0         generics_0.1.3              #> [15] MatrixGenerics_1.20.0       matrixStats_1.5.0           #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1        viridisLite_0.4.2       ami_0.2.1               #>  [4] dplyr_1.1.4             vipor_0.4.7             farver_2.1.2            #>  [7] viridis_0.6.5           fastmap_1.2.0           digest_0.6.37           #> [10] rsvd_1.0.5              lifecycle_1.0.4         magrittr_2.0.3          #> [13] compiler_4.5.0          rlang_1.1.6             sass_0.4.10             #> [16] tools_4.5.0             igraph_2.1.4            yaml_2.3.10             #> [19] knitr_1.50              S4Arrays_1.8.0          labeling_0.4.3          #> [22] htmlwidgets_1.6.4       DelayedArray_0.34.1     RColorBrewer_1.1-3      #> [25] TrajectoryUtils_1.16.0  abind_1.4-8             withr_3.0.2             #> [28] desc_1.4.3              grid_4.5.0              beachmat_2.24.0         #> [31] scales_1.4.0            cli_3.6.5               rmarkdown_2.29          #> [34] crayon_1.5.3            ragg_1.4.0              httr_1.4.7              #> [37] ggbeeswarm_0.7.2        cachem_1.1.0            splines_4.5.0           #> [40] parallel_4.5.0          XVector_0.48.0          vctrs_0.6.5             #> [43] boot_1.3-31             Matrix_1.7-3            jsonlite_2.0.0          #> [46] BiocSingular_1.24.0     BiocNeighbors_2.2.0     ggrepel_0.9.6           #> [49] irlba_2.3.5.1           beeswarm_0.4.0          systemfonts_1.2.3       #> [52] jquerylib_0.1.4         glue_1.8.0              pkgdown_2.1.2           #> [55] codetools_0.2-20        cowplot_1.1.3           gtable_0.3.6            #> [58] UCSC.utils_1.4.0        ScaledMatrix_1.16.0     tibble_3.2.1            #> [61] pillar_1.10.2           htmltools_0.5.8.1       GenomeInfoDbData_1.2.14 #> [64] R6_2.6.1                textshaping_1.0.1       evaluate_1.0.3          #> [67] lattice_0.22-6          bslib_0.9.0             Rcpp_1.0.14             #> [70] gridExtra_2.3           SparseArray_1.8.0       nlme_3.1-168            #> [73] mgcv_1.9-1              xfun_0.52               fs_1.6.6                #> [76] pkgconfig_2.0.3"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-excluding-developmental-genes-from-bulk-RNA-seq.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"BLASE for excluding developmental genes from bulk RNA-seq","text":"First ’ll load data ’re using, pre-prepared BLASE reproducibility repository. can examine true lifecycle stages, also calculated pseudotime trajectory (Slingshot).  ## Prepare BLASE Now ’ll prepare BLASE use.","code":"zhang_bulk = readRDS('Data/zhang_2021_heat_shock_bulk.rds') dogga_sc = readRDS('Data/processed_MCA_PF_SCE_allgenes.rds') plotUMAP(dogga_sc, colour_by=\"STAGE_HR\") #| fig.alt: > #|   UMAP of Dogga et al. single-cell RNA-seq reference coloured by pseudotime, #|   starting with Rings, and ending with Schizonts. plotUMAP(dogga_sc, colour_by=\"slingPseudotime_1\")"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-excluding-developmental-genes-from-bulk-RNA-seq.html","id":"create-blase-data-object","dir":"Articles","previous_headings":"Load Data","what":"Create BLASE data object","title":"BLASE for excluding developmental genes from bulk RNA-seq","text":"First, create object, giving number bins want use, calculate .","code":"blase_data = as.BlaseData(   dogga_sc,    pseudotime_slot=\"slingPseudotime_1\",    n_bins=8,    split_by=\"pseudotime_range\") #> Loading required namespace: TrajectoryUtils"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-excluding-developmental-genes-from-bulk-RNA-seq.html","id":"select-genes","dir":"Articles","previous_headings":"Load Data","what":"Select Genes","title":"BLASE for excluding developmental genes from bulk RNA-seq","text":"Now select genes want use, using BLASE’s gene peakedness metric. , add BLASE object mapping .","code":"gene_peakedness_info = blase::calculate_gene_peakedness(   dogga_sc,    window_pct = 5,    knots = 18,    BPPARAM = bpparam) #> Warning in blase::calculate_gene_peakedness(dogga_sc, window_pct = 5, knots = #> 18, : 65 genes without counts have been omitted  genes_to_use = blase::gene_peakedness_spread_selection(   dogga_sc,    gene_peakedness_info,    genes_per_bin = 30,    n_gene_bins = 30)  head(gene_peakedness_info) #>              gene peak_pseudotime mean_in_window mean_out_window     ratio #> 1   PF3D7-1400200       0.1368156       1.000000        1.014045 0.9861494 #> 31  PF3D7-1400300       4.2412849       1.003203        1.002588 1.0006133 #> 14  PF3D7-1400400       1.9154190       1.000000        1.004880 0.9951434 #> 110 PF3D7-1400500       0.1368156       1.000000        1.020406 0.9800019 #> 111 PF3D7-1400600       0.1368156       1.000000        1.003663 0.9963507 #> 112 PF3D7-1400700       0.1368156       1.000000        1.010270 0.9898343 #>     window_start window_end deviance_explained #> 1     -0.2052235  0.4788548       3.285959e-05 #> 31     3.8992458  4.5833241       3.226027e-04 #> 14     1.5733799  2.2574581       2.607741e-03 #> 110   -0.2052235  0.4788548       1.459514e-05 #> 111   -0.2052235  0.4788548       6.363956e-05 #> 112   -0.2052235  0.4788548       5.781721e-05 genes(blase_data) = genes_to_use"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-excluding-developmental-genes-from-bulk-RNA-seq.html","id":"calculate-mappings","dir":"Articles","previous_headings":"","what":"Calculate Mappings","title":"BLASE for excluding developmental genes from bulk RNA-seq","text":"Now can perform actual mapping step, review results.","code":"mapping_results = blase::map_all_best_bins(   blase_data,    zhang_bulk,    BPPARAM=bpparam)  #| fig.alt: > #|   Heatmap of mapping correlations of the Zhang et al. data onto  #|   the Dogga et al. scRNA-seq. blase::plot_mapping_result_heatmap(mapping_results)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-excluding-developmental-genes-from-bulk-RNA-seq.html","id":"calculate-de-genes","dir":"Articles","previous_headings":"","what":"Calculate DE genes","title":"BLASE for excluding developmental genes from bulk RNA-seq","text":"TODO","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-excluding-developmental-genes-from-bulk-RNA-seq.html","id":"remove-developmental-genes","dir":"Articles","previous_headings":"","what":"Remove Developmental Genes","title":"BLASE for excluding developmental genes from bulk RNA-seq","text":"TODO","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-excluding-developmental-genes-from-bulk-RNA-seq.html","id":"go-term-enrichment-analysis","dir":"Articles","previous_headings":"","what":"GO Term Enrichment Analysis","title":"BLASE for excluding developmental genes from bulk RNA-seq","text":"TODO","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/BLASE-for-excluding-developmental-genes-from-bulk-RNA-seq.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"BLASE for excluding developmental genes from bulk RNA-seq","text":"","code":"sessionInfo() #> R version 4.5.0 (2025-04-11) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> Random number generation: #>  RNG:     Mersenne-Twister  #>  Normal:  Inversion  #>  Sample:  Rounding  #>   #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] blase_0.99.0                BiocParallel_1.42.0         #>  [3] scater_1.36.0               ggplot2_3.5.2               #>  [5] scuttle_1.18.0              SingleCellExperiment_1.30.0 #>  [7] SummarizedExperiment_1.38.1 Biobase_2.68.0              #>  [9] GenomicRanges_1.60.0        GenomeInfoDb_1.44.0         #> [11] IRanges_2.42.0              S4Vectors_0.46.0            #> [13] BiocGenerics_0.54.0         generics_0.1.3              #> [15] MatrixGenerics_1.20.0       matrixStats_1.5.0           #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1        viridisLite_0.4.2       ami_0.2.1               #>  [4] dplyr_1.1.4             vipor_0.4.7             farver_2.1.2            #>  [7] viridis_0.6.5           fastmap_1.2.0           digest_0.6.37           #> [10] rsvd_1.0.5              lifecycle_1.0.4         magrittr_2.0.3          #> [13] compiler_4.5.0          rlang_1.1.6             sass_0.4.10             #> [16] tools_4.5.0             igraph_2.1.4            yaml_2.3.10             #> [19] knitr_1.50              S4Arrays_1.8.0          labeling_0.4.3          #> [22] htmlwidgets_1.6.4       DelayedArray_0.34.1     RColorBrewer_1.1-3      #> [25] TrajectoryUtils_1.16.0  abind_1.4-8             withr_3.0.2             #> [28] desc_1.4.3              grid_4.5.0              beachmat_2.24.0         #> [31] scales_1.4.0            cli_3.6.5               rmarkdown_2.29          #> [34] crayon_1.5.3            ragg_1.4.0              httr_1.4.7              #> [37] ggbeeswarm_0.7.2        cachem_1.1.0            splines_4.5.0           #> [40] parallel_4.5.0          XVector_0.48.0          vctrs_0.6.5             #> [43] boot_1.3-31             Matrix_1.7-3            jsonlite_2.0.0          #> [46] BiocSingular_1.24.0     BiocNeighbors_2.2.0     ggrepel_0.9.6           #> [49] irlba_2.3.5.1           beeswarm_0.4.0          systemfonts_1.2.3       #> [52] jquerylib_0.1.4         glue_1.8.0              pkgdown_2.1.2           #> [55] codetools_0.2-20        cowplot_1.1.3           gtable_0.3.6            #> [58] UCSC.utils_1.4.0        ScaledMatrix_1.16.0     tibble_3.2.1            #> [61] pillar_1.10.2           htmltools_0.5.8.1       GenomeInfoDbData_1.2.14 #> [64] R6_2.6.1                textshaping_1.0.1       evaluate_1.0.3          #> [67] lattice_0.22-6          bslib_0.9.0             Rcpp_1.0.14             #> [70] gridExtra_2.3           SparseArray_1.8.0       nlme_3.1-168            #> [73] mgcv_1.9-1              xfun_0.52               fs_1.6.6                #> [76] pkgconfig_2.0.3"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/How-Blase-Works.html","id":"principle","dir":"Articles","previous_headings":"","what":"Principle","title":"How Blase Works","text":"believe many trajectories cells undergo, curve shows expression key genes. plot , can see looking three “genes” 2 peaks “pseudotime”, can identify 6 unique states, , long genes correspond aspect trajectory, can used infer stage trajectory cell currently . course constructed example unlikely exactly repeated real life, hopefully demonstrates principle BLASE works .","code":"# Adapted from # https://codepal.ai/code-generator/query/n4dEA6I9/plot-sine-wave-ggplot2-r x <- seq(0, 2 * pi, length.out = 500) gene1_expr <- 10 * (sin(x + 0.1) + 1) gene2_expr <- 11 * (sin(x - pi) + 1) gene3_expr <- 7 * (sin(x + pi / 2) + 1)   genes <- data.frame(gene1 = gene1_expr, gene2 = gene2_expr, gene3 = gene3_expr) genes_melt <- melt(t(genes), varnames = c(\"gene\", \"x\")) genes_melt$x <- as.numeric(genes_melt$x)  # Create the plot using ggplot2 ggplot(genes_melt, aes = aes()) +     geom_line(aes(x = x, y = value, color = gene)) +     geom_vline(xintercept = 0, linetype = \"dashed\") +     geom_vline(xintercept = 24, linetype = \"dashed\") +     geom_vline(xintercept = 181, linetype = \"dashed\") +     geom_vline(xintercept = 243, linetype = \"dashed\") +     geom_vline(xintercept = 315, linetype = \"dashed\") +     geom_vline(xintercept = 479, linetype = \"dashed\") +     geom_vline(xintercept = 500, linetype = \"dashed\") +     labs(         x = \"pseudotime\",         y = \"Gene Expression\",         title = \"Variable Genes Over Pseudotime\"     )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/How-Blase-Works.html","id":"generating-icon","dir":"Articles","previous_headings":"","what":"Generating Icon","title":"How Blase Works","text":"","code":"# Adapted from https://nelson-gon.github.io/12/06/2020/hex-sticker-creation-r/ library(fontawesome) library(magick) library(dplyr) library(hexSticker) library(devtools)  logo_color <- \"orange\" fill_color <- \"red\" border_color <- \"red\"  svg <- fa(name = \"fire\", fill = logo_color)  img <- image_read_svg(svg) img %>%     image_convert(\"png\") %>%     image_fill(color = fill_color, point = \"+50\") -> res  final_res <- sticker(res,     package = \"BLASE\", p_size = 28,     p_y = 1,     s_x = 1, s_y = 1, s_width = 1.2,     s_height = 14,     filename = \"blase_icon.png\",     h_fill = fill_color,     h_color = border_color )  plot(final_res) usethis::use_logo(\"blase_icon.png\")"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/How-Blase-Works.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"How Blase Works","text":"","code":"sessionInfo() #> R version 4.5.0 (2025-04-11) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] reshape2_1.4.4 ggplot2_3.5.2  #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6       jsonlite_2.0.0     dplyr_1.1.4        compiler_4.5.0     #>  [5] tidyselect_1.2.1   Rcpp_1.0.14        stringr_1.5.1      jquerylib_0.1.4    #>  [9] systemfonts_1.2.3  scales_1.4.0       textshaping_1.0.1  yaml_2.3.10        #> [13] fastmap_1.2.0      R6_2.6.1           plyr_1.8.9         labeling_0.4.3     #> [17] generics_0.1.3     knitr_1.50         htmlwidgets_1.6.4  tibble_3.2.1       #> [21] desc_1.4.3         bslib_0.9.0        pillar_1.10.2      RColorBrewer_1.1-3 #> [25] rlang_1.1.6        stringi_1.8.7      cachem_1.1.0       xfun_0.52          #> [29] fs_1.6.6           sass_0.4.10        cli_3.6.5          pkgdown_2.1.2      #> [33] withr_3.0.2        magrittr_2.0.3     digest_0.6.37      grid_4.5.0         #> [37] lifecycle_1.0.4    vctrs_0.6.5        evaluate_1.0.3     glue_1.8.0         #> [41] farver_2.1.2       ragg_1.4.0         rmarkdown_2.29     tools_4.5.0        #> [45] pkgconfig_2.0.3    htmltools_0.5.8.1"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/assign-bulk-to-pseudotime.html","id":"setting-up-the-single-cell-experiment","dir":"Articles","previous_headings":"","what":"Setting up the Single Cell Experiment","title":"Assigning bulk RNA-seq to pseudotime","text":"First, let’s generate Single Cell Experiment use tool , based tradeSeq vignette.","code":"data(countMatrix, package = \"tradeSeq\") counts <- as.matrix(countMatrix) rm(countMatrix) data(crv, package = \"tradeSeq\") data(celltype, package = \"tradeSeq\")  pseudotime <- slingPseudotime(crv, na = FALSE) cellWeights <- slingCurveWeights(crv) sce <- fitGAM(     counts = counts, pseudotime = pseudotime, cellWeights = cellWeights,     nknots = 6, verbose = FALSE, BPPARAM = MulticoreParam(N_CORES) ) sce$pseudotime <- pseudotime[, \"curve1\"] sce$celltype <- celltype  sce <- subset(sce, , celltype != \"Erythrocyte\")  # sce <- computeSumFactors(sce, clusters=quickCluster(sce)) sce <- computeSumFactors(sce) sce <- logNormCounts(sce) normcounts(sce) <- exp(logcounts(sce)) sce <- runUMAP(sce)  gridExtra::grid.arrange(     plotUMAP(sce, text_by = \"celltype\", colour_by = \"celltype\"),     plotUMAP(sce, colour_by = \"pseudotime\"),     ncol = 1 )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/assign-bulk-to-pseudotime.html","id":"finding-the-most-descriptive-genes-with-tradeseq","dir":"Articles","previous_headings":"","what":"Finding the most descriptive genes with tradeSeq","title":"Assigning bulk RNA-seq to pseudotime","text":"Now ’ll find genes want use. select top 200 can parameter tuning . TODO: Add custom BLASE genes method ","code":"# Use consecutive for genes that change over time assoRes <- associationTest(     sce,     lineages = TRUE,     global = FALSE,     contrastType = \"consecutive\" ) genelist <- blase::get_top_n_genes(assoRes, n_genes = 200, lineage = 1)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/assign-bulk-to-pseudotime.html","id":"parameter-tuning-for-blase","dir":"Articles","previous_headings":"","what":"Parameter Tuning for BLASE","title":"Assigning bulk RNA-seq to pseudotime","text":"using BLASE, can good idea tune number genes bins used. genes can lead poor fitting many genes can lead slower execution, without benefit, less informative genes still need checked. bins can oversimplify trajectory many bins can lead cells available reliable values. can using following commands, provided BLASE:  looks like 80 genes 10 bins give us good specificity, let’s double check. non trivial dataset, may take repetition. ignore 5 bin result might enough resolution - depends dataset. general, bins reduce specificity bin similar cell composition. general, aim many bins clusters.","code":"res <- blase::find_best_params(     sce,     genelist,     split_by = \"pseudotime_range\",     pseudotime_slot = \"pseudotime\" ) blase::plot_find_best_params_results(res)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/assign-bulk-to-pseudotime.html","id":"inspect-bin-choice","dir":"Articles","previous_headings":"Parameter Tuning for BLASE","what":"Inspect Bin Choice","title":"Assigning bulk RNA-seq to pseudotime","text":"Now can check good fit showing bins SC dataset map using genes. Ideally, bin specific, high “worst specificity”.","code":"blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 10) genes(blase_data) <- genelist[1:80] evaluate_parameters(blase_data, make_plot = TRUE) #> [1]  0.02470000  0.08541667 83.33333333"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/assign-bulk-to-pseudotime.html","id":"inspect-genes-choice","dir":"Articles","previous_headings":"Parameter Tuning for BLASE","what":"Inspect Genes Choice","title":"Assigning bulk RNA-seq to pseudotime","text":"can also see genes change pseudotime, plotting expression top genes changing pseudotime bin.","code":"evaluate_top_n_genes(blase_data)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/assign-bulk-to-pseudotime.html","id":"mapping-bulk-samples-to-sc-with-blase","dir":"Articles","previous_headings":"","what":"Mapping Bulk Samples to SC with BLASE","title":"Assigning bulk RNA-seq to pseudotime","text":"’re happy, now can try map bulk sample onto single cell. ’ll pseudobulking cell types SingleCellExperiment reality use real bulk dataset. See articles examples. can also generate result map_all_best_bins, can also allow parallelisation process large numbers bulks:","code":"bulks_df <- DataFrame(row.names = rownames(counts(sce))) for (type in unique(sce$celltype)) {     bulks_df <- cbind(         bulks_df,         rowSums(normcounts(subset(sce, , celltype == type)))     ) }  colnames(bulks_df) <- unique(sce$celltype)  multipotent_progenitors_result <- map_best_bin(     blase_data, \"Multipotent progenitors\", bulks_df ) multipotent_progenitors_result #> MappingResult for 'Multipotent progenitors': best_bin=1 correlation=0.988162212845757 top_2_distance=0.2343 #>   Confident Result: TRUE (next max upper  0.829316633243031 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations basophils_result <- map_best_bin(blase_data, \"Basophils\", bulks_df) basophils_result #> MappingResult for 'Basophils': best_bin=3 correlation=0.95337552742616 top_2_distance=0.022 #>   Confident Result: FALSE (next max upper  0.977367606360524 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations neutrophils_result <- map_best_bin(blase_data, \"Neutrophils\", bulks_df) neutrophils_result #> MappingResult for 'Neutrophils': best_bin=6 correlation=0.973206751054852 top_2_distance=0.1042 #>   Confident Result: TRUE (next max upper  0.921075160371052 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations map_all_best_bins(blase_data, bulks_df) #> [[1]] #> MappingResult for 'Multipotent progenitors': best_bin=1 correlation=0.988162212845757 top_2_distance=0.2343 #>   Confident Result: TRUE (next max upper  0.834154351395731 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations #>  #> [[2]] #> MappingResult for 'Monocytes': best_bin=5 correlation=0.973417721518987 top_2_distance=0.0072 #>   Confident Result: FALSE (next max upper  0.978561962729714 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations #>  #> [[3]] #> MappingResult for 'Neutrophils': best_bin=6 correlation=0.973206751054852 top_2_distance=0.1042 #>   Confident Result: TRUE (next max upper  0.921966436420354 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations #>  #> [[4]] #> MappingResult for 'Basophils': best_bin=3 correlation=0.95337552742616 top_2_distance=0.022 #>   Confident Result: FALSE (next max upper  0.975505607432781 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations #>  #> [[5]] #> MappingResult for 'Megakaryocytes': best_bin=2 correlation=0.796038443506798 top_2_distance=0.0292 #>   Confident Result: FALSE (next max upper  0.833517037592927 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations #>  #> [[6]] #> MappingResult for 'GMP': best_bin=2 correlation=0.921401781528364 top_2_distance=0.0278 #>   Confident Result: FALSE (next max upper  0.962190244989386 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/assign-bulk-to-pseudotime.html","id":"plotting-heatmap-of-mappings","dir":"Articles","previous_headings":"Mapping Bulk Samples to SC with BLASE","what":"Plotting Heatmap of Mappings","title":"Assigning bulk RNA-seq to pseudotime","text":"see well plotted differences cell types, can plot heatmap results. neutrophils Erythrocytes confidently mapped, GMP population doesn’t map well.","code":"plot_mapping_result_heatmap(list(     multipotent_progenitors_result,     basophils_result,     neutrophils_result ))"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/assign-bulk-to-pseudotime.html","id":"plotting-detailed-correlation-maps","dir":"Articles","previous_headings":"Mapping Bulk Samples to SC with BLASE","what":"Plotting Detailed Correlation Maps","title":"Assigning bulk RNA-seq to pseudotime","text":"look Basophils mapping, can plot correlation bin. lower boundary best selection (bin 3) higher higher bounds next-best bin (bin 4), BLASE makes confident call.","code":"plot_mapping_result_corr(basophils_result)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/assign-bulk-to-pseudotime.html","id":"plotting-summary-plots-of-mappings","dir":"Articles","previous_headings":"Mapping Bulk Samples to SC with BLASE","what":"Plotting Summary Plots of Mappings","title":"Assigning bulk RNA-seq to pseudotime","text":"Now can detailed plotting bins mapped onto Single Cell data, cell type proportions expect , need add pseudotime bins metadata SCE. can see true proportions cell types mapped bin indeed map cell type expect.  view bin population chart full, use:","code":"binned_sce <- assign_pseudotime_bins(     sce,     split_by = \"pseudotime_range\",     n_bins = 10,     pseudotime_slot = \"pseudotime\" ) plot_mapping_result(     binned_sce,     multipotent_progenitors_result,     group_by_slot = \"celltype\" ) plot_bin_population(binned_sce, 1, group_by_slot = \"celltype\")"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/articles/assign-bulk-to-pseudotime.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Assigning bulk RNA-seq to pseudotime","text":"","code":"sessionInfo() #> R version 4.5.0 (2025-04-11) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> Random number generation: #>  RNG:     Mersenne-Twister  #>  Normal:  Inversion  #>  Sample:  Rounding  #>   #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ami_0.2.1                   BiocParallel_1.42.0         #>  [3] scater_1.36.0               ggplot2_3.5.2               #>  [5] scran_1.36.0                scuttle_1.18.0              #>  [7] slingshot_2.16.0            TrajectoryUtils_1.16.0      #>  [9] princurve_2.1.6             tradeSeq_1.22.0             #> [11] SingleCellExperiment_1.30.0 SummarizedExperiment_1.38.1 #> [13] Biobase_2.68.0              GenomicRanges_1.60.0        #> [15] GenomeInfoDb_1.44.0         IRanges_2.42.0              #> [17] S4Vectors_0.46.0            BiocGenerics_0.54.0         #> [19] generics_0.1.3              MatrixGenerics_1.20.0       #> [21] matrixStats_1.5.0           blase_0.99.0                #>  #> loaded via a namespace (and not attached): #>  [1] pbapply_1.7-2           gridExtra_2.3           rlang_1.1.6             #>  [4] magrittr_2.0.3          compiler_4.5.0          mgcv_1.9-1              #>  [7] systemfonts_1.2.3       vctrs_0.6.5             pkgconfig_2.0.3         #> [10] crayon_1.5.3            fastmap_1.2.0           XVector_0.48.0          #> [13] labeling_0.4.3          rmarkdown_2.29          UCSC.utils_1.4.0        #> [16] ggbeeswarm_0.7.2        ragg_1.4.0              xfun_0.52               #> [19] bluster_1.18.0          cachem_1.1.0            beachmat_2.24.0         #> [22] jsonlite_2.0.0          DelayedArray_0.34.1     irlba_2.3.5.1           #> [25] parallel_4.5.0          cluster_2.1.8.1         R6_2.6.1                #> [28] bslib_0.9.0             RColorBrewer_1.1-3      limma_3.64.0            #> [31] boot_1.3-31             jquerylib_0.1.4         Rcpp_1.0.14             #> [34] knitr_1.50              FNN_1.1.4.1             Matrix_1.7-3            #> [37] splines_4.5.0           igraph_2.1.4            tidyselect_1.2.1        #> [40] abind_1.4-8             yaml_2.3.10             viridis_0.6.5           #> [43] codetools_0.2-20        lattice_0.22-6          tibble_3.2.1            #> [46] withr_3.0.2             evaluate_1.0.3          desc_1.4.3              #> [49] pillar_1.10.2           scales_1.4.0            glue_1.8.0              #> [52] metapod_1.16.0          tools_4.5.0             BiocNeighbors_2.2.0     #> [55] ScaledMatrix_1.16.0     locfit_1.5-9.12         fs_1.6.6                #> [58] cowplot_1.1.3           grid_4.5.0              edgeR_4.6.1             #> [61] nlme_3.1-168            GenomeInfoDbData_1.2.14 beeswarm_0.4.0          #> [64] BiocSingular_1.24.0     vipor_0.4.7             cli_3.6.5               #> [67] rsvd_1.0.5              textshaping_1.0.1       S4Arrays_1.8.0          #> [70] viridisLite_0.4.2       dplyr_1.1.4             uwot_0.2.3              #> [73] gtable_0.3.6            sass_0.4.10             digest_0.6.37           #> [76] SparseArray_1.8.0       ggrepel_0.9.6           dqrng_0.4.1             #> [79] htmlwidgets_1.6.4       farver_2.1.2            htmltools_0.5.8.1       #> [82] pkgdown_2.1.2           lifecycle_1.0.4         httr_1.4.7              #> [85] statmod_1.5.0"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McCluskey. Author, maintainer. Toby Kettlewell. Author. Thomas Otto. Author, thesis advisor.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McCluskey , Kettlewell T, Otto T (2025). blase: Bulk Linking Analysis Single-cell Experiments. R package version 0.99.0, https://andrewmccluskey-uog.github.io/BLASE/.","code":"@Manual{,   title = {blase: Bulk Linking Analysis for Single-cell Experiments},   author = {Andrew McCluskey and Toby Kettlewell and Thomas Otto},   year = {2025},   note = {R package version 0.99.0},   url = {https://andrewmccluskey-uog.github.io/BLASE/}, }"},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/BLASE/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Bulk Linking Analysis for Single-cell Experiments","text":"goal BLASE enable map bulk RNA-seq samples onto Single Cell RNA-seq analysis, emphasis trajectories (can work continuous variable across data!). provides: Configurable discretisation pseudotime “pseudotime bins” fourier method identifying DE genes, particularly effective Plasmodium sp., introduced Bozdech et al. Mapping bulk RNA-seq onto bins. Plotting functions","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bulk Linking Analysis for Single-cell Experiments","text":"can install development version BLASE GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"andrewmccluskey-uog/BLASE\")"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/index.html","id":"getting-started--usage-notes","dir":"","previous_headings":"","what":"Getting Started & Usage Notes","title":"Bulk Linking Analysis for Single-cell Experiments","text":"Take look Vignette use Single Cell Experiment. Selection genes important BLASE, base predictions expression genes . genes omitted list ignored. Selecting genes reduces BLASE’s ability dissect different stages . Conversely, number genes great (.e. introducing genes expression changes biological process) introduces noise, reducing BLASE’s precision. Ideally, genes show substantial change pseudotime trajectory single-cell reference one wish map . cases organisms many genes highly expressed period biological process highly regulated way (example, Plasmodium spp.), recommend using every gene genome. organisms show pattern, human mouse, recommend using subset genes, selected either TradeSeq BLASE’s gene peakedness selection. order make process easier users BLASE, provide function get_top_n_genes() enables simple selection certain number genes associationTest result generated TradeSeq package, convenience functions calculating gene peakedness described . reference scRNA-seq trajectory unique fingerprint, defined genes activated course process. optimally use BLASE, important consider many genes meaningfully contribute fingerprint process, well many bins used balance accuracy precision. selecting number genes use, important select genes can used meaningfully describe trajectory. genes risks useful signal lost, however many genes may introduce unhelpful noise. selecting number bins use, trade-using small number larger bins, can give accurate (.e. correct call) readings, larger number bins gives desired precision (.e. granularity). BLASE uses discretised pseudotime value, refer “pseudotime bins.” BLASE calculate bins creating BlaseData object, using assign_pseudotime_bins() function add metadata SingleCellExperiment Seurat object. BLASE algorithm relies heavily bins, important reliable consistent method split . Depending dataset, different methods may required ensure high-quality mappings. found using pseudotime_range splitting method works best datasets. pseudotime range bin assignment method fast, (assuming correctness pseudotime calculation) implies bin constant transcriptional distance , given assumption method generate pseudotime accounts . However, method may perform poorly reference dataset contains stretches pseudotime cells . case, splitting cells may better option. assigning bins contain constant number cells, pseudotime range covered group constant, may less useful mapping purposes, can overcome issues pseudotime range method. BLASE’s main focus mapping RNA-seq samples discretised pseudotime scRNA-seq dataset. Unlike tools (e.g. CIBERSORTx, DWLS, MuSiC) estimate proportion cells per reference group (typically cell type), BLASE calculates score well reference group (BLASE, typically pseudotime bin) matches sample, giving single “best match,” correlations bins. values produced BLASE necessarily treated proportions population bulk sample.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/BLASE/index.html","id":"automatic-style-corrections","dir":"","previous_headings":"Development","what":"Automatic Style Corrections","title":"Bulk Linking Analysis for Single-cell Experiments","text":"","code":"styler::style_pkg(transformers = styler::tidyverse_style(indent_by = 4))"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/index.html","id":"quality-checks","dir":"","previous_headings":"Development","what":"Quality Checks","title":"Bulk Linking Analysis for Single-cell Experiments","text":"subscribe R cmd check BiocCheck guides:","code":"devtools::check()  BiocCheck(`no-check-deprecated`=TRUE)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/BlaseData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Blase Data Object — BlaseData-class","title":"Blase Data Object — BlaseData-class","text":"creation details, see .BlaseData()","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/BlaseData-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blase Data Object — BlaseData-class","text":"BlaseData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/BlaseData-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Blase Data Object — BlaseData-class","text":"pseudobulk_bins list data.frames. item normalised count matrix representing bin, column cell bin row gene. bins list. list bin names timepoint. genes list. list genes selected discriminating timepoints.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/BlaseData-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blase Data Object — BlaseData-class","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol = 10, nrow = 10) sce <- SingleCellExperiment::SingleCellExperiment(     assays = list(normcounts = counts) ) sce$pseudotime <- seq_len(10) data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 3) genes(data) <- as.character(seq_len(10))  genes(data) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/MappingResult-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Blase Mapping Result — MappingResult-class","title":"Blase Mapping Result — MappingResult-class","text":"Created map_best_bin()","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/MappingResult-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blase Mapping Result — MappingResult-class","text":"MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/MappingResult-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Blase Mapping Result — MappingResult-class","text":"bulk_name name bulk sample mapped. best_bin bin best matched bulk sample. best_correlation spearman's rho test geneset winning bin bulk. top_2_distance absolute difference best second best mapping buckets. Higher indicates less doubtful mapping. confident_mapping TRUE mapped bin's lower bound higher maximum upper bound bins. history dataframe correlation score confidence bounds bin. bootstrap_iterations number iterations used bootstrap.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/MappingResult-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blase Mapping Result — MappingResult-class","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/PRIVATE_.ci.html","id":null,"dir":"Reference","previous_headings":"","what":".ci — PRIVATE_.ci","title":".ci — PRIVATE_.ci","text":"Originally implemented RVAidemoire Version 0.9-83-7.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/PRIVATE_.ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".ci — PRIVATE_.ci","text":"","code":"PRIVATE_.ci(x, conf.level = 0.95)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/PRIVATE_.ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".ci — PRIVATE_.ci","text":"x data calculate ci conf.level confidence level calculate","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/PRIVATE_.ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".ci — PRIVATE_.ci","text":"confidence interval results","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/PRIVATE_spearman.ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence interval of a Spearman's rank correlation coefficient — PRIVATE_spearman.ci","title":"Confidence interval of a Spearman's rank correlation coefficient — PRIVATE_spearman.ci","text":"Computes confidence interval Spearman's rank correlation coefficient bootstraping. Originally implemented RVAidemoire Version 0.9-83-7.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/PRIVATE_spearman.ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence interval of a Spearman's rank correlation coefficient — PRIVATE_spearman.ci","text":"","code":"PRIVATE_spearman.ci(var1, var2, nrep = 1000, conf.level = 0.95)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/PRIVATE_spearman.ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence interval of a Spearman's rank correlation coefficient — PRIVATE_spearman.ci","text":"var1 numeric vector (first variable). var2 nuermic verctor (second variable). nrep number replicates bootstrapping. conf.level confidence level interval.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/PRIVATE_spearman.ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence interval of a Spearman's rank correlation coefficient — PRIVATE_spearman.ci","text":"description method name test. data.name character string giving name(s) data. conf.level confidence level. rep number replicates. estimate Spearman's rank correlation coefficient. conf.int confidence interval.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/as.BlaseData.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to BlaseData — as.BlaseData","title":"Conversion to BlaseData — as.BlaseData","text":"Conversion BlaseData","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/as.BlaseData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to BlaseData — as.BlaseData","text":"","code":"as.BlaseData(x, ...)  # S4 method for class 'SingleCellExperiment' as.BlaseData(   x,   pseudotime_slot = \"slingPseudotime_1\",   n_bins = 20,   split_by = \"pseudotime_range\" )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/as.BlaseData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to BlaseData — as.BlaseData","text":"x object take counts ... additional arguments passed object-specific methods. pseudotime_slot SingleCellExperiment::SingleCellExperiment slot containing pseudotime values cell passed assign_pseudotime_bins(). n_bins number bins create, passed assign_pseudotime_bins(). split_by split_by method passed assign_pseudotime_bins().","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/as.BlaseData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion to BlaseData — as.BlaseData","text":"BlaseData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/as.BlaseData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion to BlaseData — as.BlaseData","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol = 10, nrow = 10) sce <- SingleCellExperiment::SingleCellExperiment(     assays = list(normcounts = counts) ) sce$pseudotime <- seq_len(10) data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 3) genes(data) <- as.character(seq_len(10))  genes(data) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/assign_pseudotime_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"Assign Pseudotime Bins source object's metadata","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/assign_pseudotime_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"","code":"assign_pseudotime_bins(   x,   split_by = \"pseudotime_range\",   n_bins = 20,   pseudotime_slot = \"slingPseudotime_1\",   ... )  # S4 method for class 'SingleCellExperiment' assign_pseudotime_bins(   x,   split_by,   n_bins,   pseudotime_slot = \"slingPseudotime_1\" )  # S4 method for class 'data.frame' assign_pseudotime_bins(   x,   split_by,   n_bins,   pseudotime_slot = \"slingPseudotime_1\" )  # S4 method for class 'Seurat' assign_pseudotime_bins(   x,   split_by,   n_bins,   pseudotime_slot = \"slingPseudotime_1\" )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/assign_pseudotime_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"x object add metadata . split_by technique used split bins. default pseudotime_range picks bin cell based constant range pseudotime. cells picks bin cell based even number cells per bin. n_bins number bins split cells . pseudotime_slot SingleCellExperiment::SingleCellExperiment slot containing pseudotime values cell. ... arguments passed functions. Unused.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/assign_pseudotime_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"copy x cells annotated pseudotime bin.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/assign_pseudotime_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/calculate_gene_peakedness.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate_gene_peakedness — calculate_gene_peakedness","title":"calculate_gene_peakedness — calculate_gene_peakedness","text":"Calculate peakedness gene. power ratio mean reads 5% either side smoothed peak gene's expression pseudotime mean reads outside .","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/calculate_gene_peakedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate_gene_peakedness — calculate_gene_peakedness","text":"","code":"calculate_gene_peakedness(   sce,   window_pct = 10,   pseudotime_slot = \"slingPseudotime_1\",   knots = 10,   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/calculate_gene_peakedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate_gene_peakedness — calculate_gene_peakedness","text":"sce SCE calculations . window_pct size window consider, percentage maximum pseudotime value. pseudotime_slot slot SCE object containing pseudotime knots number knots use fitting GAM BPPARAM BiocParallel parameter parallelisation Defaults BiocParallel::SerialParam.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/calculate_gene_peakedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate_gene_peakedness — calculate_gene_peakedness","text":"Dataframe, row gene, following columns: mean_expression_in_window, mean_expression_out_window, ratio","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/calculate_gene_peakedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate_gene_peakedness — calculate_gene_peakedness","text":"","code":"ncells <- 70 ngenes <- 100 # Each gene should have mean around its gene number counts = c() for (i in seq_len(ngenes)) {   counts = c(counts, dnorm(seq_len(ncells), mean=(ncells/i), sd=1)) }  counts_matrix <- matrix(   counts,   ncol = ncells,   nrow = ngenes ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(   counts = counts_matrix * 3,   normcounts = counts_matrix,   logcounts = log(counts_matrix) )) colnames(sce) <- paste0(\"cell\", seq_len(ncells)) rownames(sce) <- paste0(\"gene\", seq_len(ngenes)) sce$cell_type <- c(   rep(\"celltype_1\", ncells / 2),   rep(\"celltype_2\", ncells / 2) )  sce$pseudotime <- seq_len(ncells) genelist <- rownames(sce)  # calculate_gene_peakedness gene_peakedness <- calculate_gene_peakedness(   sce, pseudotime_slot=\"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully  head(gene_peakedness) #>      gene peak_pseudotime mean_in_window mean_out_window        ratio #> 100 gene1            70.0   1.060616e-24     0.037863935 2.801125e-23 #> 52  gene2            36.4   4.680824e-02     0.029379725 1.593216e+00 #> 28  gene3            19.6   4.327921e-02     0.014445463 2.996042e+00 #> 21  gene4            14.7   4.563543e-02     0.006531685 6.986777e+00 #> 1   gene5             0.7   9.973557e-02     0.004076218 2.446767e+01 #> 7   gene6             4.9   8.791281e-02     0.000187520 4.688183e+02 #>     window_start window_end deviance_explained #> 100         66.5       73.5         0.02680534 #> 52          32.9       39.9         0.01912609 #> 28          16.1       23.1         0.04505152 #> 21          11.2       18.2         0.58156238 #> 1           -2.8        4.2         0.21032129 #> 7            1.4        8.4         0.14902599  # plot_gene_peakedness plot_gene_peakedness(sce, gene_peakedness, \"gene20\",   pseudotime_slot = \"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully   # smooth_gene smoothed_gene20 <- smooth_gene(   sce, \"gene20\", pseudotime_slot = \"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully head(smoothed_gene20) #>            1            2            3            4            5            6  #> 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16   # Select best spread of genes genes_to_use <- gene_peakedness_spread_selection(sce, gene_peakedness,   genes_per_bin=2, n_gene_bins=1, pseudotime_slot=\"pseudotime\")  print(genes_to_use) #> [1] \"gene30\" \"gene40\" plot(x=gene_peakedness[   gene_peakedness$gene %in% genes_to_use,\"peak_pseudotime\"  ],  y=gene_peakedness[gene_peakedness$gene %in% genes_to_use,\"ratio\"])"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/evaluate_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"use n_bins n_genes implied sce pseudotime_bins_top_n_genes_df parameters return quality metrics optional chart.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/evaluate_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"","code":"evaluate_parameters(   blase_data,   bootstrap_iterations = 200,   BPPARAM = BiocParallel::SerialParam(),   make_plot = FALSE,   plot_columns = 4 )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/evaluate_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"blase_data BlaseData object use. bootstrap_iterations Iterations bootstrapping calculating confident mappings. BPPARAM BiocParallel configuration. Defaults SerialParam. make_plot Whether render plot showing correlations pseudobulk bin try map given bin. plot_columns many columns use plot.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/evaluate_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"vector length 3: \"worst top 2 distance\" containing lowest difference absolute values top 2 correlated bins bin. Higher better differentiating. \"mean top 2 distance\" containing mean top 2 distance across entire set genes bins. Higher better differentiation, matter less worst value. \"confident_mapping_pct\" - percent mappings setup annotated confident BLASE","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/evaluate_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"","code":"ncells <- 70 ngenes <- 100 counts_matrix <- matrix(     c(seq_len(3500) / 10, seq_len(3500) / 5),     ncol = ncells,     nrow = ngenes ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(ncells) rownames(sce) <- as.character(seq_len(ngenes)) sce$cell_type <- c(     rep(\"celltype_1\", ncells / 2),     rep(\"celltype_2\", ncells / 2) )  sce$pseudotime <- seq_len(ncells) genelist <- as.character(seq_len(ngenes))  # Evaluating created BlaseData blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 10) genes(blase_data) <- genelist[1:20]  # Check convexity of parameters evaluate_parameters(blase_data, make_plot = TRUE) #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:1 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:1 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:1 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:1 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:1 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:1 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:1 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:1 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:1 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:1 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:2 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:2 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:2 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:2 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:2 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:2 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:2 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:2 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:2 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:2 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:3 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:3 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:3 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:3 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:3 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:3 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:3 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:3 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:3 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:3 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:4 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:4 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:4 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:4 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:4 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:4 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:4 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:4 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:4 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:4 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:5 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:5 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:5 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:5 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:5 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:5 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:5 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:5 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:5 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:5 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:6 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:6 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:6 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:6 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:6 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:6 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:6 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:6 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:6 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:6 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:7 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:7 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:7 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:7 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:7 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:7 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:7 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:7 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:7 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:7 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:8 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:8 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:8 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:8 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:8 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:8 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:8 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:8 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:8 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:8 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:9 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:9 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:9 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:9 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:9 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:9 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:9 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:9 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:9 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:9 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:10 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:10 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:10 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:10 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:10 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:10 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:10 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:10 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:10 #> Warning: Bulk ID matches a gene, if this fails then check you areusing bulk name and not geneIds:10  #> [1] 0 0 0"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/evaluate_top_n_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Top Genes — evaluate_top_n_genes","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"Shows plots bins expression top n genes. designed help identify selected genes vary pseudotime chosen bins exist . Uses normcounts SCE.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/evaluate_top_n_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"","code":"evaluate_top_n_genes(blase_data, n_genes_to_plot = 16, plot_columns = 4)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/evaluate_top_n_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"blase_data BlaseData get bins expression . n_genes_to_plot number genes plot. plot_columns number columns plot grid . Best divisor n_genes_to_plot.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/evaluate_top_n_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"plot showing normalised expression top genes pseudotime bins.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/evaluate_top_n_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"","code":"ncells <- 70 ngenes <- 100 counts_matrix <- matrix(     c(seq_len(3500) / 10, seq_len(3500) / 5),     ncol = ncells,     nrow = ngenes ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- paste0(\"cell\", seq_len(ncells)) rownames(sce) <- paste0(\"gene\", seq_len(ngenes)) sce$cell_type <- c(     rep(\"celltype_1\", ncells / 2),     rep(\"celltype_2\", ncells / 2) )  sce$pseudotime <- seq_len(ncells) genelist <- rownames(sce)  # Evaluating created BlaseData blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 10) genes(blase_data) <- genelist[1:20]  # Check gene expression over pseudotime evaluate_top_n_genes(blase_data)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/find_best_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the Best Parameters For Your Dataset — find_best_params","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"Identify Best Parameters Dataset","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/find_best_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"","code":"find_best_params(   x,   genelist,   bins_count_range = c(5, 10, 20, 40),   gene_count_range = c(10, 20, 40, 80),   bootstrap_iterations = 200,   BPPARAM = BiocParallel::SerialParam(),   ... )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/find_best_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"x object create `BlaseData“ genelist list genes use (ordered descending goodness) bins_count_range n_bins list try gene_count_range n_genes list try bootstrap_iterations Iterations bootstrapping calculating confident mappings. BPPARAM BiocParallel configuration. Defaults SerialParam. ... params passed child functions, see .BlaseData()","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/find_best_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"dataframe results. bin_count: bin count attempt gene_count: top n genes use attempt min_convexity: worst convexity parameters mean_convexity: mean convexity parameters confident_mapping_pct: percent bins confidently mapped parameters. value low, likely real use, results confidently mapped.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/find_best_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"","code":"ncells <- 70 ngenes <- 100 counts_matrix <- matrix(   c(seq_len(3500) / 10, seq_len(3500) / 5),   ncol = ncells,   nrow = ngenes ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(   normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- paste0(\"cell\", seq_len(ncells)) rownames(sce) <- paste0(\"gene\", seq_len(ngenes)) sce$cell_type <- c(   rep(\"celltype_1\", ncells / 2),   rep(\"celltype_2\", ncells / 2) )  sce$pseudotime <- seq_len(ncells) genelist <- rownames(sce)  # Finding the best params for the BlaseData best_params <- find_best_params(   sce, genelist,   bins_count_range = c(2, 3),   gene_count_range = c(20, 50),   pseudotime_slot = \"pseudotime\",   split_by = \"pseudotime_range\" ) best_params #>   column_label bin_count gene_count min_convexity mean_convexity #> 1            1         2         20             0              0 #> 2            2         2         50             0              0 #> 3            1         3         20             0              0 #> 4            2         3         50             0              0 #>   confident_mapping_pct #> 1                     0 #> 2                     0 #> 3                     0 #> 4                     0 plot_find_best_params_results(best_params)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/gene_peakedness_spread_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Peakedness Spread Selection — gene_peakedness_spread_selection","title":"Gene Peakedness Spread Selection — gene_peakedness_spread_selection","text":"function selects genes peaks evenly distributed pseudotime trajectory. splitting pseudotime evenly spread regions pseudotime, selecting genes highest peakedness ratio peak inside region pseudotime. number regions genes per region can tuned.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/gene_peakedness_spread_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Peakedness Spread Selection — gene_peakedness_spread_selection","text":"","code":"gene_peakedness_spread_selection(   sce,   gene_peakedness_df,   genes_per_bin = 10,   n_gene_bins = 10,   pseudotime_slot = \"slingPseudotime_1\" )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/gene_peakedness_spread_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene Peakedness Spread Selection — gene_peakedness_spread_selection","text":"sce SCE obtain pseudotime values gene_peakedness_df Gene peakedness DF generated calculate_gene_peakedness() genes_per_bin Number genes select per gene bin. n_gene_bins Number gene bins create pseudotime. recommend around 1-2x number pseudotime bins want use. pseudotime_slot pseudotime slot SCE.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/gene_peakedness_spread_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene Peakedness Spread Selection — gene_peakedness_spread_selection","text":"list gene IDs highest ratios across regions pseudotime.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/gene_peakedness_spread_selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene Peakedness Spread Selection — gene_peakedness_spread_selection","text":"","code":"ncells <- 70 ngenes <- 100 # Each gene should have mean around its gene number counts = c() for (i in seq_len(ngenes)) {   counts = c(counts, dnorm(seq_len(ncells), mean=(ncells/i), sd=1)) }  counts_matrix <- matrix(   counts,   ncol = ncells,   nrow = ngenes ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(   counts = counts_matrix * 3,   normcounts = counts_matrix,   logcounts = log(counts_matrix) )) colnames(sce) <- paste0(\"cell\", seq_len(ncells)) rownames(sce) <- paste0(\"gene\", seq_len(ngenes)) sce$cell_type <- c(   rep(\"celltype_1\", ncells / 2),   rep(\"celltype_2\", ncells / 2) )  sce$pseudotime <- seq_len(ncells) genelist <- rownames(sce)  # calculate_gene_peakedness gene_peakedness <- calculate_gene_peakedness(   sce, pseudotime_slot=\"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully  head(gene_peakedness) #>      gene peak_pseudotime mean_in_window mean_out_window        ratio #> 100 gene1            70.0   1.060616e-24     0.037863935 2.801125e-23 #> 52  gene2            36.4   4.680824e-02     0.029379725 1.593216e+00 #> 28  gene3            19.6   4.327921e-02     0.014445463 2.996042e+00 #> 21  gene4            14.7   4.563543e-02     0.006531685 6.986777e+00 #> 1   gene5             0.7   9.973557e-02     0.004076218 2.446767e+01 #> 7   gene6             4.9   8.791281e-02     0.000187520 4.688183e+02 #>     window_start window_end deviance_explained #> 100         66.5       73.5         0.02680534 #> 52          32.9       39.9         0.01912609 #> 28          16.1       23.1         0.04505152 #> 21          11.2       18.2         0.58156238 #> 1           -2.8        4.2         0.21032129 #> 7            1.4        8.4         0.14902599  # plot_gene_peakedness plot_gene_peakedness(sce, gene_peakedness, \"gene20\",   pseudotime_slot = \"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully   # smooth_gene smoothed_gene20 <- smooth_gene(   sce, \"gene20\", pseudotime_slot = \"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully head(smoothed_gene20) #>            1            2            3            4            5            6  #> 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16   # Select best spread of genes genes_to_use <- gene_peakedness_spread_selection(sce, gene_peakedness,   genes_per_bin=2, n_gene_bins=1, pseudotime_slot=\"pseudotime\")  print(genes_to_use) #> [1] \"gene30\" \"gene40\" plot(x=gene_peakedness[   gene_peakedness$gene %in% genes_to_use,\"peak_pseudotime\"  ],  y=gene_peakedness[gene_peakedness$gene %in% genes_to_use,\"ratio\"])"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/genes-getter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genes of a BLASE Data object. — genes","title":"Get genes of a BLASE Data object. — genes","text":"Get genes BLASE Data object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/genes-getter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genes of a BLASE Data object. — genes","text":"","code":"genes(x)  # S4 method for class 'BlaseData' genes(x)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/genes-getter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genes of a BLASE Data object. — genes","text":"x BlaseData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/genes-getter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genes of a BLASE Data object. — genes","text":"vector genes BLASE object use mappings.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/genes-getter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genes of a BLASE Data object. — genes","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol = 10, nrow = 10) sce <- SingleCellExperiment::SingleCellExperiment(     assays = list(normcounts = counts) ) sce$pseudotime <- seq_len(10) data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 3) genes(data) <- as.character(seq_len(10))  genes(data) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/genes-setter.html","id":null,"dir":"Reference","previous_headings":"","what":"Set genes of a BLASE Data object. — genes<-","title":"Set genes of a BLASE Data object. — genes<-","text":"Set genes BLASE Data object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/genes-setter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set genes of a BLASE Data object. — genes<-","text":"","code":"genes(x) <- value  # S4 method for class 'BlaseData' genes(x) <- value"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/genes-setter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set genes of a BLASE Data object. — genes<-","text":"x BlaseData object value new value genes slot, vector strings","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/genes-setter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set genes of a BLASE Data object. — genes<-","text":"Nothing","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/genes-setter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set genes of a BLASE Data object. — genes<-","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol = 10, nrow = 10) sce <- SingleCellExperiment::SingleCellExperiment(     assays = list(normcounts = counts) ) sce$pseudotime <- seq_len(10) data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 3) genes(data) <- as.character(seq_len(10))  genes(data) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/get_bins_as_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"function try create pseudobulked count matrix bins. replicate cells, discounted. one exists, sample twice create pseudobulks.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/get_bins_as_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"","code":"get_bins_as_bulk(   pseudotime_sce,   min_cells_for_bulk = 50,   replicate_slot = \"replicate\" )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/get_bins_as_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"pseudotime_sce Single Cell Experiment object get bins min_cells_for_bulk minimum cells look per replicate bin. replicate_slot slot Single Cell Experiment contains replicate information","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/get_bins_as_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"dataframe pseudobulk counts matrix.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/get_bins_as_bulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"","code":"library(SingleCellExperiment, quietly = TRUE) #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #>  #> Attaching package: ‘generics’ #> The following objects are masked from ‘package:base’: #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, is.unsorted, lapply, #>     mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     rank, rbind, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians library(blase) counts <- matrix(rpois(1000, lambda = 10), ncol = 100, nrow = 10) sce <- SingleCellExperiment::SingleCellExperiment(     assays = list(normcounts = counts, counts = counts / 2) ) sce$pseudotime <- seq_len(100) colnames(sce) <- seq_len(100) rownames(sce) <- as.character(seq_len(10)) sce <- assign_pseudotime_bins(sce,     n_bins = 5,     pseudotime_slot = \"pseudotime\", split_by = \"cells\" ) sce$replicate <- rep(c(1, 2), 50) result <- get_bins_as_bulk(     sce,     min_cells_for_bulk = 1,     replicate_slot = \"replicate\" ) result #>    bin_1_rep_1 bin_1_rep_2 bin_2_rep_1 bin_2_rep_2 bin_3_rep_1 bin_3_rep_2 #> 1         47.0        51.5        50.0        52.0        43.5        54.0 #> 10        51.0        50.5        49.0        50.5        45.0        42.0 #> 2         48.5        43.5        48.0        48.0        50.5        56.5 #> 3         46.5        45.0        53.0        47.0        49.5        44.5 #> 4         52.0        52.0        53.0        49.0        58.5        57.5 #> 5         54.5        57.0        58.5        55.5        60.0        49.0 #> 6         52.0        46.0        49.0        50.5        41.5        56.0 #> 7         51.5        54.0        49.5        56.5        47.0        47.5 #> 8         47.5        39.0        45.0        54.0        51.0        50.5 #> 9         46.5        43.0        45.0        45.0        54.0        52.0 #>    bin_4_rep_1 bin_4_rep_2 bin_5_rep_1 bin_5_rep_2 #> 1         56.5        52.5        49.5        38.0 #> 10        48.5        47.5        54.5        45.0 #> 2         50.0        57.5        44.5        51.5 #> 3         48.5        45.0        53.5        53.0 #> 4         53.0        45.5        51.0        52.5 #> 5         52.5        50.0        49.5        50.5 #> 6         53.0        50.0        49.5        50.0 #> 7         45.5        55.0        51.0        51.0 #> 8         54.5        52.0        54.0        54.0 #> 9         36.5        50.5        45.5        50.0"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/get_top_n_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Top Genes From An AssociationTestResult — get_top_n_genes","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"Pulls genes highest wald statistic association test result, p value cutoff.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/get_top_n_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"","code":"get_top_n_genes(   association_test_results,   n_genes = 40,   lineage = NA,   p_cutoff = 0.05 )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/get_top_n_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"association_test_results association test results data frame take genes . n_genes number genes return. Defaults 40. lineage Lineage use. Defaults NA, assumes test run Lineages=False. p_cutoff P value cutoff use. Defaults less 0.05.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/get_top_n_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"vector names genes best describe lineage's trajectory.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/get_top_n_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"","code":"assoRes <- data.frame(     row.names = c(\"A\", \"B\", \"C\", \"D\"),     waldStat = c(25, 50, 100, 10),     pvalue = c(0.01, 0.5, 0.005, 0.13) ) get_top_n_genes(assoRes, n_genes = 2) #> [1] \"C\" \"A\""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/map_all_best_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Map many bulk samples in the same dataframe — map_all_best_bins","title":"Map many bulk samples in the same dataframe — map_all_best_bins","text":"Map many bulk samples dataframe","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/map_all_best_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map many bulk samples in the same dataframe — map_all_best_bins","text":"","code":"map_all_best_bins(   blase_data,   bulk_data,   bootstrap_iterations = 200,   confidence_level = 0.9,   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/map_all_best_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map many bulk samples in the same dataframe — map_all_best_bins","text":"blase_data BlaseData holding bins. bulk_data whole bulk read matrix dataframe. row represent gene, column sample. bootstrap_iterations number bootstrapping iterations run. confidence_level confidence interval calculate mappings. Defaults 90%. BPPARAM BiocParallel param multithreading desired. Defaults BiocParallel::SerialParam()","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/map_all_best_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map many bulk samples in the same dataframe — map_all_best_bins","text":"vector MappingResult objects.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/map_all_best_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map many bulk samples in the same dataframe — map_all_best_bins","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/map_best_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Map the best matching SC bin for a bulk sample — map_best_bin","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"Map best matching SC bin bulk sample","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/map_best_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"","code":"map_best_bin(   blase_data,   bulk_id,   bulk_data,   bootstrap_iterations = 200,   confidence_level = 0.9 )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/map_best_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"blase_data BlaseData holding bins. bulk_id sample id bulk analyse. bulk_data whole bulk read matrix dataframe. row represent gene, column sample. bootstrap_iterations number bootstrapping iterations run. confidence_level confidence interval calculate mappings. Defaults 90%.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/map_best_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"MappingResult object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/map_best_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-best-bin-getter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get best bin of a BLASE Mapping Results object. — best_bin","title":"Get best bin of a BLASE Mapping Results object. — best_bin","text":"Get best bin BLASE Mapping Results object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-best-bin-getter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get best bin of a BLASE Mapping Results object. — best_bin","text":"","code":"best_bin(x)  # S4 method for class 'MappingResult' best_bin(x)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-best-bin-getter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get best bin of a BLASE Mapping Results object. — best_bin","text":"x MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-best-bin-getter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get best bin of a BLASE Mapping Results object. — best_bin","text":"best bin ID mapping","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-best-bin-getter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get best bin of a BLASE Mapping Results object. — best_bin","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-best-correlation-getter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get best correlation of a BLASE Mapping Results object. — best_correlation","title":"Get best correlation of a BLASE Mapping Results object. — best_correlation","text":"Get best correlation BLASE Mapping Results object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-best-correlation-getter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get best correlation of a BLASE Mapping Results object. — best_correlation","text":"","code":"best_correlation(x)  # S4 method for class 'MappingResult' best_correlation(x)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-best-correlation-getter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get best correlation of a BLASE Mapping Results object. — best_correlation","text":"x MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-best-correlation-getter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get best correlation of a BLASE Mapping Results object. — best_correlation","text":"highest correlation value mapping","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-best-correlation-getter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get best correlation of a BLASE Mapping Results object. — best_correlation","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-bootstrap-iterations-getter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of bootstrap iterations performed for a BLASE Mapping Results object. — bootstrap_iterations","title":"Get the number of bootstrap iterations performed for a BLASE Mapping Results object. — bootstrap_iterations","text":"Get number bootstrap iterations performed BLASE Mapping Results object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-bootstrap-iterations-getter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of bootstrap iterations performed for a BLASE Mapping Results object. — bootstrap_iterations","text":"","code":"bootstrap_iterations(x)  # S4 method for class 'MappingResult' bootstrap_iterations(x)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-bootstrap-iterations-getter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of bootstrap iterations performed for a BLASE Mapping Results object. — bootstrap_iterations","text":"x MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-bootstrap-iterations-getter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of bootstrap iterations performed for a BLASE Mapping Results object. — bootstrap_iterations","text":"number iterations performed mapping.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-bootstrap-iterations-getter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the number of bootstrap iterations performed for a BLASE Mapping Results object. — bootstrap_iterations","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-bulk-name-getter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get name of bulk of a BLASE Mapping Results object. — bulk_name","title":"Get name of bulk of a BLASE Mapping Results object. — bulk_name","text":"Get name bulk BLASE Mapping Results object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-bulk-name-getter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get name of bulk of a BLASE Mapping Results object. — bulk_name","text":"","code":"bulk_name(x)  # S4 method for class 'MappingResult' bulk_name(x)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-bulk-name-getter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get name of bulk of a BLASE Mapping Results object. — bulk_name","text":"x MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-bulk-name-getter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get name of bulk of a BLASE Mapping Results object. — bulk_name","text":"name bulk used map .","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-bulk-name-getter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get name of bulk of a BLASE Mapping Results object. — bulk_name","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-confident-mapping-getter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get if the result is confident for a BLASE Mapping Results object. — confident_mapping","title":"Get if the result is confident for a BLASE Mapping Results object. — confident_mapping","text":"Get result confident BLASE Mapping Results object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-confident-mapping-getter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get if the result is confident for a BLASE Mapping Results object. — confident_mapping","text":"","code":"confident_mapping(x)  # S4 method for class 'MappingResult' confident_mapping(x)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-confident-mapping-getter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get if the result is confident for a BLASE Mapping Results object. — confident_mapping","text":"x MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-confident-mapping-getter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get if the result is confident for a BLASE Mapping Results object. — confident_mapping","text":"TRUE result confident, otherwise FALSE","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-confident-mapping-getter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get if the result is confident for a BLASE Mapping Results object. — confident_mapping","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-history-getter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the mapping history for a BLASE Mapping Results object. — mapping_history","title":"Get the mapping history for a BLASE Mapping Results object. — mapping_history","text":"Get mapping history BLASE Mapping Results object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-history-getter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the mapping history for a BLASE Mapping Results object. — mapping_history","text":"","code":"mapping_history(x)  # S4 method for class 'MappingResult' mapping_history(x)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-history-getter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the mapping history for a BLASE Mapping Results object. — mapping_history","text":"x MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-history-getter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the mapping history for a BLASE Mapping Results object. — mapping_history","text":"mapping history mapping, data frame.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-history-getter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the mapping history for a BLASE Mapping Results object. — mapping_history","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-top-2-distance-getter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the difference in correlation between the top 2 most correlated bins for a BLASE Mapping Results object. — top_2_distance","title":"Get the difference in correlation between the top 2 most correlated bins for a BLASE Mapping Results object. — top_2_distance","text":"Get difference correlation top 2 correlated bins BLASE Mapping Results object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-top-2-distance-getter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the difference in correlation between the top 2 most correlated bins for a BLASE Mapping Results object. — top_2_distance","text":"","code":"top_2_distance(x)  # S4 method for class 'MappingResult' top_2_distance(x)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-top-2-distance-getter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the difference in correlation between the top 2 most correlated bins for a BLASE Mapping Results object. — top_2_distance","text":"x MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-top-2-distance-getter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the difference in correlation between the top 2 most correlated bins for a BLASE Mapping Results object. — top_2_distance","text":"difference correlation top 2 correlated bins mapping.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/mapping-result-top-2-distance-getter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the difference in correlation between the top 2 most correlated bins for a BLASE Mapping Results object. — top_2_distance","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_bin_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the populations of a bin — plot_bin_population","title":"Plot the populations of a bin — plot_bin_population","text":"Plot populations bin","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_bin_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the populations of a bin — plot_bin_population","text":"","code":"plot_bin_population(x, bin, ...)  # S4 method for class 'SingleCellExperiment' plot_bin_population(x, bin, group_by_slot)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_bin_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the populations of a bin — plot_bin_population","text":"x object plot . bin bin ID plot ... additional arguments passed object-specific methods. group_by_slot slot SingleCellExperiment::SingleCellExperiment used cell type labels.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_bin_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the populations of a bin — plot_bin_population","text":"ggplot2 object plot population given object bin.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_bin_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the populations of a bin — plot_bin_population","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_find_best_params_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of the search for good parameters — plot_find_best_params_results","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"Plot results search good parameters","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_find_best_params_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"","code":"plot_find_best_params_results(   find_best_params_results,   bin_count_colors = viridis::scale_color_viridis(option = \"viridis\"),   gene_count_colors = viridis::scale_color_viridis(option = \"magma\") )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_find_best_params_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"find_best_params_results Results dataframe find_best_params() bin_count_colors Optional, custom bin count color scheme. gene_count_colors Optional, custom gene count color scheme.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_find_best_params_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"plot showing convexity changes n_bins n_genes changed. See find_best_params() details interpret.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_find_best_params_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"","code":"ncells <- 70 ngenes <- 100 counts_matrix <- matrix(   c(seq_len(3500) / 10, seq_len(3500) / 5),   ncol = ncells,   nrow = ngenes ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(   normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- paste0(\"cell\", seq_len(ncells)) rownames(sce) <- paste0(\"gene\", seq_len(ngenes)) sce$cell_type <- c(   rep(\"celltype_1\", ncells / 2),   rep(\"celltype_2\", ncells / 2) )  sce$pseudotime <- seq_len(ncells) genelist <- rownames(sce)  # Finding the best params for the BlaseData best_params <- find_best_params(   sce, genelist,   bins_count_range = c(2, 3),   gene_count_range = c(20, 50),   pseudotime_slot = \"pseudotime\",   split_by = \"pseudotime_range\" ) best_params #>   column_label bin_count gene_count min_convexity mean_convexity #> 1            1         2         20             0              0 #> 2            2         2         50             0              0 #> 3            1         3         20             0              0 #> 4            2         3         50             0              0 #>   confident_mapping_pct #> 1                     0 #> 2                     0 #> 3                     0 #> 4                     0 plot_find_best_params_results(best_params)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_gene_peakedness.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_gene_peakedness — plot_gene_peakedness","title":"plot_gene_peakedness — plot_gene_peakedness","text":"plot_gene_peakedness","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_gene_peakedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_gene_peakedness — plot_gene_peakedness","text":"","code":"plot_gene_peakedness(   sce,   gene_peakedness_df,   gene,   pseudotime_slot = \"slingPseudotime_1\" )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_gene_peakedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_gene_peakedness — plot_gene_peakedness","text":"sce Single Cell Experiment plot gene . Must contain pseudotime, normcounts gene_peakedness_df DataFrame Result calculate_gene_peakedness gene gene plot. Must present SCE gene_peakedness_df pseudotime_slot pseudotime slot SCE object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_gene_peakedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_gene_peakedness — plot_gene_peakedness","text":"ggplot2 plot showing: black points, expression gene pseudotime, green line, fitted expression gene pseudotime, inside outside window means smoothed expression (red blue dotted horizotal lines respectively), bounds window (black dotted vertical lines).","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_gene_peakedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot_gene_peakedness — plot_gene_peakedness","text":"","code":"ncells <- 70 ngenes <- 100 # Each gene should have mean around its gene number counts = c() for (i in seq_len(ngenes)) {   counts = c(counts, dnorm(seq_len(ncells), mean=(ncells/i), sd=1)) }  counts_matrix <- matrix(   counts,   ncol = ncells,   nrow = ngenes ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(   counts = counts_matrix * 3,   normcounts = counts_matrix,   logcounts = log(counts_matrix) )) colnames(sce) <- paste0(\"cell\", seq_len(ncells)) rownames(sce) <- paste0(\"gene\", seq_len(ngenes)) sce$cell_type <- c(   rep(\"celltype_1\", ncells / 2),   rep(\"celltype_2\", ncells / 2) )  sce$pseudotime <- seq_len(ncells) genelist <- rownames(sce)  # calculate_gene_peakedness gene_peakedness <- calculate_gene_peakedness(   sce, pseudotime_slot=\"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully  head(gene_peakedness) #>      gene peak_pseudotime mean_in_window mean_out_window        ratio #> 100 gene1            70.0   1.060616e-24     0.037863935 2.801125e-23 #> 52  gene2            36.4   4.680824e-02     0.029379725 1.593216e+00 #> 28  gene3            19.6   4.327921e-02     0.014445463 2.996042e+00 #> 21  gene4            14.7   4.563543e-02     0.006531685 6.986777e+00 #> 1   gene5             0.7   9.973557e-02     0.004076218 2.446767e+01 #> 7   gene6             4.9   8.791281e-02     0.000187520 4.688183e+02 #>     window_start window_end deviance_explained #> 100         66.5       73.5         0.02680534 #> 52          32.9       39.9         0.01912609 #> 28          16.1       23.1         0.04505152 #> 21          11.2       18.2         0.58156238 #> 1           -2.8        4.2         0.21032129 #> 7            1.4        8.4         0.14902599  # plot_gene_peakedness plot_gene_peakedness(sce, gene_peakedness, \"gene20\",   pseudotime_slot = \"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully   # smooth_gene smoothed_gene20 <- smooth_gene(   sce, \"gene20\", pseudotime_slot = \"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully head(smoothed_gene20) #>            1            2            3            4            5            6  #> 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16   # Select best spread of genes genes_to_use <- gene_peakedness_spread_selection(sce, gene_peakedness,   genes_per_bin=2, n_gene_bins=1, pseudotime_slot=\"pseudotime\")  print(genes_to_use) #> [1] \"gene30\" \"gene40\" plot(x=gene_peakedness[   gene_peakedness$gene %in% genes_to_use,\"peak_pseudotime\"  ],  y=gene_peakedness[gene_peakedness$gene %in% genes_to_use,\"ratio\"])"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a summary of the mapping result — plot_mapping_result","title":"Plot a summary of the mapping result — plot_mapping_result","text":"Plot summary mapping result","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a summary of the mapping result — plot_mapping_result","text":"","code":"plot_mapping_result(x, y, ...)  # S4 method for class 'SingleCellExperiment,MappingResult' plot_mapping_result(x, y, group_by_slot)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a summary of the mapping result — plot_mapping_result","text":"x object plot . y MappingResult object plot ... additional arguments passed object-specific methods. group_by_slot slot SingleCellExperiment::SingleCellExperiment used coloring output plot. Passed scater::plotUMAP() colour_by, used produce bar chart populations best mapped bin.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a summary of the mapping result — plot_mapping_result","text":"set plots describing mapping.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a summary of the mapping result — plot_mapping_result","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  result <- map_best_bin(blase_data, \"B\", bulk_counts)  # Plot bin sce <- scater::runUMAP(sce) sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_mapping_result(sce, result, group_by_slot = \"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a mapping result's correlation — plot_mapping_result_corr","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"Plots mapping results correlations pseudotime bin","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"","code":"plot_mapping_result_corr(mapping_result)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"mapping_result MappingResult object plot correlations .","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result_corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"ggplot2 object plot","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a mapping result heatmap — plot_mapping_result_heatmap","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"Plots Spearman's Rho fill colour, adds * MappingResult confidently assigned.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"","code":"plot_mapping_result_heatmap(   mapping_result_list,   heatmap_fill_scale = ggplot2::scale_fill_gradientn(colors = c(\"blue\", \"white\", \"red\"),     limits = c(-1, 1)),   annotate = TRUE )"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"mapping_result_list list MappingResult objects include heatmap. heatmap_fill_scale ggplot2 compatible fill gradient scale apply heatmap. annotate Whether annotate heatmap significant results , defaults TRUE.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"heatmap showing correlations mapping result across every pseudotime bin.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/plot_mapping_result_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/show-BlaseData-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an BlaseData object — show,BlaseData-method","title":"Show an BlaseData object — show,BlaseData-method","text":"Show BlaseData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/show-BlaseData-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an BlaseData object — show,BlaseData-method","text":"","code":"# S4 method for class 'BlaseData' show(object)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/show-BlaseData-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an BlaseData object — show,BlaseData-method","text":"object BlaseData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/show-BlaseData-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an BlaseData object — show,BlaseData-method","text":"character vector describing BLASE object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/show-BlaseData-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an BlaseData object — show,BlaseData-method","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol = 10, nrow = 10) sce <- SingleCellExperiment::SingleCellExperiment(     assays = list(normcounts = counts) ) sce$pseudotime <- seq_len(10) data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 3) genes(data) <- as.character(seq_len(10))  genes(data) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/show-MappingResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an MappingResult object — show,MappingResult-method","title":"Show an MappingResult object — show,MappingResult-method","text":"Show MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/show-MappingResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an MappingResult object — show,MappingResult-method","text":"","code":"# S4 method for class 'MappingResult' show(object)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/show-MappingResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an MappingResult object — show,MappingResult-method","text":"object MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/show-MappingResult-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an MappingResult object — show,MappingResult-method","text":"character vector describing Mapping Result object","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/show-MappingResult-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an MappingResult object — show,MappingResult-method","text":"","code":"counts_matrix <- matrix(     c(seq_len(120) / 10, seq_len(120) / 5),     ncol = 48, nrow = 5 ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(     normcounts = counts_matrix, logcounts = log(counts_matrix) )) colnames(sce) <- seq_len(48) rownames(sce) <- as.character(seq_len(5)) sce$cell_type <- c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime <- seq_len(48) blase_data <- as.BlaseData(sce, pseudotime_slot = \"pseudotime\", n_bins = 4) genes(blase_data) <- as.character(seq_len(5))  bulk_counts <- matrix(seq_len(15) * 10, ncol = 3, nrow = 5) colnames(bulk_counts) <- c(\"A\", \"B\", \"C\") rownames(bulk_counts) <- as.character(seq_len(5))  # Map to bin result <- map_best_bin(blase_data, \"B\", bulk_counts) result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: FALSE (next max upper  1 ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Map all bulks to bin results <- map_all_best_bins(blase_data, bulk_counts)  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce <- assign_pseudotime_bins(     sce,     pseudotime_slot = \"pseudotime\", n_bins = 4 ) plot_bin_population(sce, best_bin(result), group_by_slot = \"cell_type\")   # Getters bulk_name(result) #> [1] \"B\" best_bin(result) #> [1] 1 best_correlation(result) #> [1] 1 top_2_distance(result) #> [1] 0 confident_mapping(result) #> [1] FALSE mapping_history(result) #>   bin correlation lower_bound upper_bound #> 1   1           1           1           1 #> 2   2           1           1           1 #> 3   3           1           1           1 #> 4   4           1           1           1 bootstrap_iterations(result) #> [1] 200"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/smooth_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"smooth_gene — smooth_gene","title":"smooth_gene — smooth_gene","text":"Returns smoothed expression given gene, based GAM fit normalised expression.","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/smooth_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"smooth_gene — smooth_gene","text":"","code":"smooth_gene(sce, gene, pseudotime_slot = \"slingPseudotime_1\", knots = 10)"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/smooth_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"smooth_gene — smooth_gene","text":"sce SCE calculations . gene name gene smooth pseudotime_slot slot SCE object containing pseudotime knots number knots use fitting GAM","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/smooth_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"smooth_gene — smooth_gene","text":"Smoothed Gene Expression pseudotime","code":""},{"path":"https://andrewmccluskey-uog.github.io/BLASE/reference/smooth_gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"smooth_gene — smooth_gene","text":"","code":"ncells <- 70 ngenes <- 100 # Each gene should have mean around its gene number counts = c() for (i in seq_len(ngenes)) {   counts = c(counts, dnorm(seq_len(ncells), mean=(ncells/i), sd=1)) }  counts_matrix <- matrix(   counts,   ncol = ncells,   nrow = ngenes ) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(   counts = counts_matrix * 3,   normcounts = counts_matrix,   logcounts = log(counts_matrix) )) colnames(sce) <- paste0(\"cell\", seq_len(ncells)) rownames(sce) <- paste0(\"gene\", seq_len(ngenes)) sce$cell_type <- c(   rep(\"celltype_1\", ncells / 2),   rep(\"celltype_2\", ncells / 2) )  sce$pseudotime <- seq_len(ncells) genelist <- rownames(sce)  # calculate_gene_peakedness gene_peakedness <- calculate_gene_peakedness(   sce, pseudotime_slot=\"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Fitting terminated with step failure - check results carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully #> Warning: Iteration limit reached without full convergence - check carefully  head(gene_peakedness) #>      gene peak_pseudotime mean_in_window mean_out_window        ratio #> 100 gene1            70.0   1.060616e-24     0.037863935 2.801125e-23 #> 52  gene2            36.4   4.680824e-02     0.029379725 1.593216e+00 #> 28  gene3            19.6   4.327921e-02     0.014445463 2.996042e+00 #> 21  gene4            14.7   4.563543e-02     0.006531685 6.986777e+00 #> 1   gene5             0.7   9.973557e-02     0.004076218 2.446767e+01 #> 7   gene6             4.9   8.791281e-02     0.000187520 4.688183e+02 #>     window_start window_end deviance_explained #> 100         66.5       73.5         0.02680534 #> 52          32.9       39.9         0.01912609 #> 28          16.1       23.1         0.04505152 #> 21          11.2       18.2         0.58156238 #> 1           -2.8        4.2         0.21032129 #> 7            1.4        8.4         0.14902599  # plot_gene_peakedness plot_gene_peakedness(sce, gene_peakedness, \"gene20\",   pseudotime_slot = \"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully   # smooth_gene smoothed_gene20 <- smooth_gene(   sce, \"gene20\", pseudotime_slot = \"pseudotime\") #> Warning: Iteration limit reached without full convergence - check carefully head(smoothed_gene20) #>            1            2            3            4            5            6  #> 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16 2.220446e-16   # Select best spread of genes genes_to_use <- gene_peakedness_spread_selection(sce, gene_peakedness,   genes_per_bin=2, n_gene_bins=1, pseudotime_slot=\"pseudotime\")  print(genes_to_use) #> [1] \"gene30\" \"gene40\" plot(x=gene_peakedness[   gene_peakedness$gene %in% genes_to_use,\"peak_pseudotime\"  ],  y=gene_peakedness[gene_peakedness$gene %in% genes_to_use,\"ratio\"])"},{"path":"https://andrewmccluskey-uog.github.io/BLASE/news/index.html","id":"blase-development-version","dir":"Changelog","previous_headings":"","what":"blase (development version)","title":"blase (development version)","text":"Initial submission.","code":""},{"path":[]},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/BLASE/news/index.html","id":"blase-100","dir":"Changelog","previous_headings":"","what":"blase 1.0.0","title":"blase 1.0.0","text":"Initial release.","code":""}]
