[{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/from-sce.html","id":"setting-up-the-single-cell-experiment","dir":"Articles","previous_headings":"","what":"Setting up the Single Cell Experiment","title":"Atgnat from SingleCellExperiment","text":"First, let’s generate Single Cell Experiment use tool , based tradeSeq vignette [https://bioconductor.org/packages/devel/bioc/vignettes/tradeSeq/inst/doc/tradeSeq.html]. need following use Atgnat: Single Cell Experiment pseudotime. list genes generated fitGAM associationTest","code":"data(countMatrix, package = \"tradeSeq\") counts <- as.matrix(countMatrix) rm(countMatrix) data(crv, package = \"tradeSeq\") data(celltype, package = \"tradeSeq\")  pseudotime <- slingPseudotime(crv, na = FALSE) cellWeights <- slingCurveWeights(crv) sce <- fitGAM(counts = counts, pseudotime = pseudotime, cellWeights = cellWeights,                  nknots = 6, verbose = FALSE, BPPARAM=MulticoreParam(2))  sce$pseudotime = pseudotime[,\"curve1\"] sce$celltype = celltype sce <- computeSumFactors(sce, clusters=quickCluster(sce)) sce <- logNormCounts(sce) normcounts(sce) <- exp(logcounts(sce)) sce = runUMAP(sce)  gridExtra::grid.arrange(       plotUMAP(sce, text_by=\"celltype\", colour_by=\"celltype\"),       plotUMAP(sce, colour_by=\"pseudotime\"),       ncol=1     )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/from-sce.html","id":"finding-the-most-descriptive-genes-with-tradeseq","dir":"Articles","previous_headings":"","what":"Finding the most descriptive genes with tradeSeq","title":"Atgnat from SingleCellExperiment","text":"Now ’ll find genes want use. select top 100 can parameter tuning .","code":"# Use consecutive for genes that change over time assoRes = associationTest(sce, lineages=T, global=F, contrastType=\"consecutive\") genelist = atgnat::get_top_n_genes(assoRes, n_genes = 200, lineage = 1)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/from-sce.html","id":"parameter-tuning-for-atgnat","dir":"Articles","previous_headings":"","what":"Parameter Tuning for Atgnat","title":"Atgnat from SingleCellExperiment","text":"see parameters best Atgnat:  looks like 80 genes 10 bins give us good specificity, let’s double check. non trivial dataset, may take repetition. ignore 5 bin result might enough resolution - depends dataset. general, bins reduce specificity bin similar cell composition. general, aim many bins clusters.","code":"res = atgnat::find_best_params(sce, genelist, split_by=\"pseudotime_range\", pseudotime_slot=\"pseudotime\") atgnat::plot_find_best_params_results(res)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/from-sce.html","id":"inspect-bin-choice","dir":"Articles","previous_headings":"Parameter Tuning for Atgnat","what":"Inspect Bin Choice","title":"Atgnat from SingleCellExperiment","text":"","code":"atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=10) atgnat_data@genes = genelist[1:80] evaluate_parameters(atgnat_data, make_plot = TRUE) #> [1] 0.04910 0.12085"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/from-sce.html","id":"inspect-genes-choice","dir":"Articles","previous_headings":"Parameter Tuning for Atgnat","what":"Inspect Genes Choice","title":"Atgnat from SingleCellExperiment","text":"","code":"evaluate_top_n_genes(atgnat_data)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/from-sce.html","id":"mapping-bulk-samples-to-sc-with-atgnat","dir":"Articles","previous_headings":"","what":"Mapping Bulk Samples to SC with Atgnat","title":"Atgnat from SingleCellExperiment","text":"’re happy, now can try map bulk sample onto single cell. ’ll cell types SingleCellExperiment reality use real bulk dataset.","code":"bulks_df = DataFrame(row.names = rownames(counts(sce))) for (type in unique(sce$celltype)) {   bulks_df = cbind(bulks_df, rowSums(normcounts(subset(sce, , celltype==type)))) } colnames(bulks_df) = unique(sce$celltype)  erythrocyte_result = map_best_bin(atgnat_data, \"Erythrocyte\", bulks_df) erythrocyte_result #> MappingResult for 'Erythrocyte': best_bin=1 correlation=0.959915611814346 top_2_distance=0.4195 #>   Confident Result: TRUE (next max upper  0.579371776840131 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations GMP_result = map_best_bin(atgnat_data, \"GMP\", bulks_df) GMP_result #> MappingResult for 'GMP': best_bin=3 correlation=0.952344116268167 top_2_distance=0.0183 #>   Confident Result: FALSE (next max upper  0.949085794655415 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations neutrophils_result = map_best_bin(atgnat_data, \"Neutrophils\", bulks_df) neutrophils_result #> MappingResult for 'Neutrophils': best_bin=6 correlation=0.983520862634787 top_2_distance=0.0807 #>   Confident Result: TRUE (next max upper  0.922714486638537 ) #>   with history for scores against 6  bins #>   Bootstrapped with 200 iterations"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/from-sce.html","id":"plotting-heatmap-of-mappings","dir":"Articles","previous_headings":"Mapping Bulk Samples to SC with Atgnat","what":"Plotting Heatmap of Mappings","title":"Atgnat from SingleCellExperiment","text":"see well plotted differences cell types, can plot heatmap results. neutrophils Erythrocytes confidently mapped, GMP population doesn’t map well.","code":"plot_mapping_result_heatmap(list(   erythrocyte_result,    GMP_result,    neutrophils_result))"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/from-sce.html","id":"plotting-detailed-correlation-maps","dir":"Articles","previous_headings":"Mapping Bulk Samples to SC with Atgnat","what":"Plotting Detailed Correlation Maps","title":"Atgnat from SingleCellExperiment","text":"look GMP mapping, can plot correlation bin. ’s clear bin 2 3 well correlated. lower bound best correlated bin (3) higher upper bound next best bin (2), Atgnat doesn’t make confident call .","code":"plot_mapping_result_corr(GMP_result)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/from-sce.html","id":"plotting-summary-plots-of-mappings","dir":"Articles","previous_headings":"Mapping Bulk Samples to SC with Atgnat","what":"Plotting Summary Plots of Mappings","title":"Atgnat from SingleCellExperiment","text":"Now can detailed plotting bins mapped onto Single Cell data, cell type proportions expect , need add pseudotime bins metadata SCE. can see true proportions cell types bin mostly Erythrocytes. explore GMP result, let’s look true proportions bin 2 3. can see bins high proportions GMP cell type, Atgnat make convincing call either true “best” mapping. case, since Bin 3 larger proportion number GMP cells, likely best mapping, reflected Atgnat’s correlation score.","code":"binned_sce = assign_pseudotime_bins(sce, split_by=\"pseudotime_range\", n_bins=10, pseudotime_slot=\"pseudotime\")  plot_mapping_result(binned_sce, erythrocyte_result, group_by_slot=\"celltype\") gridExtra::grid.arrange(   plot_bin_population(binned_sce, 2, group_by_slot=\"celltype\"),   plot_bin_population(binned_sce, 3, group_by_slot=\"celltype\") )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/articles/from-sce.html","id":"session","dir":"Articles","previous_headings":"","what":"Session","title":"Atgnat from SingleCellExperiment","text":"","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> Random number generation: #>  RNG:     Mersenne-Twister  #>  Normal:  Inversion  #>  Sample:  Rounding  #>   #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] BiocParallel_1.34.2         scater_1.28.0               #>  [3] ggplot2_3.4.4               scran_1.28.2                #>  [5] scuttle_1.10.3              slingshot_2.8.0             #>  [7] TrajectoryUtils_1.8.0       princurve_2.1.6             #>  [9] tradeSeq_1.14.0             SingleCellExperiment_1.22.0 #> [11] SummarizedExperiment_1.30.2 Biobase_2.60.0              #> [13] GenomicRanges_1.52.1        GenomeInfoDb_1.36.4         #> [15] IRanges_2.34.1              S4Vectors_0.38.2            #> [17] BiocGenerics_0.46.0         MatrixGenerics_1.12.3       #> [19] matrixStats_1.0.0           atgnat_0.0.0.9000           #>  #> loaded via a namespace (and not attached): #>  [1] bitops_1.0-7              pbapply_1.7-2             #>  [3] gridExtra_2.3             rlang_1.1.1               #>  [5] magrittr_2.0.3            compiler_4.3.1            #>  [7] mgcv_1.8-42               DelayedMatrixStats_1.22.6 #>  [9] systemfonts_1.0.5         vctrs_0.6.4               #> [11] stringr_1.5.0             pkgconfig_2.0.3           #> [13] crayon_1.5.2              fastmap_1.1.1             #> [15] XVector_0.40.0            labeling_0.4.3            #> [17] utf8_1.2.3                rmarkdown_2.25            #> [19] ggbeeswarm_0.7.2          ragg_1.2.6                #> [21] purrr_1.0.2               xfun_0.40                 #> [23] bluster_1.10.0            zlibbioc_1.46.0           #> [25] cachem_1.0.8              beachmat_2.16.0           #> [27] jsonlite_1.8.7            DelayedArray_0.26.7       #> [29] irlba_2.3.5.1             parallel_4.3.1            #> [31] cluster_2.1.4             R6_2.5.1                  #> [33] bslib_0.5.1               stringi_1.7.12            #> [35] RColorBrewer_1.1-3        limma_3.56.2              #> [37] jquerylib_0.1.4           Rcpp_1.0.11               #> [39] knitr_1.44                FNN_1.1.3.2               #> [41] Matrix_1.5-4.1            splines_4.3.1             #> [43] igraph_1.5.1              abind_1.4-5               #> [45] yaml_2.3.7                viridis_0.6.4             #> [47] codetools_0.2-19          lattice_0.21-8            #> [49] tibble_3.2.1              withr_2.5.1               #> [51] evaluate_0.22             desc_1.4.2                #> [53] pillar_1.9.0              rprojroot_2.0.3           #> [55] RCurl_1.98-1.12           sparseMatrixStats_1.12.2  #> [57] munsell_0.5.0             scales_1.2.1              #> [59] glue_1.6.2                metapod_1.8.0             #> [61] tools_4.3.1               BiocNeighbors_1.18.0      #> [63] ScaledMatrix_1.8.1        locfit_1.5-9.8            #> [65] fs_1.6.3                  grid_4.3.1                #> [67] edgeR_3.42.4              colorspace_2.1-0          #> [69] nlme_3.1-162              GenomeInfoDbData_1.2.10   #> [71] beeswarm_0.4.0            BiocSingular_1.16.0       #> [73] vipor_0.4.5               cli_3.6.1                 #> [75] rsvd_1.0.5                textshaping_0.3.7         #> [77] fansi_1.0.5               S4Arrays_1.0.6            #> [79] viridisLite_0.4.2         uwot_0.1.16               #> [81] gtable_0.3.4              sass_0.4.7                #> [83] digest_0.6.33             ggrepel_0.9.4             #> [85] dqrng_0.3.1               farver_2.1.1              #> [87] memoise_2.0.1             htmltools_0.5.6.1         #> [89] pkgdown_2.0.7             lifecycle_1.0.3           #> [91] statmod_1.5.0"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew McCluskey. Author, maintainer. Thomas Otto. Thesis advisor.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McCluskey (2023). atgnat: Characterise Bulk Trajectory Acceleration. R package version 0.0.0.9000, https://andrewmccluskey-uog.github.io/atgnat/.","code":"@Manual{,   title = {atgnat: Characterise Bulk Trajectory Acceleration},   author = {Andrew McCluskey},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://andrewmccluskey-uog.github.io/atgnat/}, }"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/index.html","id":"atgnat","dir":"","previous_headings":"","what":"Characterise Bulk Trajectory Acceleration","title":"Characterise Bulk Trajectory Acceleration","text":"goal atgnat enable map bulk RNA-seq samples onto Single Cell RNA-seq analysis, emphasis trajectories (can work continuous variable across data!).","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Characterise Bulk Trajectory Acceleration","text":"can install development version atgnat GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"andrewmccluskey-uog/atgnat\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Characterise Bulk Trajectory Acceleration","text":"Take look Vignette use Single Cell Experiment.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/AtgnatData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Atgnat Data Object — AtgnatData-class","title":"Atgnat Data Object — AtgnatData-class","text":"creation details, see .AtgnatData()","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/AtgnatData-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atgnat Data Object — AtgnatData-class","text":"AtgnatData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/AtgnatData-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Atgnat Data Object — AtgnatData-class","text":"pseudobulk_bins list data.frames. item normalised count matrix representing bin, column cell bin row gene. bins list. list bin names timepoint. genes list. list genes selected discriminating timepoints.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/AtgnatData-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atgnat Data Object — AtgnatData-class","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol=10, nrow=10) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(normcounts = counts)) sce$pseudotime = seq_len(10) as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=3) #> Atgnat Data with: #> \tbins: c(1, 2, 3) #> \tselected genes: character(0)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/MappingResult-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Atgnat Mapping Result — MappingResult-class","title":"Atgnat Mapping Result — MappingResult-class","text":"Created map_best_bin()","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/MappingResult-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atgnat Mapping Result — MappingResult-class","text":"MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/MappingResult-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Atgnat Mapping Result — MappingResult-class","text":"bulk_name name bulk sample mapped. best_bin bin best matched bulk sample. best_correlation spearman's rho test geneset winning bin bulk. top_2_distance absolute difference best second best mapping buckets. Higher indicates less doubtful mapping. confident_mapping TRUE mapped bin's lower bound higher maximum upper bound bins. history dataframe correlation score confidence bounds bin. bootstrap_iterations number iterations used bootstrap.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/MappingResult-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atgnat Mapping Result — MappingResult-class","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) atgnat_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(atgnat_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/as.AtgnatData.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to AtgnatData — as.AtgnatData","title":"Conversion to AtgnatData — as.AtgnatData","text":"Conversion AtgnatData","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/as.AtgnatData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to AtgnatData — as.AtgnatData","text":"","code":"as.AtgnatData(x, ...)  # S4 method for data.frame as.AtgnatData(x)  # S4 method for SingleCellExperiment as.AtgnatData(   x,   pseudotime_slot = \"slingPseudotime_1\",   n_bins = 20,   split_by = \"pseudotime_range\" )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/as.AtgnatData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to AtgnatData — as.AtgnatData","text":"x object take counts ... additional arguments passed object-specific methods. pseudotime_slot SingleCellExperiment::SingleCellExperiment slot containing pseudotime values cell passed assign_pseudotime_bins(). n_bins number bins create, passed assign_pseudotime_bins(). split_by split_by method passed assign_pseudotime_bins().","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/as.AtgnatData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion to AtgnatData — as.AtgnatData","text":"AtgnatData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/as.AtgnatData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion to AtgnatData — as.AtgnatData","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol=10, nrow=10) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(normcounts = counts)) sce$pseudotime = seq_len(10) as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=3) #> Atgnat Data with: #> \tbins: c(1, 2, 3) #> \tselected genes: character(0)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/assign_pseudotime_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"Assign Pseudotime Bins source object's metadata","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/assign_pseudotime_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"","code":"assign_pseudotime_bins(x, split_by = \"pseudotime_range\", n_bins = 20, ...)  # S4 method for SingleCellExperiment assign_pseudotime_bins(   x,   split_by,   n_bins,   pseudotime_slot = \"slingPseudotime_1\" )  # S4 method for data.frame assign_pseudotime_bins(x, split_by, n_bins)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/assign_pseudotime_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"x object add metadata . split_by technique used split bins. default pseudotime_range picks bin cell based constant range pseudotime. cells picks bin cell based even number cells per bin. n_bins number bins split cells . ... additional arguments passed object-specific methods. pseudotime_slot SingleCellExperiment::SingleCellExperiment slot containing pseudotime values cell.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/assign_pseudotime_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Pseudotime Bins to a source object's metadata — assign_pseudotime_bins","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) atgnat_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(atgnat_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"use n_bins n_genes implied sce pseudotime_bins_top_n_genes_df parameters return quality metrics optional chart.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"","code":"evaluate_parameters(atgnat_data, make_plot = FALSE, plot_columns = 4)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"atgnat_data AtgnatData object use. make_plot Whether render plot showing correlations pseudobulk bin try map given bin. plot_columns many columns use plot.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"vector length 2: \"worst top 2 distance\" containing lowest difference absolute values top 2 correlated bins bin. Higher better differentiating. \"mean top 2 distance\" containing mean top 2 distance across entire set genes bins. Higher better differentiation, matter less worst value.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate n_bins and n_genes for bin mapping — evaluate_parameters","text":"","code":"ncells = 70 ngenes = 100 counts_matrix <- matrix(c(seq_len(3500)/10, seq_len(3500)/5), ncol=ncells, nrow=ngenes) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(ncells) rownames(sce) = as.character(seq_len(ngenes)) sce$cell_type = c(rep(\"celltype_1\", ncells/2), rep(\"celltype_2\", ncells/2))  sce$pseudotime = seq_len(ncells) genelist = as.character(seq_len(ngenes))  # Evaluating created AtgnatData atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=10) atgnat_data@genes = genelist[1:20]  # Check specificity of parameters evaluate_parameters(atgnat_data, make_plot = TRUE)  #> [1] 0 0"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_top_n_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Top Genes — evaluate_top_n_genes","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"Shows plots bins expression top n genes. designed help identify selected genes vary pseudotime chosen bins exist . Uses normcounts SCE.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_top_n_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"","code":"evaluate_top_n_genes(atgnat_data, n_genes_to_plot = 16, plot_columns = 4)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_top_n_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"atgnat_data AtgnatData get bins expression . n_genes_to_plot number genes plot. plot_columns number columns plot grid . Best divisor n_genes_to_plot.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/evaluate_top_n_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Top Genes — evaluate_top_n_genes","text":"","code":"ncells = 70 ngenes = 100 counts_matrix <- matrix(c(seq_len(3500)/10, seq_len(3500)/5), ncol=ncells, nrow=ngenes) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(ncells) rownames(sce) = as.character(seq_len(ngenes)) sce$cell_type = c(rep(\"celltype_1\", ncells/2), rep(\"celltype_2\", ncells/2))  sce$pseudotime = seq_len(ncells) genelist = as.character(seq_len(ngenes))  # Evaluating created AtgnatData atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=10) atgnat_data@genes = genelist[1:20]  # Check gene expression over pseudotime evaluate_top_n_genes(atgnat_data)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/find_best_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the Best Parameters For Your Dataset — find_best_params","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"Identify Best Parameters Dataset","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/find_best_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"","code":"find_best_params(   x,   genelist,   bins_count_range = c(5, 10, 20, 40),   gene_count_range = c(10, 20, 40, 80),   ... )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/find_best_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"x object create `AtgnatData`` genelist list genes use (ordered descending goodness) bins_count_range n_bins list try gene_count_range n_genes list try ... params passed child functions, see .AtgnatData()","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/find_best_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"dataframe results. bin_count: bin count attempt gene_count: top n genes use attempt worst_specificity: worst specificity parameters mean_specificity: mean specificity parameters","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/find_best_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the Best Parameters For Your Dataset — find_best_params","text":"","code":"ncells = 70 ngenes = 100 counts_matrix <- matrix(c(seq_len(3500)/10, seq_len(3500)/5), ncol=ncells, nrow=ngenes) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(ncells) rownames(sce) = as.character(seq_len(ngenes)) sce$cell_type = c(rep(\"celltype_1\", ncells/2), rep(\"celltype_2\", ncells/2))  sce$pseudotime = seq_len(ncells) genelist = as.character(seq_len(ngenes))  # Finding the best params for the AtgnatData best_params = find_best_params(   sce, genelist,   bins_count_range=c(10,20),   gene_count_range=c(20,50),   pseudotime_slot=\"pseudotime\",   split_by=\"pseudotime_range\" ) best_params #>   bin_count gene_count worst_specificity mean_specificity #> 1        10         20                 0                0 #> 2        10         50                 0                0 #> 3        20         20                 0                0 #> 4        20         50                 0                0 plot_find_best_params_results(best_params)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_bins_as_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"function try create pseudobulked count matrix bins. replicate cells, discounted. one exists, sample twice create pseudobulks.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_bins_as_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"","code":"get_bins_as_bulk(   pseudotime_sce,   min_cells_for_bulk = 50,   replicate_slot = \"replicate\" )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_bins_as_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"pseudotime_sce Single Cell Experiment object get bins min_cells_for_bulk minimum cells look per replicate bin. replicate_slot slot Single Cell Experiment contains replicate information","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_bins_as_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"dataframe pseudobulk counts matrix.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_bins_as_bulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a pseudobulk of bins with at least 2 replicates — get_bins_as_bulk","text":"","code":"library(SingleCellExperiment, quietly=TRUE) #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians library(atgnat) counts <- matrix(rpois(1000, lambda = 10), ncol=100, nrow=10) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(normcounts = counts, counts = counts/2) ) sce$pseudotime = seq_len(100) colnames(sce) = seq_len(100) rownames(sce) = as.character(seq_len(10)) sce = assign_pseudotime_bins(sce, n_bins=5,   pseudotime_slot=\"pseudotime\", split_by=\"cells\") sce$replicate=rep(c(1,2), 50) result = get_bins_as_bulk(sce, min_cells_for_bulk=1, replicate_slot=\"replicate\") result #>    bin_1_rep_1 bin_1_rep_2 bin_2_rep_1 bin_2_rep_2 bin_3_rep_1 bin_3_rep_2 #> 1         51.0        57.5        44.5        59.0        46.0        49.0 #> 10        45.0        51.5        49.0        51.5        43.0        52.5 #> 2         47.0        51.5        48.5        47.5        42.0        60.0 #> 3         48.0        43.0        37.5        49.5        54.5        54.5 #> 4         52.0        50.5        43.5        45.5        45.0        46.5 #> 5         42.0        44.5        54.5        50.5        59.5        50.0 #> 6         58.5        51.0        51.5        61.5        51.5        53.0 #> 7         53.5        49.5        50.0        39.5        48.0        53.0 #> 8         45.0        48.5        52.5        41.0        47.0        56.5 #> 9         53.5        42.5        48.5        53.0        55.5        50.5 #>    bin_4_rep_1 bin_4_rep_2 bin_5_rep_1 bin_5_rep_2 #> 1         50.5        53.5        51.0        50.0 #> 10        55.5        58.5        56.5        48.0 #> 2         46.5        45.5        45.0        42.5 #> 3         52.5        53.0        51.0        41.0 #> 4         54.5        60.5        40.0        48.0 #> 5         48.0        47.5        52.0        56.0 #> 6         40.0        51.0        46.0        50.5 #> 7         48.0        60.0        49.0        47.0 #> 8         48.0        44.0        39.5        49.0 #> 9         51.5        51.0        48.0        53.0"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_top_n_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Top Genes From An AssociationTestResult — get_top_n_genes","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"Pulls genes highest wald statistic association test result, p value cutoff.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_top_n_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"","code":"get_top_n_genes(   association_test_results,   n_genes = 40,   lineage = NA,   p_cutoff = 0.05 )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_top_n_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"association_test_results association test results data frame take genes . n_genes number genes return. Defaults 40. lineage Lineage use. Defaults NA, assumes test run Lineages=False. p_cutoff P value cutoff use. Defaults less 0.05.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_top_n_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"vector names genes best describe lineage's trajectory.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/get_top_n_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Top Genes From An AssociationTestResult — get_top_n_genes","text":"","code":"assoRes = data.frame(   row.names=c(\"A\", \"B\", \"C\", \"D\"),   waldStat=c(25, 50, 100, 10),   pvalue=c(0.01, 0.5, 0.005, 0.13)) get_top_n_genes(assoRes, n_genes=2) #> [1] \"C\" \"A\""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/map_best_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Map the best matching SC bin for a bulk sample — map_best_bin","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"Map best matching SC bin bulk sample","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/map_best_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"","code":"map_best_bin(atgnat_data, bulk_id, bulk_data, bootstrap_iterations = 200)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/map_best_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"atgnat_data AtgnatData holding bins. bulk_id sample id bulk analyse. bulk_data whole bulk read matrix. bootstrap_iterations number bootstrapping iterations run.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/map_best_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"MappingResult object.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/map_best_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map the best matching SC bin for a bulk sample — map_best_bin","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) atgnat_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(atgnat_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_bin_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the populations of a bin — plot_bin_population","title":"Plot the populations of a bin — plot_bin_population","text":"Plot populations bin","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_bin_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the populations of a bin — plot_bin_population","text":"","code":"plot_bin_population(x, bin, ...)  # S4 method for SingleCellExperiment plot_bin_population(x, bin, group_by_slot)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_bin_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the populations of a bin — plot_bin_population","text":"x object plot . bin bin ID plot ... additional arguments passed object-specific methods. group_by_slot slot SingleCellExperiment::SingleCellExperiment used cell type labels.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_bin_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the populations of a bin — plot_bin_population","text":"ggplot2 object plot population given object bin.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_bin_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the populations of a bin — plot_bin_population","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) atgnat_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(atgnat_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_find_best_params_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of the search for good parameters — plot_find_best_params_results","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"Plot results search good parameters","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_find_best_params_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"","code":"plot_find_best_params_results(   find_best_params_results,   bin_count_colors = viridis::scale_color_viridis(option = \"viridis\"),   gene_count_colors = viridis::scale_color_viridis(option = \"magma\") )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_find_best_params_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"find_best_params_results Results dataframe find_best_params() bin_count_colors Optional, custom bin count color scheme. gene_count_colors Optional, custom gene count color scheme.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_find_best_params_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of the search for good parameters — plot_find_best_params_results","text":"","code":"ncells = 70 ngenes = 100 counts_matrix <- matrix(c(seq_len(3500)/10, seq_len(3500)/5), ncol=ncells, nrow=ngenes) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(ncells) rownames(sce) = as.character(seq_len(ngenes)) sce$cell_type = c(rep(\"celltype_1\", ncells/2), rep(\"celltype_2\", ncells/2))  sce$pseudotime = seq_len(ncells) genelist = as.character(seq_len(ngenes))  # Finding the best params for the AtgnatData best_params = find_best_params(   sce, genelist,   bins_count_range=c(10,20),   gene_count_range=c(20,50),   pseudotime_slot=\"pseudotime\",   split_by=\"pseudotime_range\" ) best_params #>   bin_count gene_count worst_specificity mean_specificity #> 1        10         20                 0                0 #> 2        10         50                 0                0 #> 3        20         20                 0                0 #> 4        20         50                 0                0 plot_find_best_params_results(best_params)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a summary of the mapping result — plot_mapping_result","title":"Plot a summary of the mapping result — plot_mapping_result","text":"Plot summary mapping result","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a summary of the mapping result — plot_mapping_result","text":"","code":"plot_mapping_result(x, y, ...)  # S4 method for SingleCellExperiment,MappingResult plot_mapping_result(x, y, group_by_slot)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a summary of the mapping result — plot_mapping_result","text":"x object plot . y MappingResult object plot ... additional arguments passed object-specific methods. group_by_slot slot SingleCellExperiment::SingleCellExperiment used coloring output plot. Passed scater::plotUMAP() colour_by, used produce bar chart populations best mapped bin.","code":""},{"path":[]},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a summary of the mapping result — plot_mapping_result","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) atgnat_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  result = map_best_bin(atgnat_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf  # Plot bin sce = scater::runUMAP(sce) sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_mapping_result(sce, result, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a mapping result's correlation — plot_mapping_result_corr","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"Plots mapping results correlations pseudobin","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"","code":"plot_mapping_result_corr(mapping_result)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"mapping_result MappingResult object plot correlations .","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"ggplot2 object plot","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a mapping result's correlation — plot_mapping_result_corr","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) atgnat_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(atgnat_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a mapping result heatmap — plot_mapping_result_heatmap","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"Plots Spearman's Rho fill colour, adds * MappingResult confidently assigned.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"","code":"plot_mapping_result_heatmap(   mapping_result_list,   heatmap_fill_scale = viridis::scale_fill_viridis(option = \"viridis\") )"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"mapping_result_list list MappingResult objects include heatmap. heatmap_fill_scale ggplot2 compatible fill scale apply heatmap.","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/plot_mapping_result_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a mapping result heatmap — plot_mapping_result_heatmap","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) atgnat_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(atgnat_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-AtgnatData-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an AtgnatData object — show,AtgnatData-method","title":"Show an AtgnatData object — show,AtgnatData-method","text":"Show AtgnatData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-AtgnatData-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an AtgnatData object — show,AtgnatData-method","text":"","code":"# S4 method for AtgnatData show(object)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-AtgnatData-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an AtgnatData object — show,AtgnatData-method","text":"object AtgnatData object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-AtgnatData-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an AtgnatData object — show,AtgnatData-method","text":"","code":"counts <- matrix(rpois(100, lambda = 10), ncol=10, nrow=10) sce <- SingleCellExperiment::SingleCellExperiment(assays = list(normcounts = counts)) sce$pseudotime = seq_len(10) as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=3) #> Atgnat Data with: #> \tbins: c(1, 2, 3) #> \tselected genes: character(0)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-MappingResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an MappingResult object — show,MappingResult-method","title":"Show an MappingResult object — show,MappingResult-method","text":"Show MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-MappingResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an MappingResult object — show,MappingResult-method","text":"","code":"# S4 method for MappingResult show(object)"},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-MappingResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an MappingResult object — show,MappingResult-method","text":"object MappingResult object","code":""},{"path":"https://andrewmccluskey-uog.github.io/atgnat/reference/show-MappingResult-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show an MappingResult object — show,MappingResult-method","text":"","code":"counts_matrix <- matrix(c(seq_len(120)/10, seq_len(120)/5), ncol=48, nrow=5) sce <- SingleCellExperiment::SingleCellExperiment(assays=list(   normcounts=counts_matrix, logcounts=log(counts_matrix))) colnames(sce) = seq_len(48) rownames(sce) = as.character(seq_len(5)) sce$cell_type = c(rep(\"celltype_1\", 24), rep(\"celltype_2\", 24))  sce$pseudotime = seq_len(48) atgnat_data = as.AtgnatData(sce, pseudotime_slot=\"pseudotime\", n_bins=4) atgnat_data@genes = as.character(seq_len(5))  bulk_counts = matrix(seq_len(15)*10, ncol=3, nrow=5) colnames(bulk_counts) = c(\"A\", \"B\", \"C\") rownames(bulk_counts) = as.character(seq_len(5))  # Map to bin result = map_best_bin(atgnat_data, \"B\", bulk_counts) #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf result #> MappingResult for 'B': best_bin=1 correlation=1 top_2_distance=0 #> \t Confident Result: TRUE (next max upper  -Inf ) #> \t with history for scores against 4  bins #> \t Bootstrapped with 200 iterations  # Plot Heatmap plot_mapping_result_heatmap(list(result))   # Plot Correlation plot_mapping_result_corr(result)   # Plot populations sce = assign_pseudotime_bins(sce, pseudotime_slot=\"pseudotime\", n_bins=4) plot_bin_population(sce, result@best_bin, group_by_slot=\"cell_type\")"}]
